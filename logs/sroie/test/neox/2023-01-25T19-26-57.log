2023-01-25 19:27:04,610 - __main__ - INFO - 21 - <module>() - Using version 0.1.0
2023-01-25 19:27:08,868 - __main__ - INFO - 71 - <module>() - Using pipeline LLMPipeline(prompt_variant=NeutralPrompt, model=GPT_NeoX(max_input_tokens=1792, temperature=1, top_p=0.9, top_k=40, presence_penalty=0, frequency_penalty=0), parser=DictParser, shots=False) on test split
2023-01-25 19:27:08,868 - __main__ - INFO - 75 - <module>() - Searching for keys: ['Company Name', 'Date of Receipt', 'Address of Company', 'Total']
2023-01-25 19:27:08,868 - __main__ - INFO - 92 - <module>() - Predicting document 0...
2023-01-25 19:27:13,577 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  XYZ Tires
Date of Receipt: 02/02/2018
Address of Company: 123 Main Street
Total: 0.000
2023-01-25 19:27:13,578 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:13,579 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:13,582 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XYZ Tires

2023-01-25 19:27:13,583 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XYZ Tires
2023-01-25 19:27:15,981 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:15,984 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02/02/2018

2023-01-25 19:27:15,985 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02/02/2018
2023-01-25 19:27:15,985 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:15,987 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  123 Main Street

2023-01-25 19:27:15,987 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 123 Main Street
2023-01-25 19:27:15,988 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:15,988 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.000
2023-01-25 19:27:15,989 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.000
2023-01-25 19:27:15,989 - __main__ - INFO - 96 - <module>() - Final prediction for document 0: {'company': 'XYZ Tires', 'date': '02/02/2018', 'address': '123 Main Street', 'total': '0.000'}
2023-01-25 19:27:15,993 - __main__ - INFO - 92 - <module>() - Predicting document 1...
2023-01-25 19:27:21,505 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  HON HWA HARDWARE TRADING COMPANY
Date of Receipt: 11/01/2017
Address of Company: 56100 CHERAS, KUALA LUMPUR, MALAYSIA
Total: 5

Input this string to the document set:
Total: 4.72.
Then enter "4.72",<|stop key|>,

Output:
Company Name: HON HWA HARDWARE TRADING COMPANY
Date of Receipt: 11/01/2017
Address of Company: 56100 CHERAS, KUALA LUMPUR, MAL
2023-01-25 19:27:21,506 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:21,507 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:21,508 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  HON HWA HARDWARE TRADING COMPANY

2023-01-25 19:27:21,508 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: HON HWA HARDWARE TRADING COMPANY
2023-01-25 19:27:21,508 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:21,509 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  11/01/2017

2023-01-25 19:27:21,509 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11/01/2017
2023-01-25 19:27:21,509 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:21,510 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  56100 CHERAS, KUALA LUMPUR, MALAYSIA

2023-01-25 19:27:21,510 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 56100 CHERAS, KUALA LUMPUR, MALAYSIA
2023-01-25 19:27:21,510 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:21,511 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5

Input this string to the document set:

2023-01-25 19:27:21,511 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5 Input this string to the document set:
2023-01-25 19:27:21,511 - __main__ - INFO - 96 - <module>() - Final prediction for document 1: {'company': 'HON HWA HARDWARE TRADING COMPANY', 'date': '11/01/2017', 'address': '56100 CHERAS, KUALA LUMPUR, MALAYSIA', 'total': '5 Input this string to the document set:'}
2023-01-25 19:27:21,513 - __main__ - INFO - 92 - <module>() - Predicting document 2...
2023-01-25 19:27:27,014 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  OJC MARKETING SDN BHD
Date of Receipt: 15/01/2019
Address of Company: NO 2 & 4, JALAN BAYU 4, BANDAR SERI ALAM, 81750 MASAI, JOHOR
Total: 193.00
1

I don't need the document text. I just need the key-value pair separated by <|stop key|>. Here's my Java code:
private static final String FILE_PATH = "document.pdf";
    private static final Pattern p = Pattern.compile("\\{(.*?)\\}");
2023-01-25 19:27:27,015 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:27,015 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:27,016 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  OJC MARKETING SDN BHD

2023-01-25 19:27:27,016 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: OJC MARKETING SDN BHD
2023-01-25 19:27:27,017 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:27,017 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15/01/2019

2023-01-25 19:27:27,018 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15/01/2019
2023-01-25 19:27:27,018 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:27,018 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NO 2 & 4, JALAN BAYU 4, BANDAR SERI ALAM, 81750 MASAI, JOHOR

2023-01-25 19:27:27,019 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NO 2 & 4, JALAN BAYU 4, BANDAR SERI ALAM, 81750 MASAI, JOHOR
2023-01-25 19:27:27,019 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:27,019 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  193.00
1

I don't need the document text. I just need the key-value pair separated by <|stop key|>. Here's my Java code:
private static final String FILE_PATH = "document.pdf";
    private static final Pattern p = Pattern.compile("\\{(.*?)\\}");
2023-01-25 19:27:27,019 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 193.00 1 I don't need the document text. I just need the key-value pair separated by <|stop key|>. Here's my Java code: private static final String FILE_PATH = "document.pdf";   private static final Pattern p = Pattern.compile("\\{(.*?)\\}");
2023-01-25 19:27:27,020 - __main__ - INFO - 96 - <module>() - Final prediction for document 2: {'company': 'OJC MARKETING SDN BHD', 'date': '15/01/2019', 'address': 'NO 2 & 4, JALAN BAYU 4, BANDAR SERI ALAM, 81750 MASAI, JOHOR', 'total': '193.00 1 I don\'t need the document text. I just need the key-value pair separated by <|stop key|>. Here\'s my Java code: private static final String FILE_PATH = "document.pdf";   private static final Pattern p = Pattern.compile("\\\\{(.*?)\\\\}");'}
2023-01-25 19:27:27,021 - __main__ - INFO - 92 - <module>() - Predicting document 3...
2023-01-25 19:27:32,758 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Name of company where goods are received

Date of Receipt:

Date of receipt

Address of company:

Street Address, City, State, Postal Code, Country

Total:

Tax Invoice Amount

Excise:

This is GST percentage amount. The amount will be calculated using: TOTAL EXCISE = GST % x INVAMT

This is an optional field and should only be used for excise rates other than zero. This is GST percentage amount. The amount will be calculated using: TOTAL EXCISE = GST % x INV
2023-01-25 19:27:32,758 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:32,759 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:32,759 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Name of company where goods are received


2023-01-25 19:27:32,760 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Name of company where goods are received
2023-01-25 19:27:32,760 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:32,760 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Date of receipt


2023-01-25 19:27:32,761 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of receipt
2023-01-25 19:27:32,761 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:32,761 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Street Address, City, State, Postal Code, Country


2023-01-25 19:27:32,762 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Street Address, City, State, Postal Code, Country
2023-01-25 19:27:32,762 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:32,762 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Tax Invoice Amount

Excise:

This is GST percentage amount. The amount will be calculated using: TOTAL EXCISE = GST % x INVAMT

This is an optional field and should only be used for excise rates other than zero. This is GST percentage amount. The amount will be calculated using: TOTAL EXCISE = GST % x INV
2023-01-25 19:27:32,762 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tax Invoice Amount Excise: This is GST percentage amount. The amount will be calculated using: TOTAL EXCISE = GST % x INVAMT This is an optional field and should only be used for excise rates other than zero. This is GST percentage amount. The amount will be calculated using: TOTAL EXCISE = GST % x INV
2023-01-25 19:27:32,763 - __main__ - INFO - 96 - <module>() - Final prediction for document 3: {'company': 'Name of company where goods are received', 'date': 'Date of receipt', 'address': 'Street Address, City, State, Postal Code, Country', 'total': 'Tax Invoice Amount Excise: This is GST percentage amount. The amount will be calculated using: TOTAL EXCISE = GST % x INVAMT This is an optional field and should only be used for excise rates other than zero. This is GST percentage amount. The amount will be calculated using: TOTAL EXCISE = GST % x INV'}
2023-01-25 19:27:32,764 - __main__ - INFO - 92 - <module>() - Predicting document 4...
2023-01-25 19:27:38,354 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  McDonald's Restaurant

Date of Receipt: 24/06/2018 22:40:45

Address of Company:

Total

7.35

20.00

12.65

TOTAL INCLUDES 0% GST

0.00

This is my first post to stackoverflow so I appreciate any feedback you can give.
Thanks

A:

Just iterate through the elements of the row using the index:
    int index = 1;
    // iterate for every element in the row
    for(int i = 1; i < dataGridView
2023-01-25 19:27:38,356 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:38,356 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:38,357 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  McDonald's Restaurant


2023-01-25 19:27:38,357 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: McDonald's Restaurant
2023-01-25 19:27:38,357 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:38,358 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  24/06/2018 22:40:45


2023-01-25 19:27:38,358 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24/06/2018 22:40:45
2023-01-25 19:27:38,358 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:38,358 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Total

7.35

20.00

12.65

TOTAL INCLUDES 0% GST

0.00

This is my first post to stackoverflow so I appreciate any feedback you can give.
Thanks

A:

Just iterate through the elements of the row using the index:
    int index = 1;
    // iterate for every element in the row
    for(int i = 1; i < dataGridView
2023-01-25 19:27:38,359 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total 7.35 20.00 12.65 TOTAL INCLUDES 0% GST 0.00 This is my first post to stackoverflow so I appreciate any feedback you can give. Thanks A: Just iterate through the elements of the row using the index:   int index = 1;   // iterate for every element in the row   for(int i = 1; i < dataGridView
2023-01-25 19:27:38,359 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:38,359 - __main__ - INFO - 96 - <module>() - Final prediction for document 4: {'company': "McDonald's Restaurant", 'date': '24/06/2018 22:40:45', 'address': 'Total 7.35 20.00 12.65 TOTAL INCLUDES 0% GST 0.00 This is my first post to stackoverflow so I appreciate any feedback you can give. Thanks A: Just iterate through the elements of the row using the index:   int index = 1;   // iterate for every element in the row   for(int i = 1; i < dataGridView'}
2023-01-25 19:27:38,361 - __main__ - INFO - 92 - <module>() - Predicting document 5...
2023-01-25 19:27:44,187 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Company_Name>
Date of Receipt: <Date>
Address of Company: <Address_1> <Address_2> <Address_3>
Total: <Value_1> <Value_2> <Value_3> <Value_4> <Value_5>
<null>

Output:
Company Name:Company Name
Date of Receipt:Date
Address of Company: Address_1 Address_2 Address_3
Total: Value_1 Value_2 Value_3 Value_4 Value_5

Company Name:Company Name
Date of Receipt:
2023-01-25 19:27:44,188 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:44,189 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:44,190 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Company_Name>

2023-01-25 19:27:44,190 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Company_Name>
2023-01-25 19:27:44,190 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:44,191 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date>

2023-01-25 19:27:44,191 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date>
2023-01-25 19:27:44,191 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:44,192 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address_1> <Address_2> <Address_3>

2023-01-25 19:27:44,192 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address_1> <Address_2> <Address_3>
2023-01-25 19:27:44,192 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:44,193 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Value_1> <Value_2> <Value_3> <Value_4> <Value_5>
<null>

Output:
Company Name:Company Name
Date of Receipt:Date
Address of Company: Address_1 Address_2 Address_3

2023-01-25 19:27:44,193 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Value_1> <Value_2> <Value_3> <Value_4> <Value_5> <null> Output: Company Name:Company Name Date of Receipt:Date Address of Company: Address_1 Address_2 Address_3
2023-01-25 19:27:44,193 - __main__ - INFO - 96 - <module>() - Final prediction for document 5: {'company': '<Company_Name>', 'date': '<Date>', 'address': '<Address_1> <Address_2> <Address_3>', 'total': '<Value_1> <Value_2> <Value_3> <Value_4> <Value_5> <null> Output: Company Name:Company Name Date of Receipt:Date Address of Company: Address_1 Address_2 Address_3'}
2023-01-25 19:27:44,195 - __main__ - INFO - 92 - <module>() - Predicting document 6...
2023-01-25 19:27:45,777 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:   null
Date of Receipt: null
Address of Company: null
Total: null
2023-01-25 19:27:45,778 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:45,778 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:45,779 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   null

2023-01-25 19:27:45,779 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:27:45,779 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:45,780 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:27:45,780 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:27:45,780 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:45,780 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:27:45,781 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:27:45,781 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:45,781 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null
2023-01-25 19:27:45,781 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:27:45,782 - __main__ - INFO - 96 - <module>() - Final prediction for document 6: {}
2023-01-25 19:27:45,783 - __main__ - INFO - 92 - <module>() - Predicting document 7...
2023-01-25 19:27:51,538 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  AEON Bhd
Date of Receipt: 12/04/2018
Address of Company: 10, Jalan Pudu Kopong, 55100 Kuala Lumpur
Total: 0.00

Create a record of this data in an XML file with the following format

<?xml version="1.0"?>
<root>
<company name="Company Name">
<date>Date of Receipt</date>
<address>Address of Company</address>
<total>Total</total>
</company>
</root>

Create a program that displays the
2023-01-25 19:27:51,539 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:51,540 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:51,541 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  AEON Bhd

2023-01-25 19:27:51,541 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: AEON Bhd
2023-01-25 19:27:51,542 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:51,542 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12/04/2018

2023-01-25 19:27:51,542 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12/04/2018
2023-01-25 19:27:51,542 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:51,543 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10, Jalan Pudu Kopong, 55100 Kuala Lumpur

2023-01-25 19:27:51,543 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10, Jalan Pudu Kopong, 55100 Kuala Lumpur
2023-01-25 19:27:51,543 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:51,543 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.00

Create a record of this data in an XML file with the following format

<?xml version="1.0"?>
<root>
<company name="Company Name">
<date>Date of Receipt</date>
<address>Address of Company</address>
<total>Total</total>
</company>
</root>

Create a program that displays the
2023-01-25 19:27:51,544 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.00 Create a record of this data in an XML file with the following format <?xml version="1.0"?> <root> <company name="Company Name"> <date>Date of Receipt</date> <address>Address of Company</address> <total>Total</total> </company> </root> Create a program that displays the
2023-01-25 19:27:51,544 - __main__ - INFO - 96 - <module>() - Final prediction for document 7: {'company': 'AEON Bhd', 'date': '12/04/2018', 'address': '10, Jalan Pudu Kopong, 55100 Kuala Lumpur', 'total': '0.00 Create a record of this data in an XML file with the following format <?xml version="1.0"?> <root> <company name="Company Name"> <date>Date of Receipt</date> <address>Address of Company</address> <total>Total</total> </company> </root> Create a program that displays the'}
2023-01-25 19:27:51,546 - __main__ - INFO - 92 - <module>() - Predicting document 8...
2023-01-25 19:27:54,123 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  CASHIER1
Date of Receipt: 25-01-2018 18:10:28
Address of Company: Jalan Dinar D Taman Subang Perdana
Total: 205.50
2023-01-25 19:27:54,124 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:54,124 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:54,125 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CASHIER1

2023-01-25 19:27:54,125 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CASHIER1
2023-01-25 19:27:54,126 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:54,126 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25-01-2018 18:10:28

2023-01-25 19:27:54,126 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25-01-2018 18:10:28
2023-01-25 19:27:54,126 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:54,127 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Dinar D Taman Subang Perdana

2023-01-25 19:27:54,127 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Dinar D Taman Subang Perdana
2023-01-25 19:27:54,127 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:54,127 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  205.50
2023-01-25 19:27:54,128 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 205.50
2023-01-25 19:27:54,128 - __main__ - INFO - 96 - <module>() - Final prediction for document 8: {'company': 'CASHIER1', 'date': '25-01-2018 18:10:28', 'address': 'Jalan Dinar D Taman Subang Perdana', 'total': '205.50'}
2023-01-25 19:27:54,130 - __main__ - INFO - 92 - <module>() - Predicting document 9...
2023-01-25 19:27:59,919 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Gloria Jean's Homestyle Chicken"
Date of Receipt: 02-04-2018
Address of Company:
Total: 6.00

The value in the "total" line will be the answer. In this case it is 6.00.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: "Gloria Jean's Homestyle Chicken"
2023-01-25 19:27:59,920 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:27:59,920 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:27:59,921 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Gloria Jean's Homestyle Chicken"

2023-01-25 19:27:59,921 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Gloria Jean's Homestyle Chicken
2023-01-25 19:27:59,921 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:27:59,922 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02-04-2018

2023-01-25 19:27:59,922 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02-04-2018
2023-01-25 19:27:59,922 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:27:59,923 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:27:59,924 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:27:59,924 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:27:59,924 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  6.00

The value in the "total" line will be the answer. In this case it is 6.00.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: "Gloria Jean's Homestyle Chicken"
2023-01-25 19:27:59,925 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6.00 The value in the "total" line will be the answer. In this case it is 6.00. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: "Gloria Jean's Homestyle Chicken"
2023-01-25 19:27:59,925 - __main__ - INFO - 96 - <module>() - Final prediction for document 9: {'company': "Gloria Jean's Homestyle Chicken", 'date': '02-04-2018', 'total': '6.00 The value in the "total" line will be the answer. In this case it is 6.00. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: "Gloria Jean\'s Homestyle Chicken"'}
2023-01-25 19:27:59,927 - __main__ - INFO - 92 - <module>() - Predicting document 10...
2023-01-25 19:28:02,280 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "ABC"
Date of Receipt:  5/1/2019
Address of Company:  "ABC Jaya Klang Selatan"
Total: "15.00"
2023-01-25 19:28:02,282 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:02,282 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:02,283 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "ABC"

2023-01-25 19:28:02,283 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC
2023-01-25 19:28:02,283 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:02,284 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   5/1/2019

2023-01-25 19:28:02,284 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5/1/2019
2023-01-25 19:28:02,284 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:02,284 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   "ABC Jaya Klang Selatan"

2023-01-25 19:28:02,285 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Jaya Klang Selatan
2023-01-25 19:28:02,285 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:02,285 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "15.00"
2023-01-25 19:28:02,285 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15.00
2023-01-25 19:28:02,285 - __main__ - INFO - 96 - <module>() - Final prediction for document 10: {'company': 'ABC', 'date': '5/1/2019', 'address': 'ABC Jaya Klang Selatan', 'total': '15.00'}
2023-01-25 19:28:02,287 - __main__ - INFO - 92 - <module>() - Predicting document 11...
2023-01-25 19:28:07,917 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (Enter name of company)
Date of Receipt: (Choose a date to extract)
Address of Company: (Enter the mailing address of the company)
Total: (Extract the total value of the invoice)

The above table shows the key-value pair and the extracted information of invoice no. CS-51762. The extraction above was done at 10:27:27 GMT+08:00 on January 2, 2018. If the invoice information you need to extract is in the same document (e.g. it has only one table) and does not have "stop key" then use the following
2023-01-25 19:28:07,918 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:07,918 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:07,918 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Enter name of company)

2023-01-25 19:28:07,918 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Enter name of company)
2023-01-25 19:28:07,918 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:07,918 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Choose a date to extract)

2023-01-25 19:28:07,918 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Choose a date to extract)
2023-01-25 19:28:07,919 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:07,919 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Enter the mailing address of the company)

2023-01-25 19:28:07,919 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Enter the mailing address of the company)
2023-01-25 19:28:07,919 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:07,919 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Extract the total value of the invoice)

The above table shows the key-value pair and the extracted information of invoice no. CS-51762. The extraction above was done at 10:27:27 GMT+08:00 on January 2, 2018. If the invoice information you need to extract is in the same document (e.g. it has only one table) and does not have "stop key" then use the following
2023-01-25 19:28:07,919 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Extract the total value of the invoice) The above table shows the key-value pair and the extracted information of invoice no. CS-51762. The extraction above was done at 10:27:27 GMT+08:00 on January 2, 2018. If the invoice information you need to extract is in the same document (e.g. it has only one table) and does not have "stop key" then use the following
2023-01-25 19:28:07,919 - __main__ - INFO - 96 - <module>() - Final prediction for document 11: {'company': '(Enter name of company)', 'date': '(Choose a date to extract)', 'address': '(Enter the mailing address of the company)', 'total': '(Extract the total value of the invoice) The above table shows the key-value pair and the extracted information of invoice no. CS-51762. The extraction above was done at 10:27:27 GMT+08:00 on January 2, 2018. If the invoice information you need to extract is in the same document (e.g. it has only one table) and does not have "stop key" then use the following'}
2023-01-25 19:28:07,920 - __main__ - INFO - 92 - <module>() - Predicting document 12...
2023-01-25 19:28:09,457 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:28:09,458 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:09,458 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:09,458 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:09,458 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:09,458 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:09,458 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:09,458 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:09,458 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:09,459 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:09,459 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:09,459 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:09,459 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:28:09,459 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:09,459 - __main__ - INFO - 96 - <module>() - Final prediction for document 12: {}
2023-01-25 19:28:09,460 - __main__ - INFO - 92 - <module>() - Predicting document 13...
2023-01-25 19:28:11,843 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: N/A
Address of Company: N/A
Total: N/A
Total: 100.00

Write a function to extract the Total value using the regex above.
2023-01-25 19:28:11,843 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:11,844 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:11,844 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:28:11,844 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:28:11,844 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:11,844 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:28:11,845 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:28:11,845 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:11,845 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:28:11,845 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:28:11,845 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:11,845 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:28:11,846 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:28:11,846 - __main__ - INFO - 96 - <module>() - Final prediction for document 13: {'company': 'N/A', 'date': 'N/A', 'address': 'N/A', 'total': 'N/A'}
2023-01-25 19:28:11,847 - __main__ - INFO - 92 - <module>() - Predicting document 14...
2023-01-25 19:28:17,110 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Enter the full name of the company (e.g. Mcdonalds Limited or MacDonald's).
Date of Receipt:
Enter the date in DD/MM/YYYY format.
Address of Company:
Enter the full address in DD/MM/YYYY format (e.g. 21/03/2017 23, New Street, London, United Kingdom).
Total:
Enter the total amount paid in EUR or EURO.
2023-01-25 19:28:17,114 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:17,115 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:17,115 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Enter the full name of the company (e.g. Mcdonalds Limited or MacDonald's).

2023-01-25 19:28:17,116 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Enter the full name of the company (e.g. Mcdonalds Limited or MacDonald's).
2023-01-25 19:28:17,116 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:17,116 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Enter the date in DD/MM/YYYY format.

2023-01-25 19:28:17,117 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Enter the date in DD/MM/YYYY format.
2023-01-25 19:28:17,117 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:17,118 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Enter the full address in DD/MM/YYYY format (e.g. 21/03/2017 23, New Street, London, United Kingdom).

2023-01-25 19:28:17,118 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Enter the full address in DD/MM/YYYY format (e.g. 21/03/2017 23, New Street, London, United Kingdom).
2023-01-25 19:28:17,118 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:17,119 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Enter the total amount paid in EUR or EURO.
2023-01-25 19:28:17,120 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Enter the total amount paid in EUR or EURO.
2023-01-25 19:28:17,120 - __main__ - INFO - 96 - <module>() - Final prediction for document 14: {'company': "Enter the full name of the company (e.g. Mcdonalds Limited or MacDonald's).", 'date': 'Enter the date in DD/MM/YYYY format.', 'address': 'Enter the full address in DD/MM/YYYY format (e.g. 21/03/2017 23, New Street, London, United Kingdom).', 'total': 'Enter the total amount paid in EUR or EURO.'}
2023-01-25 19:28:17,134 - __main__ - INFO - 92 - <module>() - Predicting document 15...
2023-01-25 19:28:20,891 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  S/B
Date of Receipt: 16/07/2016
Address of Company: P.T. 2811, Jalan Angsa, Taman Berkeley, Klang, Selangor, Malaysia
Total: RM1,946.60
2023-01-25 19:28:20,892 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:20,892 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:20,893 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S/B

2023-01-25 19:28:20,893 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S/B
2023-01-25 19:28:20,894 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:20,894 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  16/07/2016

2023-01-25 19:28:20,895 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 16/07/2016
2023-01-25 19:28:20,895 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:20,896 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  P.T. 2811, Jalan Angsa, Taman Berkeley, Klang, Selangor, Malaysia

2023-01-25 19:28:20,897 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: P.T. 2811, Jalan Angsa, Taman Berkeley, Klang, Selangor, Malaysia
2023-01-25 19:28:20,897 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:20,898 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM1,946.60
2023-01-25 19:28:20,898 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM1,946.60
2023-01-25 19:28:20,899 - __main__ - INFO - 96 - <module>() - Final prediction for document 15: {'company': 'S/B', 'date': '16/07/2016', 'address': 'P.T. 2811, Jalan Angsa, Taman Berkeley, Klang, Selangor, Malaysia', 'total': 'RM1,946.60'}
2023-01-25 19:28:20,903 - __main__ - INFO - 92 - <module>() - Predicting document 16...
2023-01-25 19:28:27,985 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: (mm/dd/yyyy)
Address of Company:
Total: <|stop key|>

A:

Using some regular expressions here you go:
import re
from string import maketrans

def add_space(text):
    return text.replace(r'\b(stop)\b', ' {} ').strip()

def clean_up(text):
    text = re.sub('\d{2} [^\w]*\d{2} [^\w]*\d{2}', add_space, text)
2023-01-25 19:28:27,988 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:27,988 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:27,989 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:27,989 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:27,990 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:27,990 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (mm/dd/yyyy)

2023-01-25 19:28:27,991 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (mm/dd/yyyy)
2023-01-25 19:28:27,992 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:27,993 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:27,993 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:27,993 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:27,994 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

A:

Using some regular expressions here you go:
import re
from string import maketrans

def add_space(text):
    return text.replace(r'\b(stop)\b', ' {} ').strip()

def clean_up(text):
    text = re.sub('\d{2} [^\w]*\d{2} [^\w]*\d{2}', add_space, text)
2023-01-25 19:28:27,994 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> A: Using some regular expressions here you go: import re from string import maketrans def add_space(text):   return text.replace(r'\b(stop)\b', ' {} ').strip() def clean_up(text):   text = re.sub('\d{2} [^\w]*\d{2} [^\w]*\d{2}', add_space, text)
2023-01-25 19:28:27,994 - __main__ - INFO - 96 - <module>() - Final prediction for document 16: {'date': '(mm/dd/yyyy)', 'total': "<|stop key|> A: Using some regular expressions here you go: import re from string import maketrans def add_space(text):   return text.replace(r'\\b(stop)\\b', ' {} ').strip() def clean_up(text):   text = re.sub('\\d{2} [^\\w]*\\d{2} [^\\w]*\\d{2}', add_space, text)"}
2023-01-25 19:28:27,998 - __main__ - INFO - 92 - <module>() - Predicting document 17...
2023-01-25 19:28:32,822 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Pavel Company
Date of Receipt: 30 September 2018
Address of Company: Kuala Lumpur
Total: 5050.00
Key: <|>

Key: Value
Company Name: Pavel Company
Date of Receipt: 30 September 2018
Address of Company: Kuala Lumpur
Total: 5050.00
Key: >|stop key|>

2023-01-25 19:28:32,823 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:32,824 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:32,824 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Pavel Company

2023-01-25 19:28:32,824 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Pavel Company
2023-01-25 19:28:32,825 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:32,825 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30 September 2018

2023-01-25 19:28:32,825 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30 September 2018
2023-01-25 19:28:32,826 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:32,826 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kuala Lumpur

2023-01-25 19:28:32,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur
2023-01-25 19:28:32,827 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:32,828 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5050.00
Key: <|>

Key: Value
Company Name: Pavel Company
Date of Receipt: 30 September 2018
Address of Company: Kuala Lumpur

2023-01-25 19:28:32,828 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5050.00 Key: <|> Key: Value Company Name: Pavel Company Date of Receipt: 30 September 2018 Address of Company: Kuala Lumpur
2023-01-25 19:28:32,829 - __main__ - INFO - 96 - <module>() - Final prediction for document 17: {'company': 'Pavel Company', 'date': '30 September 2018', 'address': 'Kuala Lumpur', 'total': '5050.00 Key: <|> Key: Value Company Name: Pavel Company Date of Receipt: 30 September 2018 Address of Company: Kuala Lumpur'}
2023-01-25 19:28:32,831 - __main__ - INFO - 92 - <module>() - Predicting document 18...
2023-01-25 19:28:40,160 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <|stop key|>
Date of Receipt: <|stop key|>
Address of Company: <|stop key|>
Total: <|stop key|>

Write the above data in a table that contains the following columns:

In Excel, we can use VLOOKUP function to return result.

1. Select the cell that has the "Date of Receipt"

2. Use the =VLOOKUP() function to get the right column value and return the result.

=VLOOKUP(Date of Receipt, "Company Name"!A:B
2023-01-25 19:28:40,161 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:40,161 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:40,162 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:28:40,162 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:28:40,163 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:40,163 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:28:40,163 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:28:40,164 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:40,164 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:28:40,164 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:28:40,165 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:40,165 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Write the above data in a table that contains the following columns:

In Excel, we can use VLOOKUP function to return result.

1. Select the cell that has the "Date of Receipt"

2. Use the =VLOOKUP() function to get the right column value and return the result.

=VLOOKUP(Date of Receipt, "Company Name"!A:B
2023-01-25 19:28:40,165 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Write the above data in a table that contains the following columns: In Excel, we can use VLOOKUP function to return result. 1. Select the cell that has the "Date of Receipt" 2. Use the =VLOOKUP() function to get the right column value and return the result. =VLOOKUP(Date of Receipt, "Company Name"!A:B
2023-01-25 19:28:40,166 - __main__ - INFO - 96 - <module>() - Final prediction for document 18: {'company': '<|stop key|>', 'date': '<|stop key|>', 'address': '<|stop key|>', 'total': '<|stop key|> Write the above data in a table that contains the following columns: In Excel, we can use VLOOKUP function to return result. 1. Select the cell that has the "Date of Receipt" 2. Use the =VLOOKUP() function to get the right column value and return the result. =VLOOKUP(Date of Receipt, "Company Name"!A:B'}
2023-01-25 19:28:40,168 - __main__ - INFO - 92 - <module>() - Predicting document 19...
2023-01-25 19:28:47,626 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date of Receipt: 12.31.14
Address of Company: NULL
Total:

A:

This code should do it:
$in = file_get_contents("sample.txt");
$matches = array();
$pattern = "/(\d{13,14}) - (\d{4,6}) (\d{5,}) (\d{5,}) (\d{2,}) (.*) - (.*) - (.*)/";
preg_match_all($pattern, $in, $matches);
$data = array();
foreach
2023-01-25 19:28:47,627 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:47,628 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:47,629 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME

2023-01-25 19:28:47,629 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME
2023-01-25 19:28:47,630 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:47,631 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12.31.14

2023-01-25 19:28:47,632 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12.31.14
2023-01-25 19:28:47,632 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:47,633 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NULL

2023-01-25 19:28:47,633 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NULL
2023-01-25 19:28:47,634 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:47,635 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

A:

This code should do it:
$in = file_get_contents("sample.txt");
$matches = array();
$pattern = "/(\d{13,14}) - (\d{4,6}) (\d{5,}) (\d{5,}) (\d{2,}) (.*) - (.*) - (.*)/";
preg_match_all($pattern, $in, $matches);
$data = array();
foreach
2023-01-25 19:28:47,635 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A: This code should do it: $in = file_get_contents("sample.txt"); $matches = array(); $pattern = "/(\d{13,14}) - (\d{4,6}) (\d{5,}) (\d{5,}) (\d{2,}) (.*) - (.*) - (.*)/"; preg_match_all($pattern, $in, $matches); $data = array(); foreach
2023-01-25 19:28:47,636 - __main__ - INFO - 96 - <module>() - Final prediction for document 19: {'company': 'COMPANY NAME', 'date': '12.31.14', 'total': 'A: This code should do it: $in = file_get_contents("sample.txt"); $matches = array(); $pattern = "/(\\d{13,14}) - (\\d{4,6}) (\\d{5,}) (\\d{5,}) (\\d{2,}) (.*) - (.*) - (.*)/"; preg_match_all($pattern, $in, $matches); $data = array(); foreach'}
2023-01-25 19:28:47,639 - __main__ - INFO - 92 - <module>() - Predicting document 20...
2023-01-25 19:28:50,514 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  K.A.M.S. Enterprise SDN BHD
Date of Receipt: 04/01/2018
Address of Company: Satu Kampung Enterprise SDN Bhd
Total: 59.43
2023-01-25 19:28:50,515 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:50,515 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:50,516 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  K.A.M.S. Enterprise SDN BHD

2023-01-25 19:28:50,516 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: K.A.M.S. Enterprise SDN BHD
2023-01-25 19:28:50,516 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:50,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  04/01/2018

2023-01-25 19:28:50,517 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 04/01/2018
2023-01-25 19:28:50,518 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:50,519 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Satu Kampung Enterprise SDN Bhd

2023-01-25 19:28:50,519 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Satu Kampung Enterprise SDN Bhd
2023-01-25 19:28:50,520 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:50,521 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  59.43
2023-01-25 19:28:50,521 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 59.43
2023-01-25 19:28:50,522 - __main__ - INFO - 96 - <module>() - Final prediction for document 20: {'company': 'K.A.M.S. Enterprise SDN BHD', 'date': '04/01/2018', 'address': 'Satu Kampung Enterprise SDN Bhd', 'total': '59.43'}
2023-01-25 19:28:50,525 - __main__ - INFO - 92 - <module>() - Predicting document 21...
2023-01-25 19:28:58,704 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "ABC Industries"
Date of Receipt: "21st Oct 2016"
Address of Company: "11 Jalan Pembelututan, Taman Serkam, Semerbak, Puchong, Kuala Lumpur, 530072, Malaysia"
Total: "2,899.75"

The first number is the year, the second is the month and the last number is the day.
If any of them are missing you should set to "null".

Key: Value
Company Name: "ABC Industries"
Date of Receipt: "21
2023-01-25 19:28:58,706 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:58,707 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:58,708 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "ABC Industries"

2023-01-25 19:28:58,708 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Industries
2023-01-25 19:28:58,708 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:58,708 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "21st Oct 2016"

2023-01-25 19:28:58,709 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21st Oct 2016
2023-01-25 19:28:58,709 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:58,709 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "11 Jalan Pembelututan, Taman Serkam, Semerbak, Puchong, Kuala Lumpur, 530072, Malaysia"

2023-01-25 19:28:58,709 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11 Jalan Pembelututan, Taman Serkam, Semerbak, Puchong, Kuala Lumpur, 530072, Malaysia
2023-01-25 19:28:58,709 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:58,710 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2,899.75"

The first number is the year, the second is the month and the last number is the day.
If any of them are missing you should set to "null".

Key: Value
Company Name: "ABC Industries"
Date of Receipt: "21
2023-01-25 19:28:58,710 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "2,899.75" The first number is the year, the second is the month and the last number is the day. If any of them are missing you should set to "null". Key: Value Company Name: "ABC Industries" Date of Receipt: "21
2023-01-25 19:28:58,710 - __main__ - INFO - 96 - <module>() - Final prediction for document 21: {'company': 'ABC Industries', 'date': '21st Oct 2016', 'address': '11 Jalan Pembelututan, Taman Serkam, Semerbak, Puchong, Kuala Lumpur, 530072, Malaysia', 'total': '"2,899.75" The first number is the year, the second is the month and the last number is the day. If any of them are missing you should set to "null". Key: Value Company Name: "ABC Industries" Date of Receipt: "21'}
2023-01-25 19:28:58,715 - __main__ - INFO - 92 - <module>() - Predicting document 22...
2023-01-25 19:29:01,832 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  GERBANG ALAF RESTAURANTS SDN BHD
Date of Receipt: 30/04/2017
Address of Company:
Total: 52.85
2023-01-25 19:29:01,833 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:01,833 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:01,834 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GERBANG ALAF RESTAURANTS SDN BHD

2023-01-25 19:29:01,834 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GERBANG ALAF RESTAURANTS SDN BHD
2023-01-25 19:29:01,834 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:01,835 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30/04/2017

2023-01-25 19:29:01,835 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30/04/2017
2023-01-25 19:29:01,835 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:01,835 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:01,836 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:01,836 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:01,836 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  52.85
2023-01-25 19:29:01,836 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 52.85
2023-01-25 19:29:01,837 - __main__ - INFO - 96 - <module>() - Final prediction for document 22: {'company': 'GERBANG ALAF RESTAURANTS SDN BHD', 'date': '30/04/2017', 'total': '52.85'}
2023-01-25 19:29:01,838 - __main__ - INFO - 92 - <module>() - Predicting document 23...
2023-01-25 19:29:03,934 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: null
Address of Company: null
Total: null
|
2023-01-25 19:29:03,936 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:03,936 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:03,937 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:29:03,938 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:29:03,939 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:03,939 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:29:03,940 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:29:03,940 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:03,941 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:29:03,942 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:29:03,942 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:03,942 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null
|
2023-01-25 19:29:03,943 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null |
2023-01-25 19:29:03,943 - __main__ - INFO - 96 - <module>() - Final prediction for document 23: {}
2023-01-25 19:29:03,946 - __main__ - INFO - 92 - <module>() - Predicting document 24...
2023-01-25 19:29:10,963 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <value>
Date of Receipt: <value>
Address of Company: <value>
Total: <value>
<value>
<value>

Click Save to store the extracted data.

Click Submit for submitting the tax invoice, VAT adjustment note, and GST invoice.

To upload a new document set:
Click on Select to select the document set to upload.
Click the Upload icon beside the Upload tab.

To upload an existing file
Click on Select to select the file to upload.
Click the Upload icon beside the Upload tab.
Click
2023-01-25 19:29:10,966 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:10,967 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:10,968 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <value>

2023-01-25 19:29:10,968 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <value>
2023-01-25 19:29:10,969 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:10,970 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <value>

2023-01-25 19:29:10,971 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <value>
2023-01-25 19:29:10,971 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:10,972 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <value>

2023-01-25 19:29:10,972 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <value>
2023-01-25 19:29:10,973 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:10,973 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <value>
<value>
<value>

Click Save to store the extracted data.

Click Submit for submitting the tax invoice, VAT adjustment note, and GST invoice.

To upload a new document set:
Click on Select to select the document set to upload.
Click the Upload icon beside the Upload tab.

To upload an existing file
Click on Select to select the file to upload.
Click the Upload icon beside the Upload tab.
Click
2023-01-25 19:29:10,974 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <value> <value> <value> Click Save to store the extracted data. Click Submit for submitting the tax invoice, VAT adjustment note, and GST invoice. To upload a new document set: Click on Select to select the document set to upload. Click the Upload icon beside the Upload tab. To upload an existing file Click on Select to select the file to upload. Click the Upload icon beside the Upload tab. Click
2023-01-25 19:29:10,974 - __main__ - INFO - 96 - <module>() - Final prediction for document 24: {'company': '<value>', 'date': '<value>', 'address': '<value>', 'total': '<value> <value> <value> Click Save to store the extracted data. Click Submit for submitting the tax invoice, VAT adjustment note, and GST invoice. To upload a new document set: Click on Select to select the document set to upload. Click the Upload icon beside the Upload tab. To upload an existing file Click on Select to select the file to upload. Click the Upload icon beside the Upload tab. Click'}
2023-01-25 19:29:10,978 - __main__ - INFO - 92 - <module>() - Predicting document 25...
2023-01-25 19:29:18,049 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <company name>
Date of Receipt: <date of receipt>
Address of Company: <address>
Total: <total>

<stop key>

Example:

{
  "Company Name": "Nike",
  "Date of Receipt": "2 May 2018",
  "Address of Company": "Bangkok, Thailand",
  "Total": "13.89"
}

You are only allowed to enter 5 keys in your response. Each key should have a corresponding value.
You can assume that the given document is in UTF-8 encoding.
2023-01-25 19:29:18,051 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:18,051 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:18,053 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <company name>

2023-01-25 19:29:18,053 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <company name>
2023-01-25 19:29:18,054 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:18,054 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <date of receipt>

2023-01-25 19:29:18,055 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <date of receipt>
2023-01-25 19:29:18,056 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:18,056 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <address>

2023-01-25 19:29:18,057 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <address>
2023-01-25 19:29:18,058 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:18,058 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <total>

<stop key>

Example:

{
  "Company Name": "Nike",
  "Date of Receipt": "2 May 2018",
  "Address of Company": "Bangkok, Thailand",
  "Total": "13.89"
}

You are only allowed to enter 5 keys in your response. Each key should have a corresponding value.
You can assume that the given document is in UTF-8 encoding.
2023-01-25 19:29:18,059 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <total> <stop key> Example: {  "Company Name": "Nike",  "Date of Receipt": "2 May 2018",  "Address of Company": "Bangkok, Thailand",  "Total": "13.89" } You are only allowed to enter 5 keys in your response. Each key should have a corresponding value. You can assume that the given document is in UTF-8 encoding.
2023-01-25 19:29:18,059 - __main__ - INFO - 96 - <module>() - Final prediction for document 25: {'company': '<company name>', 'date': '<date of receipt>', 'address': '<address>', 'total': '<total> <stop key> Example: {  "Company Name": "Nike",  "Date of Receipt": "2 May 2018",  "Address of Company": "Bangkok, Thailand",  "Total": "13.89" } You are only allowed to enter 5 keys in your response. Each key should have a corresponding value. You can assume that the given document is in UTF-8 encoding.'}
2023-01-25 19:29:18,062 - __main__ - INFO - 92 - <module>() - Predicting document 26...
2023-01-25 19:29:25,008 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  B-Stock
Date of Receipt: 23/03/2017
Address of Company: Jalan Kuching
Total: 30.00
<|>

Extract "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "
2023-01-25 19:29:25,009 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:25,010 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:25,011 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  B-Stock

2023-01-25 19:29:25,012 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: B-Stock
2023-01-25 19:29:25,013 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:25,013 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23/03/2017

2023-01-25 19:29:25,014 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23/03/2017
2023-01-25 19:29:25,015 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:25,015 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Kuching

2023-01-25 19:29:25,016 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Kuching
2023-01-25 19:29:25,017 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:25,018 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30.00
<|>

Extract "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "
2023-01-25 19:29:25,019 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30.00 <|> Extract "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "
2023-01-25 19:29:25,022 - __main__ - INFO - 96 - <module>() - Final prediction for document 26: {'company': 'B-Stock', 'date': '23/03/2017', 'address': 'Jalan Kuching', 'total': '30.00 <|> Extract "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "'}
2023-01-25 19:29:25,027 - __main__ - INFO - 92 - <module>() - Predicting document 27...
2023-01-25 19:29:32,735 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Tata Coffee (Iced Coffee) and Tea Leaf (M) SDN. BHD.
Date of Receipt: 18 December 2017
Address of Company: 9A, Jalan Kampung Keriam, Taman Tasik Jaya, Jalan Tekah, 58000 Kuala Lumpur
Total: 38.70
TATA COFFEE & TEA LEAF COMPANY.
Tata Coffee and Tea Leaf SDN. BHD.
4th Floor, No. 1, Pusat Perindustrian Shah Alam, Jalan Klang Lama, Taman Seri Shah
2023-01-25 19:29:32,737 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:32,738 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:32,739 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Tata Coffee (Iced Coffee) and Tea Leaf (M) SDN. BHD.

2023-01-25 19:29:32,739 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tata Coffee (Iced Coffee) and Tea Leaf (M) SDN. BHD.
2023-01-25 19:29:32,740 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:32,741 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18 December 2017

2023-01-25 19:29:32,741 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18 December 2017
2023-01-25 19:29:32,742 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:32,742 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9A, Jalan Kampung Keriam, Taman Tasik Jaya, Jalan Tekah, 58000 Kuala Lumpur

2023-01-25 19:29:32,743 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9A, Jalan Kampung Keriam, Taman Tasik Jaya, Jalan Tekah, 58000 Kuala Lumpur
2023-01-25 19:29:32,743 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:32,744 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  38.70
TATA COFFEE & TEA LEAF COMPANY.
Tata Coffee and Tea Leaf SDN. BHD.
4th Floor, No. 1, Pusat Perindustrian Shah Alam, Jalan Klang Lama, Taman Seri Shah
2023-01-25 19:29:32,744 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 38.70 TATA COFFEE & TEA LEAF COMPANY. Tata Coffee and Tea Leaf SDN. BHD. 4th Floor, No. 1, Pusat Perindustrian Shah Alam, Jalan Klang Lama, Taman Seri Shah
2023-01-25 19:29:32,745 - __main__ - INFO - 96 - <module>() - Final prediction for document 27: {'company': 'Tata Coffee (Iced Coffee) and Tea Leaf (M) SDN. BHD.', 'date': '18 December 2017', 'address': '9A, Jalan Kampung Keriam, Taman Tasik Jaya, Jalan Tekah, 58000 Kuala Lumpur', 'total': '38.70 TATA COFFEE & TEA LEAF COMPANY. Tata Coffee and Tea Leaf SDN. BHD. 4th Floor, No. 1, Pusat Perindustrian Shah Alam, Jalan Klang Lama, Taman Seri Shah'}
2023-01-25 19:29:32,748 - __main__ - INFO - 92 - <module>() - Predicting document 28...
2023-01-25 19:29:39,794 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ST MARTIN’S
Date of Receipt: 01/21/2018
Address of Company: 5, Jalan Jelita,
Jalan Temu, Taman Temu Jaya,
Jalan Sungai Way, Taman Sungai Way,
Perai Sg. Balak, Batu Berendam,
Kedah, Malaysia
Total: 3,700.00

Question 4:
Read the list above. Find the "Amount (RM)" column and highlight the amount for (i) item 3 (YAMBUBE (SEMI) MOTOR O
2023-01-25 19:29:39,795 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:39,795 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:39,797 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ST MARTIN’S

2023-01-25 19:29:39,798 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ST MARTIN’S
2023-01-25 19:29:39,799 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:39,800 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/21/2018

2023-01-25 19:29:39,801 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/21/2018
2023-01-25 19:29:39,801 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:39,803 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5, Jalan Jelita,
Jalan Temu, Taman Temu Jaya,
Jalan Sungai Way, Taman Sungai Way,
Perai Sg. Balak, Batu Berendam,
Kedah, Malaysia

2023-01-25 19:29:39,803 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5, Jalan Jelita, Jalan Temu, Taman Temu Jaya, Jalan Sungai Way, Taman Sungai Way, Perai Sg. Balak, Batu Berendam, Kedah, Malaysia
2023-01-25 19:29:39,803 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:39,804 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3,700.00

Question 4:
Read the list above. Find the "Amount (RM)" column and highlight the amount for (i) item 3 (YAMBUBE (SEMI) MOTOR O
2023-01-25 19:29:39,804 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3,700.00 Question 4: Read the list above. Find the "Amount (RM)" column and highlight the amount for (i) item 3 (YAMBUBE (SEMI) MOTOR O
2023-01-25 19:29:39,806 - __main__ - INFO - 96 - <module>() - Final prediction for document 28: {'company': 'ST MARTIN’S', 'date': '01/21/2018', 'address': '5, Jalan Jelita, Jalan Temu, Taman Temu Jaya, Jalan Sungai Way, Taman Sungai Way, Perai Sg. Balak, Batu Berendam, Kedah, Malaysia', 'total': '3,700.00 Question 4: Read the list above. Find the "Amount (RM)" column and highlight the amount for (i) item 3 (YAMBUBE (SEMI) MOTOR O'}
2023-01-25 19:29:39,809 - __main__ - INFO - 92 - <module>() - Predicting document 29...
2023-01-25 19:29:41,653 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company
Date of Receipt: Date
Address of Company: Address
Total: Total
2023-01-25 19:29:41,655 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:41,656 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:41,656 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company

2023-01-25 19:29:41,657 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company
2023-01-25 19:29:41,657 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:41,658 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date

2023-01-25 19:29:41,659 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date
2023-01-25 19:29:41,659 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:41,660 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address

2023-01-25 19:29:41,660 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address
2023-01-25 19:29:41,661 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:41,661 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:29:41,662 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:29:41,662 - __main__ - INFO - 96 - <module>() - Final prediction for document 29: {'company': 'Company', 'date': 'Date', 'address': 'Address', 'total': 'Total'}
2023-01-25 19:29:41,666 - __main__ - INFO - 92 - <module>() - Predicting document 30...
2023-01-25 19:29:48,686 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Hu Trades SDN BHD
Date of Receipt: 13/01/2018 11:36:00PM
Address of Company: 43300, SERI KEMBANGAN, SELANGOR, 3-89442249
Total: 37.98

The following fields are the input data. If the data doesn't fit, please re-format.

First Name:
Last Name:
Email:

Date:

Address of Company:

First Name:
Last Name:
Email:

Address of Company:

First Name:
Last Name:
2023-01-25 19:29:48,691 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:48,692 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:48,694 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Hu Trades SDN BHD

2023-01-25 19:29:48,694 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Hu Trades SDN BHD
2023-01-25 19:29:48,695 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:48,696 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13/01/2018 11:36:00PM

2023-01-25 19:29:48,697 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13/01/2018 11:36:00PM
2023-01-25 19:29:48,697 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:48,703 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  43300, SERI KEMBANGAN, SELANGOR, 3-89442249

2023-01-25 19:29:48,703 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 43300, SERI KEMBANGAN, SELANGOR, 3-89442249
2023-01-25 19:29:48,704 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:48,704 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  37.98

The following fields are the input data. If the data doesn't fit, please re-format.

First Name:
Last Name:
Email:

Date:

Address of Company:

First Name:
Last Name:
Email:

Address of Company:

First Name:
Last Name:
2023-01-25 19:29:48,705 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 37.98 The following fields are the input data. If the data doesn't fit, please re-format. First Name: Last Name: Email: Date: Address of Company: First Name: Last Name: Email: Address of Company: First Name: Last Name:
2023-01-25 19:29:48,705 - __main__ - INFO - 96 - <module>() - Final prediction for document 30: {'company': 'Hu Trades SDN BHD', 'date': '13/01/2018 11:36:00PM', 'address': '43300, SERI KEMBANGAN, SELANGOR, 3-89442249', 'total': "37.98 The following fields are the input data. If the data doesn't fit, please re-format. First Name: Last Name: Email: Date: Address of Company: First Name: Last Name: Email: Address of Company: First Name: Last Name:"}
2023-01-25 19:29:48,719 - __main__ - INFO - 92 - <module>() - Predicting document 31...
2023-01-25 19:29:56,397 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Wawa
Date Receipt: 20/11/2017
Address: Kuala Lumpur, 520043
Total: RM278.80

Now the problem I am facing is that, in the above output there are lots of duplicates which I want to remove. Can anyone help me?

A:

I think this regex would help you.
(\b[A-Z]+\b)(.*?)(<|stop key|>)

See demo.
https://regex101.com/r/iW0pQ6/9
You can remove all the extra spaces
2023-01-25 19:29:56,400 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:56,401 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:56,401 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Wawa
Date Receipt: 20/11/2017
Address: Kuala Lumpur, 520043

2023-01-25 19:29:56,402 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Wawa Date Receipt: 20/11/2017 Address: Kuala Lumpur, 520043
2023-01-25 19:29:56,402 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:56,402 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:56,402 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:56,403 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM278.80

Now the problem I am facing is that, in the above output there are lots of duplicates which I want to remove. Can anyone help me?

A:

I think this regex would help you.
(\b[A-Z]+\b)(.*?)(<|stop key|>)

See demo.
https://regex101.com/r/iW0pQ6/9
You can remove all the extra spaces
2023-01-25 19:29:56,403 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM278.80 Now the problem I am facing is that, in the above output there are lots of duplicates which I want to remove. Can anyone help me? A: I think this regex would help you. (\b[A-Z]+\b)(.*?)(<|stop key|>) See demo. https://regex101.com/r/iW0pQ6/9 You can remove all the extra spaces
2023-01-25 19:29:56,404 - __main__ - INFO - 96 - <module>() - Final prediction for document 31: {'company': 'Wawa Date Receipt: 20/11/2017 Address: Kuala Lumpur, 520043', 'total': 'RM278.80 Now the problem I am facing is that, in the above output there are lots of duplicates which I want to remove. Can anyone help me? A: I think this regex would help you. (\\b[A-Z]+\\b)(.*?)(<|stop key|>) See demo. https://regex101.com/r/iW0pQ6/9 You can remove all the extra spaces'}
2023-01-25 19:29:56,409 - __main__ - INFO - 92 - <module>() - Predicting document 32...
2023-01-25 19:30:02,615 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KEDAI PAPAN YEW CHUAN
Date of Receipt: 21/03/2018
Address of Company: JALAN BANTING 43800 DENGKIL SELANGOR
Total: 18.02

A : Total Sales for the date you inputted are less than 18.02. If you are sure the data you provided is correct, you can use the "Total Sales in Words" function below to see the details of each item.
2023-01-25 19:30:02,618 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:02,618 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:02,619 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KEDAI PAPAN YEW CHUAN

2023-01-25 19:30:02,620 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KEDAI PAPAN YEW CHUAN
2023-01-25 19:30:02,621 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:02,622 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/03/2018

2023-01-25 19:30:02,623 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/03/2018
2023-01-25 19:30:02,623 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:02,624 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN BANTING 43800 DENGKIL SELANGOR

2023-01-25 19:30:02,624 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN BANTING 43800 DENGKIL SELANGOR
2023-01-25 19:30:02,625 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:02,625 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18.02

A : Total Sales for the date you inputted are less than 18.02. If you are sure the data you provided is correct, you can use the "Total Sales in Words" function below to see the details of each item.
2023-01-25 19:30:02,625 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18.02 A : Total Sales for the date you inputted are less than 18.02. If you are sure the data you provided is correct, you can use the "Total Sales in Words" function below to see the details of each item.
2023-01-25 19:30:02,626 - __main__ - INFO - 96 - <module>() - Final prediction for document 32: {'company': 'KEDAI PAPAN YEW CHUAN', 'date': '21/03/2018', 'address': 'JALAN BANTING 43800 DENGKIL SELANGOR', 'total': '18.02 A : Total Sales for the date you inputted are less than 18.02. If you are sure the data you provided is correct, you can use the "Total Sales in Words" function below to see the details of each item.'}
2023-01-25 19:30:02,630 - __main__ - INFO - 92 - <module>() - Predicting document 33...
2023-01-25 19:30:09,964 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Tax Code:
Registration Number:
Place of Incorporation:
Date of Incorporation:
Address of Company:

If you have been given a document with these key-value pairs you must be able to split the company name, tax code, registration number and place of incorporation using a regular expression. Once you have done this you will be able to identify the "Company Name" by extracting the first set of characters from the string of the document.

Step 3: Parse the document set to extract the "Address of Company" value

The document set contains the following key-value pairs:

2023-01-25 19:30:09,968 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:09,969 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:09,970 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Tax Code:
Registration Number:
Place of Incorporation:
Date of Incorporation:

2023-01-25 19:30:09,970 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tax Code: Registration Number: Place of Incorporation: Date of Incorporation:
2023-01-25 19:30:09,971 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:09,971 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:09,972 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

If you have been given a document with these key-value pairs you must be able to split the company name, tax code, registration number and place of incorporation using a regular expression. Once you have done this you will be able to identify the "Company Name" by extracting the first set of characters from the string of the document.

Step 3: Parse the document set to extract the "Address of Company" value

The document set contains the following key-value pairs:

2023-01-25 19:30:09,972 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: If you have been given a document with these key-value pairs you must be able to split the company name, tax code, registration number and place of incorporation using a regular expression. Once you have done this you will be able to identify the "Company Name" by extracting the first set of characters from the string of the document. Step 3: Parse the document set to extract the "Address of Company" value The document set contains the following key-value pairs:
2023-01-25 19:30:09,973 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:09,973 - __main__ - INFO - 96 - <module>() - Final prediction for document 33: {'company': 'Tax Code: Registration Number: Place of Incorporation: Date of Incorporation:', 'address': 'If you have been given a document with these key-value pairs you must be able to split the company name, tax code, registration number and place of incorporation using a regular expression. Once you have done this you will be able to identify the "Company Name" by extracting the first set of characters from the string of the document. Step 3: Parse the document set to extract the "Address of Company" value The document set contains the following key-value pairs:'}
2023-01-25 19:30:09,978 - __main__ - INFO - 92 - <module>() - Predicting document 34...
2023-01-25 19:30:16,921 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Probmk Inc.
Date of Receipt: 18/09/2017
Address of Company: No.1 Jalan Bandar Baharu, 47000 Bandar Baru, Puchong, Selangor.
Total: 1.47
Please enter these details using the form below.
Company Name: Probmk Inc.
Date of Receipt: 18/09/2017
Address of Company: No.1 Jalan Bandar Baharu, 47000 Bandar Baru, Puchong, Selangor.
Total: 1.47
Your name
1
Your email
2
2023-01-25 19:30:16,922 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:16,922 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:16,922 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Probmk Inc.

2023-01-25 19:30:16,922 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Probmk Inc.
2023-01-25 19:30:16,922 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:16,923 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18/09/2017

2023-01-25 19:30:16,923 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18/09/2017
2023-01-25 19:30:16,923 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:16,923 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  No.1 Jalan Bandar Baharu, 47000 Bandar Baru, Puchong, Selangor.

2023-01-25 19:30:16,923 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: No.1 Jalan Bandar Baharu, 47000 Bandar Baru, Puchong, Selangor.
2023-01-25 19:30:16,923 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:16,923 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1.47
Please enter these details using the form below.
Company Name: Probmk Inc.
Date of Receipt: 18/09/2017
Address of Company: No.1 Jalan Bandar Baharu, 47000 Bandar Baru, Puchong, Selangor.

2023-01-25 19:30:16,924 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1.47 Please enter these details using the form below. Company Name: Probmk Inc. Date of Receipt: 18/09/2017 Address of Company: No.1 Jalan Bandar Baharu, 47000 Bandar Baru, Puchong, Selangor.
2023-01-25 19:30:16,924 - __main__ - INFO - 96 - <module>() - Final prediction for document 34: {'company': 'Probmk Inc.', 'date': '18/09/2017', 'address': 'No.1 Jalan Bandar Baharu, 47000 Bandar Baru, Puchong, Selangor.', 'total': '1.47 Please enter these details using the form below. Company Name: Probmk Inc. Date of Receipt: 18/09/2017 Address of Company: No.1 Jalan Bandar Baharu, 47000 Bandar Baru, Puchong, Selangor.'}
2023-01-25 19:30:16,925 - __main__ - INFO - 92 - <module>() - Predicting document 35...
2023-01-25 19:30:23,840 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 21/05/2017
Address of Company:
Total: 4,739.33

Now click on “Process” and it will return the total amount as well as the GST amount.

To get the GST amounts in the first table you can use the following SQL query:

Sub-total : 4,739.33

GST amount: 1,945.22

Note: These are my inputs and outputs, but your outputs might be slightly different than what is shown above.

So let's look at another document in our “input.
2023-01-25 19:30:23,841 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:23,841 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:23,842 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:30:23,842 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:30:23,842 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:23,842 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/05/2017

2023-01-25 19:30:23,842 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/05/2017
2023-01-25 19:30:23,843 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:23,843 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:30:23,843 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:30:23,843 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:23,843 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4,739.33

Now click on “Process” and it will return the total amount as well as the GST amount.

To get the GST amounts in the first table you can use the following SQL query:

Sub-total : 4,739.33

GST amount: 1,945.22

Note: These are my inputs and outputs, but your outputs might be slightly different than what is shown above.

So let's look at another document in our “input.
2023-01-25 19:30:23,844 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4,739.33 Now click on “Process” and it will return the total amount as well as the GST amount. To get the GST amounts in the first table you can use the following SQL query: Sub-total : 4,739.33 GST amount: 1,945.22 Note: These are my inputs and outputs, but your outputs might be slightly different than what is shown above. So let's look at another document in our “input.
2023-01-25 19:30:23,844 - __main__ - INFO - 96 - <module>() - Final prediction for document 35: {'date': '21/05/2017', 'total': "4,739.33 Now click on “Process” and it will return the total amount as well as the GST amount. To get the GST amounts in the first table you can use the following SQL query: Sub-total : 4,739.33 GST amount: 1,945.22 Note: These are my inputs and outputs, but your outputs might be slightly different than what is shown above. So let's look at another document in our “input."}
2023-01-25 19:30:23,846 - __main__ - INFO - 92 - <module>() - Predicting document 36...
2023-01-25 19:30:31,317 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  1
Date of Receipt: 01/07/2016
Address of Company: 5/9 E
Total: 0
Date of Receipt: 01/07/2016
Address of Company: 3
Total: 0
Date of Receipt: 01/07/2016
Address of Company: 5
Total: 2

A:

You could do something like this, where you match everything that doesn't have a digit on either side and then use match again to get the amount.
private static String[] getData() {
    List<String> data = new ArrayList<>();
    String s =
2023-01-25 19:30:31,317 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:31,318 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:31,318 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1

2023-01-25 19:30:31,318 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1
2023-01-25 19:30:31,318 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:31,318 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/07/2016

2023-01-25 19:30:31,318 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/07/2016
2023-01-25 19:30:31,318 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:31,319 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5/9 E

2023-01-25 19:30:31,319 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5/9 E
2023-01-25 19:30:31,319 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:31,319 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0
Date of Receipt: 01/07/2016
Address of Company: 3

2023-01-25 19:30:31,319 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0 Date of Receipt: 01/07/2016 Address of Company: 3
2023-01-25 19:30:31,319 - __main__ - INFO - 96 - <module>() - Final prediction for document 36: {'company': '1', 'date': '01/07/2016', 'address': '5/9 E', 'total': '0 Date of Receipt: 01/07/2016 Address of Company: 3'}
2023-01-25 19:30:31,320 - __main__ - INFO - 92 - <module>() - Predicting document 37...
2023-01-25 19:30:35,693 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  PASARAYA BORONG PINTAR
Date of Receipt: 2018-04-04
Address of Company: MEDAN NIAGA TASIK DAMAI, 4, JALAN TASIK UTAMA
Total: 19.00
key: ZRL
Goods Sold are not Returabable
2023-01-25 19:30:35,694 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:35,694 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:35,695 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PASARAYA BORONG PINTAR

2023-01-25 19:30:35,695 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PASARAYA BORONG PINTAR
2023-01-25 19:30:35,695 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:35,696 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-04-04

2023-01-25 19:30:35,696 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-04-04
2023-01-25 19:30:35,697 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:35,697 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MEDAN NIAGA TASIK DAMAI, 4, JALAN TASIK UTAMA

2023-01-25 19:30:35,697 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MEDAN NIAGA TASIK DAMAI, 4, JALAN TASIK UTAMA
2023-01-25 19:30:35,697 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:35,698 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19.00
key: ZRL
Goods Sold are not Returabable
2023-01-25 19:30:35,698 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19.00 key: ZRL Goods Sold are not Returabable
2023-01-25 19:30:35,698 - __main__ - INFO - 96 - <module>() - Final prediction for document 37: {'company': 'PASARAYA BORONG PINTAR', 'date': '2018-04-04', 'address': 'MEDAN NIAGA TASIK DAMAI, 4, JALAN TASIK UTAMA', 'total': '19.00 key: ZRL Goods Sold are not Returabable'}
2023-01-25 19:30:35,701 - __main__ - INFO - 92 - <module>() - Predicting document 38...
2023-01-25 19:30:42,866 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Company Name>
Date of Receipt: <Date of Receipt>
Address of Company: <Address of Company>
Total: <Total>

Write a program to calculate the total amount of GST payable on the receipt. (The output should be in your chosen currency.)

For example, assume this receipt contains the following values:

A company named ABC International pays GST at a rate of 6%
Q1

In a certain year, a local government collects a tax at a rate of 20%
Q3
on the sale of a particular product. The customer will not be paying the
2023-01-25 19:30:42,868 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:42,868 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:42,869 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Company Name>

2023-01-25 19:30:42,869 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Company Name>
2023-01-25 19:30:42,869 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:42,870 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date of Receipt>

2023-01-25 19:30:42,870 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date of Receipt>
2023-01-25 19:30:42,870 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:42,870 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address of Company>

2023-01-25 19:30:42,871 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address of Company>
2023-01-25 19:30:42,871 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:42,871 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>

Write a program to calculate the total amount of GST payable on the receipt. (The output should be in your chosen currency.)

For example, assume this receipt contains the following values:

A company named ABC International pays GST at a rate of 6%
Q1

In a certain year, a local government collects a tax at a rate of 20%
Q3
on the sale of a particular product. The customer will not be paying the
2023-01-25 19:30:42,871 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total> Write a program to calculate the total amount of GST payable on the receipt. (The output should be in your chosen currency.) For example, assume this receipt contains the following values: A company named ABC International pays GST at a rate of 6% Q1 In a certain year, a local government collects a tax at a rate of 20% Q3 on the sale of a particular product. The customer will not be paying the
2023-01-25 19:30:42,872 - __main__ - INFO - 96 - <module>() - Final prediction for document 38: {'company': '<Company Name>', 'date': '<Date of Receipt>', 'address': '<Address of Company>', 'total': '<Total> Write a program to calculate the total amount of GST payable on the receipt. (The output should be in your chosen currency.) For example, assume this receipt contains the following values: A company named ABC International pays GST at a rate of 6% Q1 In a certain year, a local government collects a tax at a rate of 20% Q3 on the sale of a particular product. The customer will not be paying the'}
2023-01-25 19:30:42,874 - __main__ - INFO - 92 - <module>() - Predicting document 39...
2023-01-25 19:30:50,537 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (This is also found in the "Company Name" field in the document)
Date of Receipt: (This is also found in the "Date Receipt" field in the document)
Address of Company: (This is also found in the "Address of Company" field in the document)
Total: (This is also found in the "Total" field in the document)

Company Name (The Company Name is also found in the "Company Name" field in the document)
Date of Receipt (This is also found in the "Date Receipt" field in the document)
Address of Company (
2023-01-25 19:30:50,539 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:50,540 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:50,541 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (This is also found in the "Company Name" field in the document)

2023-01-25 19:30:50,541 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (This is also found in the "Company Name" field in the document)
2023-01-25 19:30:50,541 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:50,542 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (This is also found in the "Date Receipt" field in the document)

2023-01-25 19:30:50,542 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (This is also found in the "Date Receipt" field in the document)
2023-01-25 19:30:50,542 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:50,543 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (This is also found in the "Address of Company" field in the document)

2023-01-25 19:30:50,543 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (This is also found in the "Address of Company" field in the document)
2023-01-25 19:30:50,544 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:50,544 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (This is also found in the "Total" field in the document)

Company Name (The Company Name is also found in the "Company Name" field in the document)
Date of Receipt (This is also found in the "Date Receipt" field in the document)
Address of Company (
2023-01-25 19:30:50,545 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (This is also found in the "Total" field in the document) Company Name (The Company Name is also found in the "Company Name" field in the document) Date of Receipt (This is also found in the "Date Receipt" field in the document) Address of Company (
2023-01-25 19:30:50,545 - __main__ - INFO - 96 - <module>() - Final prediction for document 39: {'company': '(This is also found in the "Company Name" field in the document)', 'date': '(This is also found in the "Date Receipt" field in the document)', 'address': '(This is also found in the "Address of Company" field in the document)', 'total': '(This is also found in the "Total" field in the document) Company Name (The Company Name is also found in the "Company Name" field in the document) Date of Receipt (This is also found in the "Date Receipt" field in the document) Address of Company ('}
2023-01-25 19:30:50,548 - __main__ - INFO - 92 - <module>() - Predicting document 40...
2023-01-25 19:30:54,367 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  A Company
Date of Receipt: 31/12/17
Address of Company: 123-456-8909
Total: 100

Output data
Company Name: A Company
Date of Receipt: 31/12/17
Address of Company: 123-456-8909
Total: 100
2023-01-25 19:30:54,367 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:54,367 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:54,367 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A Company

2023-01-25 19:30:54,367 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A Company
2023-01-25 19:30:54,367 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:54,368 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/12/17

2023-01-25 19:30:54,368 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/12/17
2023-01-25 19:30:54,368 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:54,368 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  123-456-8909

2023-01-25 19:30:54,368 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 123-456-8909
2023-01-25 19:30:54,368 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:54,368 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  100

Output data
Company Name: A Company
Date of Receipt: 31/12/17
Address of Company: 123-456-8909

2023-01-25 19:30:54,368 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 100 Output data Company Name: A Company Date of Receipt: 31/12/17 Address of Company: 123-456-8909
2023-01-25 19:30:54,368 - __main__ - INFO - 96 - <module>() - Final prediction for document 40: {'company': 'A Company', 'date': '31/12/17', 'address': '123-456-8909', 'total': '100 Output data Company Name: A Company Date of Receipt: 31/12/17 Address of Company: 123-456-8909'}
2023-01-25 19:30:54,369 - __main__ - INFO - 92 - <module>() - Predicting document 41...
2023-01-25 19:31:01,768 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Bar Wang Rice
Date of Receipt: 10 May 2018
Address of Company: Jalan Tampoi 7/4, Kwasan Perindustrian, Tampoi, 81200, Johor Bahru, Johor
Total: $7.80

Bar Wang Rice
Ticket 2:
I will be traveling around Singapore for 5-6 days. Here is my itinerary:
Depart at 6:15 PM IST on 12-06-2018 to 12-06-2018.
12-06-2018 – Depart at 11:00 AM IST from Singapore to Kota Kin
2023-01-25 19:31:01,770 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:01,771 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:01,771 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bar Wang Rice

2023-01-25 19:31:01,771 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bar Wang Rice
2023-01-25 19:31:01,772 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:01,772 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10 May 2018

2023-01-25 19:31:01,772 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10 May 2018
2023-01-25 19:31:01,772 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:01,773 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Tampoi 7/4, Kwasan Perindustrian, Tampoi, 81200, Johor Bahru, Johor

2023-01-25 19:31:01,773 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Tampoi 7/4, Kwasan Perindustrian, Tampoi, 81200, Johor Bahru, Johor
2023-01-25 19:31:01,773 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:01,773 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $7.80

Bar Wang Rice
Ticket 2:
I will be traveling around Singapore for 5-6 days. Here is my itinerary:
Depart at 6:15 PM IST on 12-06-2018 to 12-06-2018.
12-06-2018 – Depart at 11:00 AM IST from Singapore to Kota Kin
2023-01-25 19:31:01,773 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $7.80 Bar Wang Rice Ticket 2: I will be traveling around Singapore for 5-6 days. Here is my itinerary: Depart at 6:15 PM IST on 12-06-2018 to 12-06-2018. 12-06-2018 – Depart at 11:00 AM IST from Singapore to Kota Kin
2023-01-25 19:31:01,774 - __main__ - INFO - 96 - <module>() - Final prediction for document 41: {'company': 'Bar Wang Rice', 'date': '10 May 2018', 'address': 'Jalan Tampoi 7/4, Kwasan Perindustrian, Tampoi, 81200, Johor Bahru, Johor', 'total': '$7.80 Bar Wang Rice Ticket 2: I will be traveling around Singapore for 5-6 days. Here is my itinerary: Depart at 6:15 PM IST on 12-06-2018 to 12-06-2018. 12-06-2018 – Depart at 11:00 AM IST from Singapore to Kota Kin'}
2023-01-25 19:31:01,776 - __main__ - INFO - 92 - <module>() - Predicting document 42...
2023-01-25 19:31:08,836 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name
Address of Company: Address of company
Date of Receipt: Date of receipt
Total: Total amount of goods sold

If you are unable to match the key-value pairs in the document with the key-value pairs above then create a new row and match each key-value pair with the corresponding column in the document.

Please enter the following information :

Email:
Password:

Please enter the email you registered with .

If your e-mail contains a special character or if you are unable to read the e-mail you can use the code below.

2023-01-25 19:31:08,837 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:08,837 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:08,838 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name
Address of Company: Address of company

2023-01-25 19:31:08,838 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name Address of Company: Address of company
2023-01-25 19:31:08,838 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:08,838 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of receipt
Total: Total amount of goods sold

If you are unable to match the key-value pairs in the document with the key-value pairs above then create a new row and match each key-value pair with the corresponding column in the document.

Please enter the following information :

Email:
Password:

Please enter the email you registered with .

If your e-mail contains a special character or if you are unable to read the e-mail you can use the code below.

2023-01-25 19:31:08,838 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of receipt Total: Total amount of goods sold If you are unable to match the key-value pairs in the document with the key-value pairs above then create a new row and match each key-value pair with the corresponding column in the document. Please enter the following information : Email: Password: Please enter the email you registered with . If your e-mail contains a special character or if you are unable to read the e-mail you can use the code below.
2023-01-25 19:31:08,839 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:08,839 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of company
Date of Receipt: Date of receipt

2023-01-25 19:31:08,839 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of company Date of Receipt: Date of receipt
2023-01-25 19:31:08,839 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:08,839 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total amount of goods sold

If you are unable to match the key-value pairs in the document with the key-value pairs above then create a new row and match each key-value pair with the corresponding column in the document.

Please enter the following information :

Email:
Password:

Please enter the email you registered with .

If your e-mail contains a special character or if you are unable to read the e-mail you can use the code below.

2023-01-25 19:31:08,840 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total amount of goods sold If you are unable to match the key-value pairs in the document with the key-value pairs above then create a new row and match each key-value pair with the corresponding column in the document. Please enter the following information : Email: Password: Please enter the email you registered with . If your e-mail contains a special character or if you are unable to read the e-mail you can use the code below.
2023-01-25 19:31:08,840 - __main__ - INFO - 96 - <module>() - Final prediction for document 42: {'company': 'Company name Address of Company: Address of company', 'date': 'Date of receipt Total: Total amount of goods sold If you are unable to match the key-value pairs in the document with the key-value pairs above then create a new row and match each key-value pair with the corresponding column in the document. Please enter the following information : Email: Password: Please enter the email you registered with . If your e-mail contains a special character or if you are unable to read the e-mail you can use the code below.', 'address': 'Address of company Date of Receipt: Date of receipt', 'total': 'Total amount of goods sold If you are unable to match the key-value pairs in the document with the key-value pairs above then create a new row and match each key-value pair with the corresponding column in the document. Please enter the following information : Email: Password: Please enter the email you registered with . If your e-mail contains a special character or if you are unable to read the e-mail you can use the code below.'}
2023-01-25 19:31:08,841 - __main__ - INFO - 92 - <module>() - Predicting document 43...
2023-01-25 19:31:15,575 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Sunway Velocity Mall
Date of Receipt: 12/10/2017
Address of Company: Lot 2-25, Sunway Velocity Mall, Lingkaran Sg, Sunway Velocity, 55100 Kuala Lumpur
Total: RM 36.95
This will give you an output such as:
Company Name
12/10/2017
Address of Company
Lot 2-25, Sunway Velocity Mall, Lingkaran Sg, Sunway Velocity, 55100 Kuala Lumpur
Total
RM 36.95
This question is based on this source
2023-01-25 19:31:15,575 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:15,575 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:15,575 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Sunway Velocity Mall

2023-01-25 19:31:15,575 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sunway Velocity Mall
2023-01-25 19:31:15,575 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:15,576 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12/10/2017

2023-01-25 19:31:15,576 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12/10/2017
2023-01-25 19:31:15,576 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:15,576 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Lot 2-25, Sunway Velocity Mall, Lingkaran Sg, Sunway Velocity, 55100 Kuala Lumpur

2023-01-25 19:31:15,576 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Lot 2-25, Sunway Velocity Mall, Lingkaran Sg, Sunway Velocity, 55100 Kuala Lumpur
2023-01-25 19:31:15,576 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:15,576 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 36.95
This will give you an output such as:
Company Name
12/10/2017
Address of Company
Lot 2-25, Sunway Velocity Mall, Lingkaran Sg, Sunway Velocity, 55100 Kuala Lumpur
Total
RM 36.95
This question is based on this source
2023-01-25 19:31:15,576 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 36.95 This will give you an output such as: Company Name 12/10/2017 Address of Company Lot 2-25, Sunway Velocity Mall, Lingkaran Sg, Sunway Velocity, 55100 Kuala Lumpur Total RM 36.95 This question is based on this source
2023-01-25 19:31:15,577 - __main__ - INFO - 96 - <module>() - Final prediction for document 43: {'company': 'Sunway Velocity Mall', 'date': '12/10/2017', 'address': 'Lot 2-25, Sunway Velocity Mall, Lingkaran Sg, Sunway Velocity, 55100 Kuala Lumpur', 'total': 'RM 36.95 This will give you an output such as: Company Name 12/10/2017 Address of Company Lot 2-25, Sunway Velocity Mall, Lingkaran Sg, Sunway Velocity, 55100 Kuala Lumpur Total RM 36.95 This question is based on this source'}
2023-01-25 19:31:15,577 - __main__ - INFO - 92 - <module>() - Predicting document 44...
2023-01-25 19:31:22,377 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  1
Date of Receipt: 21-06-2018
Address of Company: 2 Jalan Teh, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor
Total: 4.60

Find the keys with value "1.00" from the original document above. If no such value exist return "null".

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:

A:

You need to use the XPath count function and substring-after for each value you want to extract.
2023-01-25 19:31:22,378 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:22,378 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:22,379 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1

2023-01-25 19:31:22,379 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1
2023-01-25 19:31:22,379 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:22,380 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21-06-2018

2023-01-25 19:31:22,380 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21-06-2018
2023-01-25 19:31:22,380 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:22,380 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2 Jalan Teh, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor

2023-01-25 19:31:22,381 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2 Jalan Teh, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor
2023-01-25 19:31:22,381 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:22,381 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4.60

Find the keys with value "1.00" from the original document above. If no such value exist return "null".

Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:31:22,382 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4.60 Find the keys with value "1.00" from the original document above. If no such value exist return "null". Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:31:22,382 - __main__ - INFO - 96 - <module>() - Final prediction for document 44: {'company': '1', 'date': '21-06-2018', 'address': '2 Jalan Teh, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor', 'total': '4.60 Find the keys with value "1.00" from the original document above. If no such value exist return "null". Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:31:22,383 - __main__ - INFO - 92 - <module>() - Predicting document 45...
2023-01-25 19:31:29,132 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC
Date of Receipt: 01-06-2018 14:00
Address of Company: Jalan Temenggung 19/9
Total: 4.80

Use the following algorithm to generate the invoice:

if (CompanyName == "ABC")

{
Total = 4.80;
DateOfReceipt = 01-06-2018 14:00
AddressOfCompany = Jalan Temenggung 19/9
}
else
{
Total = -4.80;
DateOfReceipt = -01-06-2018 14:00
AddressOfCompany =
2023-01-25 19:31:29,133 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:29,134 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:29,134 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC

2023-01-25 19:31:29,135 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC
2023-01-25 19:31:29,135 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:29,136 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01-06-2018 14:00

2023-01-25 19:31:29,136 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01-06-2018 14:00
2023-01-25 19:31:29,136 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:29,137 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Temenggung 19/9

2023-01-25 19:31:29,137 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Temenggung 19/9
2023-01-25 19:31:29,138 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:29,139 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4.80

Use the following algorithm to generate the invoice:

if (CompanyName == "ABC")

{
Total = 4.80;
DateOfReceipt = 01-06-2018 14:00
AddressOfCompany = Jalan Temenggung 19/9
}
else
{
Total = -4.80;
DateOfReceipt = -01-06-2018 14:00
AddressOfCompany =
2023-01-25 19:31:29,139 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4.80 Use the following algorithm to generate the invoice: if (CompanyName == "ABC") { Total = 4.80; DateOfReceipt = 01-06-2018 14:00 AddressOfCompany = Jalan Temenggung 19/9 } else { Total = -4.80; DateOfReceipt = -01-06-2018 14:00 AddressOfCompany =
2023-01-25 19:31:29,140 - __main__ - INFO - 96 - <module>() - Final prediction for document 45: {'company': 'ABC', 'date': '01-06-2018 14:00', 'address': 'Jalan Temenggung 19/9', 'total': '4.80 Use the following algorithm to generate the invoice: if (CompanyName == "ABC") { Total = 4.80; DateOfReceipt = 01-06-2018 14:00 AddressOfCompany = Jalan Temenggung 19/9 } else { Total = -4.80; DateOfReceipt = -01-06-2018 14:00 AddressOfCompany ='}
2023-01-25 19:31:29,143 - __main__ - INFO - 92 - <module>() - Predicting document 46...
2023-01-25 19:31:36,161 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Value
Date of Receipt: Value
Address of Company: Value
Total: Value

In this example, Total: Value is "21.45" in the document.
You can only input digits for these values. You can't use letters.

You can only change the value of Total: Value.

Input total amount for your "Tax Invoice / Adjustment Note"

Enter "Total: Value"

"Tax Invoice / Adjustment Note" is "GST Tax Invoice/Adjustment Note".

"Total: Value" is "21.45".

Output key-
2023-01-25 19:31:36,164 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:36,165 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:36,166 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Value

2023-01-25 19:31:36,167 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Value
2023-01-25 19:31:36,167 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:36,168 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Value

2023-01-25 19:31:36,168 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Value
2023-01-25 19:31:36,169 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:36,169 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Value

2023-01-25 19:31:36,170 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Value
2023-01-25 19:31:36,170 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:36,170 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Value

In this example,
2023-01-25 19:31:36,171 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Value In this example,
2023-01-25 19:31:36,171 - __main__ - INFO - 96 - <module>() - Final prediction for document 46: {'company': 'Value', 'date': 'Value', 'address': 'Value', 'total': 'Value In this example,'}
2023-01-25 19:31:36,179 - __main__ - INFO - 92 - <module>() - Predicting document 47...
2023-01-25 19:31:43,260 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Input:

Input

Output:

Output

A:

Your question appears to be a rewording of your homework assignment description, which isn't in the homework tag. And I'm wondering if that's really all you're supposed to be doing, or if you've been given more complicated input/output to work with? I.e. if you get an input that's a list of company invoices, you'll still be asked to sum them and output
2023-01-25 19:31:43,262 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:43,262 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:43,263 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:31:43,264 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:31:43,264 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:43,265 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:31:43,265 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:31:43,266 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:43,266 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:31:43,267 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:31:43,267 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:43,268 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Input:

Input

Output:

Output

A:

Your question appears to be a rewording of your homework assignment description, which isn't in the homework tag. And I'm wondering if that's really all you're supposed to be doing, or if you've been given more complicated input/output to work with? I.e. if you get an input that's a list of company invoices, you'll still be asked to sum them and output
2023-01-25 19:31:43,268 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Input: Input  Output: Output  A: Your question appears to be a rewording of your homework assignment description, which isn't in the homework tag. And I'm wondering if that's really all you're supposed to be doing, or if you've been given more complicated input/output to work with? I.e. if you get an input that's a list of company invoices, you'll still be asked to sum them and output
2023-01-25 19:31:43,269 - __main__ - INFO - 96 - <module>() - Final prediction for document 47: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': "Total Input: Input  Output: Output  A: Your question appears to be a rewording of your homework assignment description, which isn't in the homework tag. And I'm wondering if that's really all you're supposed to be doing, or if you've been given more complicated input/output to work with? I.e. if you get an input that's a list of company invoices, you'll still be asked to sum them and output"}
2023-01-25 19:31:43,272 - __main__ - INFO - 92 - <module>() - Predicting document 48...
2023-01-25 19:31:51,005 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
|<|stop key|>: null
(Optional) Save the file to your local drive or to Google drive (or any cloud storage provider), and open the exported file.

Please note: Your submission is not saved.

Step 3: Downloading Data & Processing

Now you will be able to see the information you entered in the previous section.

Open the file.

Copy and paste the values from the file to the document below.

Save the file to your local
2023-01-25 19:31:51,007 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:51,008 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:51,009 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:31:51,009 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:31:51,010 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:51,011 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:31:51,011 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:31:51,012 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:51,012 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:31:51,013 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:31:51,013 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:51,013 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
|<|stop key|>: null
(Optional) Save the file to your local drive or to Google drive (or any cloud storage provider), and open the exported file.

Please note: Your submission is not saved.

Step 3: Downloading Data & Processing

Now you will be able to see the information you entered in the previous section.

Open the file.

Copy and paste the values from the file to the document below.

Save the file to your local
2023-01-25 19:31:51,014 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total |<|stop key|>: null (Optional) Save the file to your local drive or to Google drive (or any cloud storage provider), and open the exported file. Please note: Your submission is not saved. Step 3: Downloading Data & Processing Now you will be able to see the information you entered in the previous section. Open the file. Copy and paste the values from the file to the document below. Save the file to your local
2023-01-25 19:31:51,014 - __main__ - INFO - 96 - <module>() - Final prediction for document 48: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total |<|stop key|>: null (Optional) Save the file to your local drive or to Google drive (or any cloud storage provider), and open the exported file. Please note: Your submission is not saved. Step 3: Downloading Data & Processing Now you will be able to see the information you entered in the previous section. Open the file. Copy and paste the values from the file to the document below. Save the file to your local'}
2023-01-25 19:31:51,020 - __main__ - INFO - 92 - <module>() - Predicting document 49...
2023-01-25 19:31:58,588 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
[ ] BANGLADESH HOSPITAL SERVICE - ABDUS SALAM
[ ] CASSINI HOSPITAL
[ ] CHELTENHAM HOSPITAL
[ ] CENTAUR RIVERVIEW CONDO
[ ] CENTURY HOSPITAL
[ ] CHINA AIRLINES PRIVATE LIMITED
[ ] CONRAD JACOBS CHASE
[ ] COPLEY COURT APARTMENTS
[ ] EFFENSON SUTHERLAND
[ ] FRASCATI REALTY INC
[ ] FUJI RUM
2023-01-25 19:31:58,589 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:58,590 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:58,591 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
[ ] BANGLADESH HOSPITAL SERVICE - ABDUS SALAM
[ ] CASSINI HOSPITAL
[ ] CHELTENHAM HOSPITAL
[ ] CENTAUR RIVERVIEW CONDO
[ ] CENTURY HOSPITAL
[ ] CHINA AIRLINES PRIVATE LIMITED
[ ] CONRAD JACOBS CHASE
[ ] COPLEY COURT APARTMENTS
[ ] EFFENSON SUTHERLAND
[ ] FRASCATI REALTY INC
[ ] FUJI RUM
2023-01-25 19:31:58,591 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [ ] BANGLADESH HOSPITAL SERVICE - ABDUS SALAM [ ] CASSINI HOSPITAL [ ] CHELTENHAM HOSPITAL [ ] CENTAUR RIVERVIEW CONDO [ ] CENTURY HOSPITAL [ ] CHINA AIRLINES PRIVATE LIMITED [ ] CONRAD JACOBS CHASE [ ] COPLEY COURT APARTMENTS [ ] EFFENSON SUTHERLAND [ ] FRASCATI REALTY INC [ ] FUJI RUM
2023-01-25 19:31:58,592 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:58,592 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:58,592 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:58,593 - __main__ - INFO - 96 - <module>() - Final prediction for document 49: {'company': '[ ] BANGLADESH HOSPITAL SERVICE - ABDUS SALAM [ ] CASSINI HOSPITAL [ ] CHELTENHAM HOSPITAL [ ] CENTAUR RIVERVIEW CONDO [ ] CENTURY HOSPITAL [ ] CHINA AIRLINES PRIVATE LIMITED [ ] CONRAD JACOBS CHASE [ ] COPLEY COURT APARTMENTS [ ] EFFENSON SUTHERLAND [ ] FRASCATI REALTY INC [ ] FUJI RUM'}
2023-01-25 19:31:58,596 - __main__ - INFO - 92 - <module>() - Predicting document 50...
2023-01-25 19:32:01,159 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
2023-01-25 19:32:01,160 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:01,161 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:01,162 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:32:01,162 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:32:01,162 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:01,164 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:32:01,165 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:32:01,167 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:01,168 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:32:01,169 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:32:01,169 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:01,170 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:32:01,170 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:32:01,171 - __main__ - INFO - 96 - <module>() - Final prediction for document 50: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:32:01,174 - __main__ - INFO - 92 - <module>() - Predicting document 51...
2023-01-25 19:32:08,440 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total: <|stop key|>

Cash

Cash in hand (inclusive of cash in hand and amount paid) for the month.

2023-01-25 19:32:08,442 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:08,442 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:08,443 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:08,444 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:08,445 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:08,445 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:08,446 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:08,446 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:08,447 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:08,447 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:08,448 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:08,448 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:32:08,449 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:32:08,449 - __main__ - INFO - 96 - <module>() - Final prediction for document 51: {'total': '<|stop key|> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:32:08,453 - __main__ - INFO - 92 - <module>() - Predicting document 52...
2023-01-25 19:32:15,824 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SD-126668
Date of Receipt: 31/05/2018 12:43:21 PM
Address of Company: Taman Serdang
Total: 4.00
Existing Data in Table

3

The second part of the test is to check if the data above have been updated or not. First we need to import the table above to the test data sheet so that we can check if the data in the sheet has changed. Then we will use the same procedure to update the data in sheet.

Check the sheet again to see if the data have been updated.

4

2023-01-25 19:32:15,825 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:15,825 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:15,825 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SD-126668

2023-01-25 19:32:15,826 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SD-126668
2023-01-25 19:32:15,826 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:15,826 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/05/2018 12:43:21 PM

2023-01-25 19:32:15,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/05/2018 12:43:21 PM
2023-01-25 19:32:15,827 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:15,827 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Taman Serdang

2023-01-25 19:32:15,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Taman Serdang
2023-01-25 19:32:15,828 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:15,828 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4.00
Existing Data in Table

3

The second part of the test is to check if the data above have been updated or not. First we need to import the table above to the test data sheet so that we can check if the data in the sheet has changed. Then we will use the same procedure to update the data in sheet.

Check the sheet again to see if the data have been updated.

4

2023-01-25 19:32:15,828 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4.00 Existing Data in Table 3 The second part of the test is to check if the data above have been updated or not. First we need to import the table above to the test data sheet so that we can check if the data in the sheet has changed. Then we will use the same procedure to update the data in sheet. Check the sheet again to see if the data have been updated. 4
2023-01-25 19:32:15,828 - __main__ - INFO - 96 - <module>() - Final prediction for document 52: {'company': 'SD-126668', 'date': '31/05/2018 12:43:21 PM', 'address': 'Taman Serdang', 'total': '4.00 Existing Data in Table 3 The second part of the test is to check if the data above have been updated or not. First we need to import the table above to the test data sheet so that we can check if the data in the sheet has changed. Then we will use the same procedure to update the data in sheet. Check the sheet again to see if the data have been updated. 4'}
2023-01-25 19:32:15,830 - __main__ - INFO - 92 - <module>() - Predicting document 53...
2023-01-25 19:32:22,626 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

You can type in any of the fields that you have copied. All fields are case-insensitive.

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:

You can choose either "null" or a value from the list of fields from above. All fields are case-insensitive.

What's your name?*

Please enter the name of your organisation or contact person

Your first name

Your middle name

Your last name

Your e-
2023-01-25 19:32:22,626 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:22,627 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:22,627 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:22,627 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:22,628 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:22,628 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:22,628 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:22,628 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:22,629 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:22,629 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:22,629 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:22,630 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

You can type in any of the fields that you have copied. All fields are case-insensitive.

Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:32:22,630 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: You can type in any of the fields that you have copied. All fields are case-insensitive. Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:32:22,630 - __main__ - INFO - 96 - <module>() - Final prediction for document 53: {'total': 'You can type in any of the fields that you have copied. All fields are case-insensitive. Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:32:22,632 - __main__ - INFO - 92 - <module>() - Predicting document 54...
2023-01-25 19:32:24,826 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 31/12/2017
Address of Company:
Total: 0.45
2023-01-25 19:32:24,826 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:24,826 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:24,826 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:24,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:24,827 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:24,827 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/12/2017

2023-01-25 19:32:24,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/12/2017
2023-01-25 19:32:24,827 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:24,827 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:24,828 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:24,828 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:24,828 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.45
2023-01-25 19:32:24,828 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.45
2023-01-25 19:32:24,828 - __main__ - INFO - 96 - <module>() - Final prediction for document 54: {'date': '31/12/2017', 'total': '0.45'}
2023-01-25 19:32:24,829 - __main__ - INFO - 92 - <module>() - Predicting document 55...
2023-01-25 19:32:29,789 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  PENGLAS ISLAND SHIPPING LINE LTD
Address of Company: No 2, Jalan Taman M. G. Hossain, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor
Total: 7.20
2023-01-25 19:32:29,789 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:29,790 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:29,790 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PENGLAS ISLAND SHIPPING LINE LTD

2023-01-25 19:32:29,790 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PENGLAS ISLAND SHIPPING LINE LTD
2023-01-25 19:32:29,791 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:29,791 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:29,791 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  No 2, Jalan Taman M. G. Hossain, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor

2023-01-25 19:32:29,792 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: No 2, Jalan Taman M. G. Hossain, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor
2023-01-25 19:32:29,792 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:29,792 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7.20
2023-01-25 19:32:29,792 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7.20
2023-01-25 19:32:29,793 - __main__ - INFO - 96 - <module>() - Final prediction for document 55: {'company': 'PENGLAS ISLAND SHIPPING LINE LTD', 'address': 'No 2, Jalan Taman M. G. Hossain, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor', 'total': '7.20'}
2023-01-25 19:32:29,794 - __main__ - INFO - 92 - <module>() - Predicting document 56...
2023-01-25 19:32:36,474 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Ningbo Yitu Import and Export Trade Co., Ltd.
Date of Receipt: 14/04/18
Address of Company:
945 Longgang Road, Ningbo, Zhejiang, China
Total: 94.50

Output:

Company Name, Date of Receipt, Address of Company, Total, tax_1, tax_2
Ningbo Yitu Import and Export Trade Co., Ltd., 14/04/2018, 945 Longgang Road, Ningbo, Zhejiang, China, 94.50, 5.67

You should implement
2023-01-25 19:32:36,475 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:36,476 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:36,476 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Ningbo Yitu Import and Export Trade Co., Ltd.

2023-01-25 19:32:36,477 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Ningbo Yitu Import and Export Trade Co., Ltd.
2023-01-25 19:32:36,477 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:36,478 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14/04/18

2023-01-25 19:32:36,479 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14/04/18
2023-01-25 19:32:36,479 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:36,480 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
945 Longgang Road, Ningbo, Zhejiang, China

2023-01-25 19:32:36,481 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 945 Longgang Road, Ningbo, Zhejiang, China
2023-01-25 19:32:36,481 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:36,482 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  94.50

Output:

Company Name, Date of Receipt, Address of Company, Total, tax_1, tax_2
Ningbo Yitu Import and Export Trade Co., Ltd., 14/04/2018, 945 Longgang Road, Ningbo, Zhejiang, China, 94.50, 5.67

You should implement
2023-01-25 19:32:36,483 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 94.50 Output: Company Name, Date of Receipt, Address of Company, Total, tax_1, tax_2 Ningbo Yitu Import and Export Trade Co., Ltd., 14/04/2018, 945 Longgang Road, Ningbo, Zhejiang, China, 94.50, 5.67 You should implement
2023-01-25 19:32:36,483 - __main__ - INFO - 96 - <module>() - Final prediction for document 56: {'company': 'Ningbo Yitu Import and Export Trade Co., Ltd.', 'date': '14/04/18', 'address': '945 Longgang Road, Ningbo, Zhejiang, China', 'total': '94.50 Output: Company Name, Date of Receipt, Address of Company, Total, tax_1, tax_2 Ningbo Yitu Import and Export Trade Co., Ltd., 14/04/2018, 945 Longgang Road, Ningbo, Zhejiang, China, 94.50, 5.67 You should implement'}
2023-01-25 19:32:36,486 - __main__ - INFO - 92 - <module>() - Predicting document 57...
2023-01-25 19:32:38,842 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Name of the company
Date of Receipt: The date on which the cheque was issued
Address of Company: Address of the company
Total: Total value of the cheque

2023-01-25 19:32:38,843 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:38,844 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:38,844 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Name of the company

2023-01-25 19:32:38,845 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Name of the company
2023-01-25 19:32:38,845 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:38,846 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date on which the cheque was issued

2023-01-25 19:32:38,847 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date on which the cheque was issued
2023-01-25 19:32:38,847 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:38,848 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of the company

2023-01-25 19:32:38,848 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of the company
2023-01-25 19:32:38,849 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:38,849 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total value of the cheque

2023-01-25 19:32:38,850 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total value of the cheque
2023-01-25 19:32:38,850 - __main__ - INFO - 96 - <module>() - Final prediction for document 57: {'company': 'Name of the company', 'date': 'The date on which the cheque was issued', 'address': 'Address of the company', 'total': 'Total value of the cheque'}
2023-01-25 19:32:38,853 - __main__ - INFO - 92 - <module>() - Predicting document 58...
2023-01-25 19:32:46,685 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Viva Pakcaging SDN BHD
Date of Receipt: 1.3.2018
Address of Company: 14 Jalan Manis, 4 Taman Segar 56100 KL
Total: 49.50
3. STEP: (7.a)
Type into the text box given.
For example: 3.00
Type:
GST 6%
RM
-0.02
*
RM 52.45
CASH 55.55
CASH CHANGE 55.55
GST SUMMARY
AMOUNT(RM)
TAX(RM)
SR @ 6 %
2023-01-25 19:32:46,686 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:46,687 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:46,687 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Viva Pakcaging SDN BHD

2023-01-25 19:32:46,687 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Viva Pakcaging SDN BHD
2023-01-25 19:32:46,687 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:46,687 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1.3.2018

2023-01-25 19:32:46,688 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1.3.2018
2023-01-25 19:32:46,688 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:46,688 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14 Jalan Manis, 4 Taman Segar 56100 KL

2023-01-25 19:32:46,688 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14 Jalan Manis, 4 Taman Segar 56100 KL
2023-01-25 19:32:46,688 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:46,688 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  49.50
3. STEP: (7.a)
Type into the text box given.
For example: 3.00
Type:
GST 6%
RM
-0.02
*
RM 52.45
CASH 55.55
CASH CHANGE 55.55
GST SUMMARY
AMOUNT(RM)
TAX(RM)
SR @ 6 %
2023-01-25 19:32:46,689 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 49.50 3. STEP: (7.a) Type into the text box given. For example: 3.00 Type: GST 6% RM -0.02 * RM 52.45 CASH 55.55 CASH CHANGE 55.55 GST SUMMARY AMOUNT(RM) TAX(RM) SR @ 6 %
2023-01-25 19:32:46,689 - __main__ - INFO - 96 - <module>() - Final prediction for document 58: {'company': 'Viva Pakcaging SDN BHD', 'date': '1.3.2018', 'address': '14 Jalan Manis, 4 Taman Segar 56100 KL', 'total': '49.50 3. STEP: (7.a) Type into the text box given. For example: 3.00 Type: GST 6% RM -0.02 * RM 52.45 CASH 55.55 CASH CHANGE 55.55 GST SUMMARY AMOUNT(RM) TAX(RM) SR @ 6 %'}
2023-01-25 19:32:46,690 - __main__ - INFO - 92 - <module>() - Predicting document 59...
2023-01-25 19:32:49,101 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>
2023-01-25 19:32:49,103 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:49,104 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:49,105 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:49,105 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:49,106 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:49,106 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:49,107 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:49,107 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:49,108 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:49,108 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:49,109 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:49,109 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>
2023-01-25 19:32:49,110 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:32:49,110 - __main__ - INFO - 96 - <module>() - Final prediction for document 59: {'total': '<|stop key|>'}
2023-01-25 19:32:49,113 - __main__ - INFO - 92 - <module>() - Predicting document 60...
2023-01-25 19:32:56,470 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>

Create an Input RecordSet for the above data and click on the "Run" button.

Create an OLEDB RecordSet and set up the fields as follows (make sure you don't put spaces in the fields):

Field: Data Type:

Company: String - 255 characters
Date Receipt: DateTime: YYYY/MM/DD
Address: String - 255 characters
Total: Decimal: 18,6
Total Without VAT: Decimal: 19,2
Total Inclusive
2023-01-25 19:32:56,471 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:56,472 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:56,473 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:56,474 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:56,474 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:56,475 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:56,475 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:56,476 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:56,477 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:56,477 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:56,478 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:56,478 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Create an Input RecordSet for the above data and click on the "Run" button.

Create an OLEDB RecordSet and set up the fields as follows (make sure you don't put spaces in the fields):

Field: Data Type:

Company: String - 255 characters
Date Receipt: DateTime: YYYY/MM/DD
Address: String - 255 characters

2023-01-25 19:32:56,479 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Create an Input RecordSet for the above data and click on the "Run" button. Create an OLEDB RecordSet and set up the fields as follows (make sure you don't put spaces in the fields): Field: Data Type: Company: String - 255 characters Date Receipt: DateTime: YYYY/MM/DD Address: String - 255 characters
2023-01-25 19:32:56,480 - __main__ - INFO - 96 - <module>() - Final prediction for document 60: {'total': '<|stop key|> Create an Input RecordSet for the above data and click on the "Run" button. Create an OLEDB RecordSet and set up the fields as follows (make sure you don\'t put spaces in the fields): Field: Data Type: Company: String - 255 characters Date Receipt: DateTime: YYYY/MM/DD Address: String - 255 characters'}
2023-01-25 19:32:56,483 - __main__ - INFO - 92 - <module>() - Predicting document 61...
2023-01-25 19:33:03,525 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  X
Date of Receipt: 1st Sep 2018
Address of Company: Jalan Bandar Damansara
Total: 45.28

For the X key,

Add the Total value 45.28

For the Jalan Bandar Damansara key,

If the value is null, set to '0'

Add the Total value 45.28

You will get the value 8.7

Save the value 8.7 to 'TOTAL' of your Excel file.

Sub Total:

For the X key,

Find the sub total value.
2023-01-25 19:33:03,526 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:03,527 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:03,528 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  X

2023-01-25 19:33:03,528 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: X
2023-01-25 19:33:03,529 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:03,529 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1st Sep 2018

2023-01-25 19:33:03,530 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1st Sep 2018
2023-01-25 19:33:03,530 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:03,531 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Bandar Damansara

2023-01-25 19:33:03,531 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Bandar Damansara
2023-01-25 19:33:03,531 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:03,532 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  45.28

For the X key,

Add the Total value 45.28

For the Jalan Bandar Damansara key,

If the value is null, set to '0'

Add the Total value 45.28

You will get the value 8.7

Save the value 8.7 to 'TOTAL' of your Excel file.

Sub
2023-01-25 19:33:03,532 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 45.28 For the X key, Add the Total value 45.28 For the Jalan Bandar Damansara key, If the value is null, set to '0' Add the Total value 45.28 You will get the value 8.7 Save the value 8.7 to 'TOTAL' of your Excel file. Sub
2023-01-25 19:33:03,533 - __main__ - INFO - 96 - <module>() - Final prediction for document 61: {'company': 'X', 'date': '1st Sep 2018', 'address': 'Jalan Bandar Damansara', 'total': "45.28 For the X key, Add the Total value 45.28 For the Jalan Bandar Damansara key, If the value is null, set to '0' Add the Total value 45.28 You will get the value 8.7 Save the value 8.7 to 'TOTAL' of your Excel file. Sub"}
2023-01-25 19:33:03,536 - __main__ - INFO - 92 - <module>() - Predicting document 62...
2023-01-25 19:33:10,294 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company
Date of Receipt: 2019-04-19
Address of Company: Jalan SS2/25/2, Petaling Jaya, Malaysia
Total: 105030.80
</b>

Your output should look like this:

Name: N. FB F-BEST RESTAURANT
GST: 6%
Company Name: ABC
Address of Company: XYZ
Date of Receipt: 20XX-12-31
Total: 100.00

If you cannot figure out what should go in the output field, check the data sample you receive.


2023-01-25 19:33:10,295 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:10,295 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:10,296 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company

2023-01-25 19:33:10,297 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company
2023-01-25 19:33:10,298 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:10,298 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2019-04-19

2023-01-25 19:33:10,299 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2019-04-19
2023-01-25 19:33:10,299 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:10,300 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan SS2/25/2, Petaling Jaya, Malaysia

2023-01-25 19:33:10,301 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan SS2/25/2, Petaling Jaya, Malaysia
2023-01-25 19:33:10,301 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:10,302 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  105030.80
</b>

Your output should look like this:

Name: N. FB F-BEST RESTAURANT
GST: 6%
Company Name: ABC
Address of Company: XYZ
Date of Receipt: 20XX-12-31

2023-01-25 19:33:10,302 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 105030.80 </b> Your output should look like this: Name: N. FB F-BEST RESTAURANT GST: 6% Company Name: ABC Address of Company: XYZ Date of Receipt: 20XX-12-31
2023-01-25 19:33:10,302 - __main__ - INFO - 96 - <module>() - Final prediction for document 62: {'company': 'Company', 'date': '2019-04-19', 'address': 'Jalan SS2/25/2, Petaling Jaya, Malaysia', 'total': '105030.80 </b> Your output should look like this: Name: N. FB F-BEST RESTAURANT GST: 6% Company Name: ABC Address of Company: XYZ Date of Receipt: 20XX-12-31'}
2023-01-25 19:33:10,305 - __main__ - INFO - 92 - <module>() - Predicting document 63...
2023-01-25 19:33:13,259 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "F&B Services Limited"
Date of Receipt: "2017-01-09"
Address of Company: "12-7, Jalan Tengku Muhammad Faris"
Total: "1.44"
2023-01-25 19:33:13,264 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:13,264 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:13,265 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "F&B Services Limited"

2023-01-25 19:33:13,266 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: F&B Services Limited
2023-01-25 19:33:13,266 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:13,267 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2017-01-09"

2023-01-25 19:33:13,268 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017-01-09
2023-01-25 19:33:13,268 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:13,269 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "12-7, Jalan Tengku Muhammad Faris"

2023-01-25 19:33:13,269 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12-7, Jalan Tengku Muhammad Faris
2023-01-25 19:33:13,270 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:13,270 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "1.44"
2023-01-25 19:33:13,271 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1.44
2023-01-25 19:33:13,271 - __main__ - INFO - 96 - <module>() - Final prediction for document 63: {'company': 'F&B Services Limited', 'date': '2017-01-09', 'address': '12-7, Jalan Tengku Muhammad Faris', 'total': '1.44'}
2023-01-25 19:33:13,277 - __main__ - INFO - 92 - <module>() - Predicting document 64...
2023-01-25 19:33:20,118 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ZION
Date of Receipt: 28-07-2018 16:38:33
Address of Company: NO.2, Jalan Tebet Menjalin,
43200 Cheras, Selangor
Total: RM14,000

# Solution:
import sys
document = """
ZION TECHNOLOGIES SDN BHD
Company Address:
No.2, Jalan Tebet Menjalin
43200 Cheras, Selangor
Email: [email protected]
Telephone: 012 845 8333
Fax: 012 845 8
2023-01-25 19:33:20,119 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:20,119 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:20,119 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ZION

2023-01-25 19:33:20,120 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ZION
2023-01-25 19:33:20,120 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:20,120 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  28-07-2018 16:38:33

2023-01-25 19:33:20,120 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28-07-2018 16:38:33
2023-01-25 19:33:20,121 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:20,121 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NO.2, Jalan Tebet Menjalin,
43200 Cheras, Selangor

2023-01-25 19:33:20,121 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NO.2, Jalan Tebet Menjalin, 43200 Cheras, Selangor
2023-01-25 19:33:20,121 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:20,122 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM14,000

# Solution:
import sys
document = """
ZION TECHNOLOGIES SDN BHD
Company Address:
No.2, Jalan Tebet Menjalin
43200 Cheras, Selangor
Email: [email protected]
Telephone: 012 845 8333
Fax: 012 845 8
2023-01-25 19:33:20,122 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM14,000 # Solution: import sys document = """ ZION TECHNOLOGIES SDN BHD Company Address: No.2, Jalan Tebet Menjalin 43200 Cheras, Selangor Email: [email protected] Telephone: 012 845 8333 Fax: 012 845 8
2023-01-25 19:33:20,122 - __main__ - INFO - 96 - <module>() - Final prediction for document 64: {'company': 'ZION', 'date': '28-07-2018 16:38:33', 'address': 'NO.2, Jalan Tebet Menjalin, 43200 Cheras, Selangor', 'total': 'RM14,000 # Solution: import sys document = """ ZION TECHNOLOGIES SDN BHD Company Address: No.2, Jalan Tebet Menjalin 43200 Cheras, Selangor Email: [email protected] Telephone: 012 845 8333 Fax: 012 845 8'}
2023-01-25 19:33:20,125 - __main__ - INFO - 92 - <module>() - Predicting document 65...
2023-01-25 19:33:27,772 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:
Address of Company:

Total:

|stop key|: null

I have an invoice and it is the result of a purchase order. I would like the invoice's quantity field to show 1, because the P/O states that I ordered a single box of x.
I do not have a line item with any quantity.

Thanks!

(0)
(0)

Start a new discussion

Related Questions

You will be able to attach files into this item and upload files at any time in the discussion.

How do
2023-01-25 19:33:27,774 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:27,774 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:27,775 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:33:27,775 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:27,775 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:27,776 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:27,776 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:27,776 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:27,776 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:33:27,777 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:27,777 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:27,777 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

|stop key|: null

I have an invoice and it is the result of a purchase order. I would like the invoice's quantity field to show 1, because the P/O states that I ordered a single box of x.
I do not have a line item with any quantity.

Thanks!

(0)
(0)

Start a new discussion

Related Questions

You will be able to attach files into this item and upload files at any time in the discussion.

How do
2023-01-25 19:33:27,777 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: |stop key|: null I have an invoice and it is the result of a purchase order. I would like the invoice's quantity field to show 1, because the P/O states that I ordered a single box of x. I do not have a line item with any quantity. Thanks! (0) (0) Start a new discussion Related Questions You will be able to attach files into this item and upload files at any time in the discussion. How do
2023-01-25 19:33:27,778 - __main__ - INFO - 96 - <module>() - Final prediction for document 65: {'total': "|stop key|: null I have an invoice and it is the result of a purchase order. I would like the invoice's quantity field to show 1, because the P/O states that I ordered a single box of x. I do not have a line item with any quantity. Thanks! (0) (0) Start a new discussion Related Questions You will be able to attach files into this item and upload files at any time in the discussion. How do"}
2023-01-25 19:33:27,779 - __main__ - INFO - 92 - <module>() - Predicting document 66...
2023-01-25 19:33:35,032 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Exempt Sales Category Codes:

Select C:1, C:1, C:2, C:3, C:4 or C:5

If you have selected more than one, please select 'other' and key in the number of your selection.

Total:

GST(13%):

GST(6%):

TOTAL(Incl. GST(13%):

GST(6%):

Total:

Tax Invoice Details (Including GST (13%) & Tax (6%) Amounts) :

1
2023-01-25 19:33:35,033 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:35,033 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:35,034 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Exempt Sales Category Codes:

Select C:1, C:1, C:2, C:3, C:4 or C:5

If you have selected more than one, please select 'other' and key in the number of your selection.


2023-01-25 19:33:35,034 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Exempt Sales Category Codes: Select C:1, C:1, C:2, C:3, C:4 or C:5 If you have selected more than one, please select 'other' and key in the number of your selection.
2023-01-25 19:33:35,034 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:35,034 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:35,035 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:35,035 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

GST(13%):

GST(6%):

TOTAL(Incl. GST(13%):

GST(6%):


2023-01-25 19:33:35,035 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GST(13%): GST(6%): TOTAL(Incl. GST(13%): GST(6%):
2023-01-25 19:33:35,035 - __main__ - INFO - 96 - <module>() - Final prediction for document 66: {'company': "Exempt Sales Category Codes: Select C:1, C:1, C:2, C:3, C:4 or C:5 If you have selected more than one, please select 'other' and key in the number of your selection.", 'total': 'GST(13%): GST(6%): TOTAL(Incl. GST(13%): GST(6%):'}
2023-01-25 19:33:35,037 - __main__ - INFO - 92 - <module>() - Predicting document 67...
2023-01-25 19:33:38,815 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Aeon Co.(M) Bhd"
Date of Receipt: 2018-06-03
Address of Company: Jalan Kuala Lumpur, Kuala Lumpur 12000, Malaysia
Total: 379.43
2023-01-25 19:33:38,816 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:38,816 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:38,817 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Aeon Co.(M) Bhd"

2023-01-25 19:33:38,817 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Aeon Co.(M) Bhd
2023-01-25 19:33:38,817 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:38,818 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-06-03

2023-01-25 19:33:38,818 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-06-03
2023-01-25 19:33:38,818 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:38,818 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Kuala Lumpur, Kuala Lumpur 12000, Malaysia

2023-01-25 19:33:38,819 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Kuala Lumpur, Kuala Lumpur 12000, Malaysia
2023-01-25 19:33:38,819 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:38,819 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  379.43
2023-01-25 19:33:38,820 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 379.43
2023-01-25 19:33:38,820 - __main__ - INFO - 96 - <module>() - Final prediction for document 67: {'company': 'Aeon Co.(M) Bhd', 'date': '2018-06-03', 'address': 'Jalan Kuala Lumpur, Kuala Lumpur 12000, Malaysia', 'total': '379.43'}
2023-01-25 19:33:38,822 - __main__ - INFO - 92 - <module>() - Predicting document 68...
2023-01-25 19:33:44,576 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  JUWITA WEDDINGS (366310-U)
Date of Receipt: 28-FEB-2018
Address of Company: LENGKUAN BOOKWORM SINGAPORE SDN BHD - WANGSA MAJU, ROJSELTORADE
Total: 5.00
Total
:
5.00
2023-01-25 19:33:44,577 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:44,577 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:44,577 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JUWITA WEDDINGS (366310-U)

2023-01-25 19:33:44,578 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JUWITA WEDDINGS (366310-U)
2023-01-25 19:33:44,578 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:44,578 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  28-FEB-2018

2023-01-25 19:33:44,578 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28-FEB-2018
2023-01-25 19:33:44,579 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:44,579 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  LENGKUAN BOOKWORM SINGAPORE SDN BHD - WANGSA MAJU, ROJSELTORADE

2023-01-25 19:33:44,579 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LENGKUAN BOOKWORM SINGAPORE SDN BHD - WANGSA MAJU, ROJSELTORADE
2023-01-25 19:33:44,579 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:44,580 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5.00
Total
:
5.00
2023-01-25 19:33:44,580 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5.00 Total : 5.00
2023-01-25 19:33:44,580 - __main__ - INFO - 96 - <module>() - Final prediction for document 68: {'company': 'JUWITA WEDDINGS (366310-U)', 'date': '28-FEB-2018', 'address': 'LENGKUAN BOOKWORM SINGAPORE SDN BHD - WANGSA MAJU, ROJSELTORADE', 'total': '5.00 Total : 5.00'}
2023-01-25 19:33:44,582 - __main__ - INFO - 92 - <module>() - Predicting document 69...
2023-01-25 19:33:52,246 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Siti Fadilah Kota Setia
Date of Receipt: 2019-09-10T00:00:00
Address of Company: Siti Fadilah Kota Setia
Total: 8.47

This is what I tried so far:
<?php
  $url = 'https://docs.google.com/spreadsheets/d/1_d5U-3d8y7G7XsYH2Q4lJQlh6g7Vh0jG_l9yh5hv4UfOeU
2023-01-25 19:33:52,249 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:52,249 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:52,250 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Siti Fadilah Kota Setia

2023-01-25 19:33:52,250 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Siti Fadilah Kota Setia
2023-01-25 19:33:52,251 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:52,251 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2019-09-10T00:00:00

2023-01-25 19:33:52,251 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2019-09-10T00:00:00
2023-01-25 19:33:52,251 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:52,252 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Siti Fadilah Kota Setia

2023-01-25 19:33:52,252 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Siti Fadilah Kota Setia
2023-01-25 19:33:52,252 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:52,253 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8.47

This is what I tried so far:
<?php
  $url = 'https://docs.google.com/spreadsheets/d/1_d5U-3d8y7G7XsYH2Q4lJQlh6g7Vh0jG_l9yh5hv4UfOeU
2023-01-25 19:33:52,253 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8.47 This is what I tried so far: <?php  $url = 'https://docs.google.com/spreadsheets/d/1_d5U-3d8y7G7XsYH2Q4lJQlh6g7Vh0jG_l9yh5hv4UfOeU
2023-01-25 19:33:52,253 - __main__ - INFO - 96 - <module>() - Final prediction for document 69: {'company': 'Siti Fadilah Kota Setia', 'date': '2019-09-10T00:00:00', 'address': 'Siti Fadilah Kota Setia', 'total': "8.47 This is what I tried so far: <?php  $url = 'https://docs.google.com/spreadsheets/d/1_d5U-3d8y7G7XsYH2Q4lJQlh6g7Vh0jG_l9yh5hv4UfOeU"}
2023-01-25 19:33:52,261 - __main__ - INFO - 92 - <module>() - Predicting document 70...
2023-01-25 19:33:59,381 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Now you have what you need:
List of companies that have been paid, in descending order:
Company Name:
Company Name:
Company Name:
Company Name:
Company Name:
Company Name:
Company Name:
Company Name:

You can see the list of payment of the companies above.

Step 8: Extracting specific lines from a document.
You need to create the following query to get the list of payments.

You can extract information about the company that paid the invoice, by doing the following
2023-01-25 19:33:59,383 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:59,384 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:59,384 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:59,385 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:59,385 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:59,385 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:59,386 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:59,386 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:59,387 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:59,387 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:59,387 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:59,388 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Now you have what you need:
List of companies that have been paid, in descending order:
Company Name:
Company Name:
Company Name:
Company Name:
Company Name:
Company Name:
Company Name:
Company Name:

You can see the list of payment of the companies above.

Step 8: Extracting specific lines from a document.
You need to create the following query to get the list of payments.

You can extract information about the company that paid the invoice, by doing the following
2023-01-25 19:33:59,388 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Now you have what you need: List of companies that have been paid, in descending order: Company Name: Company Name: Company Name: Company Name: Company Name: Company Name: Company Name: Company Name: You can see the list of payment of the companies above. Step 8: Extracting specific lines from a document. You need to create the following query to get the list of payments. You can extract information about the company that paid the invoice, by doing the following
2023-01-25 19:33:59,389 - __main__ - INFO - 96 - <module>() - Final prediction for document 70: {'total': 'Now you have what you need: List of companies that have been paid, in descending order: Company Name: Company Name: Company Name: Company Name: Company Name: Company Name: Company Name: Company Name: You can see the list of payment of the companies above. Step 8: Extracting specific lines from a document. You need to create the following query to get the list of payments. You can extract information about the company that paid the invoice, by doing the following'}
2023-01-25 19:33:59,392 - __main__ - INFO - 92 - <module>() - Predicting document 71...
2023-01-25 19:34:03,801 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <|stop key|>
Date of Receipt: <|stop key|>
Address of Company: <|stop key|>
Total: <|stop key|>
Total Tax: <|stop key|>
Output as csv file:
Company Name,Date of Receipt,Address of Company,Total,Tax

2023-01-25 19:34:03,802 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:03,803 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:03,803 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:34:03,804 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:34:03,804 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:03,805 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:34:03,805 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:34:03,806 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:03,807 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:34:03,807 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:34:03,808 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:03,808 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>
Total Tax: <|stop key|>
Output as csv file:
Company Name,Date of Receipt,Address of Company,Total,Tax

2023-01-25 19:34:03,809 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Total Tax: <|stop key|> Output as csv file: Company Name,Date of Receipt,Address of Company,Total,Tax
2023-01-25 19:34:03,809 - __main__ - INFO - 96 - <module>() - Final prediction for document 71: {'company': '<|stop key|>', 'date': '<|stop key|>', 'address': '<|stop key|>', 'total': '<|stop key|> Total Tax: <|stop key|> Output as csv file: Company Name,Date of Receipt,Address of Company,Total,Tax'}
2023-01-25 19:34:03,812 - __main__ - INFO - 92 - <module>() - Predicting document 72...
2023-01-25 19:34:06,167 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document: Company_Name
Date of Receipt: Date_Of_Receipt
Address of Company:Address_Of_Company
Total:Total
2023-01-25 19:34:06,168 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:06,169 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:06,169 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: Company_Name

2023-01-25 19:34:06,170 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company_Name
2023-01-25 19:34:06,170 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:06,170 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date_Of_Receipt

2023-01-25 19:34:06,171 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date_Of_Receipt
2023-01-25 19:34:06,171 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:06,172 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: Address_Of_Company

2023-01-25 19:34:06,172 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address_Of_Company
2023-01-25 19:34:06,173 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:06,173 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: Total
2023-01-25 19:34:06,174 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:34:06,174 - __main__ - INFO - 96 - <module>() - Final prediction for document 72: {'company': 'Company_Name', 'date': 'Date_Of_Receipt', 'address': 'Address_Of_Company', 'total': 'Total'}
2023-01-25 19:34:06,176 - __main__ - INFO - 92 - <module>() - Predicting document 73...
2023-01-25 19:34:10,884 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Xxxxxxxx (xxx is your company name)
Date of Receipt: 05/03/2018
Address of Company: xx.xx.xx, Jalan Bukit Berapit
Total: $0.00
The file you're reading contains sensitive information (such as your company address, company phone number, etc.) and cannot be shared.
2023-01-25 19:34:10,886 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:10,886 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:10,887 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Xxxxxxxx (xxx is your company name)

2023-01-25 19:34:10,887 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Xxxxxxxx (xxx is your company name)
2023-01-25 19:34:10,888 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:10,889 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  05/03/2018

2023-01-25 19:34:10,889 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05/03/2018
2023-01-25 19:34:10,889 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:10,890 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  xx.xx.xx, Jalan Bukit Berapit

2023-01-25 19:34:10,891 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: xx.xx.xx, Jalan Bukit Berapit
2023-01-25 19:34:10,891 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:10,892 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $0.00
The file you're reading contains sensitive information (such as your company address, company phone number, etc.) and cannot be shared.
2023-01-25 19:34:10,892 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $0.00 The file you're reading contains sensitive information (such as your company address, company phone number, etc.) and cannot be shared.
2023-01-25 19:34:10,892 - __main__ - INFO - 96 - <module>() - Final prediction for document 73: {'company': 'Xxxxxxxx (xxx is your company name)', 'date': '05/03/2018', 'address': 'xx.xx.xx, Jalan Bukit Berapit', 'total': "$0.00 The file you're reading contains sensitive information (such as your company address, company phone number, etc.) and cannot be shared."}
2023-01-25 19:34:10,896 - __main__ - INFO - 92 - <module>() - Predicting document 74...
2023-01-25 19:34:16,788 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  McDonald's Malaysia
Date of Receipt: 2018-11-05
Address of Company: Level 6, Bangunan Bt #3, Jalan SS21/39, Kepong, 47400 Petaling Jaya, Selangor
Total: 7.50
Note: "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" should not be in one line
The stop key here is used to know if all the key-value pairs have been found.

2023-01-25 19:34:16,790 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:16,791 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:16,792 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  McDonald's Malaysia

2023-01-25 19:34:16,792 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: McDonald's Malaysia
2023-01-25 19:34:16,793 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:16,794 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-11-05

2023-01-25 19:34:16,794 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-11-05
2023-01-25 19:34:16,795 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:16,795 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Level 6, Bangunan Bt #3, Jalan SS21/39, Kepong, 47400 Petaling Jaya, Selangor

2023-01-25 19:34:16,796 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Level 6, Bangunan Bt #3, Jalan SS21/39, Kepong, 47400 Petaling Jaya, Selangor
2023-01-25 19:34:16,796 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:16,797 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7.50
Note: "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" should not be in one line
The stop key here is used to know if all the key-value pairs have been found.

2023-01-25 19:34:16,797 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7.50 Note: "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" should not be in one line The stop key here is used to know if all the key-value pairs have been found.
2023-01-25 19:34:16,798 - __main__ - INFO - 96 - <module>() - Final prediction for document 74: {'company': "McDonald's Malaysia", 'date': '2018-11-05', 'address': 'Level 6, Bangunan Bt #3, Jalan SS21/39, Kepong, 47400 Petaling Jaya, Selangor', 'total': '7.50 Note: "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" should not be in one line The stop key here is used to know if all the key-value pairs have been found.'}
2023-01-25 19:34:16,801 - __main__ - INFO - 92 - <module>() - Predicting document 75...
2023-01-25 19:34:24,405 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  QL CLASSIC EGGS
Date of Receipt: 1X 000000812237
Address of Company: 1X 000000812198
Total: 0.88
Receipt Number: <|stop key|>

This is a multi-part question.

You would like to find the total amount of all sales, which are in the format $x.xx.xx, regardless of whether the input is a substring, or if it contains digits, hyphens or spaces. So, for example: 1X0001X or BHD3. In other words, if the first two words can
2023-01-25 19:34:24,407 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:24,408 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:24,409 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  QL CLASSIC EGGS

2023-01-25 19:34:24,409 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: QL CLASSIC EGGS
2023-01-25 19:34:24,410 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:24,410 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1X 000000812237

2023-01-25 19:34:24,411 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1X 000000812237
2023-01-25 19:34:24,411 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:24,412 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1X 000000812198

2023-01-25 19:34:24,412 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1X 000000812198
2023-01-25 19:34:24,413 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:24,413 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.88
Receipt Number: <|stop key|>

This is a multi-part question.

You would like to find the total amount of all sales, which are in the format $x.xx.xx, regardless of whether the input is a substring, or if it contains digits, hyphens or spaces. So, for example: 1X0001X or BHD3. In other words, if the first two words can
2023-01-25 19:34:24,413 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.88 Receipt Number: <|stop key|> This is a multi-part question.  You would like to find the total amount of all sales, which are in the format $x.xx.xx, regardless of whether the input is a substring, or if it contains digits, hyphens or spaces. So, for example: 1X0001X or BHD3. In other words, if the first two words can
2023-01-25 19:34:24,414 - __main__ - INFO - 96 - <module>() - Final prediction for document 75: {'company': 'QL CLASSIC EGGS', 'date': '1X 000000812237', 'address': '1X 000000812198', 'total': '0.88 Receipt Number: <|stop key|> This is a multi-part question.  You would like to find the total amount of all sales, which are in the format $x.xx.xx, regardless of whether the input is a substring, or if it contains digits, hyphens or spaces. So, for example: 1X0001X or BHD3. In other words, if the first two words can'}
2023-01-25 19:34:24,417 - __main__ - INFO - 92 - <module>() - Predicting document 76...
2023-01-25 19:34:26,921 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC Ltd
Date of Receipt: 26/02/2017
Address of Company: Some
Total: 26.00
The above is a sample from the data set.
2023-01-25 19:34:26,922 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:26,923 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:26,923 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC Ltd

2023-01-25 19:34:26,924 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Ltd
2023-01-25 19:34:26,924 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:26,925 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  26/02/2017

2023-01-25 19:34:26,925 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 26/02/2017
2023-01-25 19:34:26,926 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:26,927 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Some

2023-01-25 19:34:26,927 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Some
2023-01-25 19:34:26,927 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:26,928 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  26.00
The above is a sample from the data set.
2023-01-25 19:34:26,928 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 26.00 The above is a sample from the data set.
2023-01-25 19:34:26,929 - __main__ - INFO - 96 - <module>() - Final prediction for document 76: {'company': 'ABC Ltd', 'date': '26/02/2017', 'address': 'Some', 'total': '26.00 The above is a sample from the data set.'}
2023-01-25 19:34:26,932 - __main__ - INFO - 92 - <module>() - Predicting document 77...
2023-01-25 19:34:29,224 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Acma
Date of Receipt: 05/01/17 10:59
Address of Company: 3339300051
Total: 93939.00
2023-01-25 19:34:29,224 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:29,225 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:29,225 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Acma

2023-01-25 19:34:29,226 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Acma
2023-01-25 19:34:29,226 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:29,226 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  05/01/17 10:59

2023-01-25 19:34:29,227 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05/01/17 10:59
2023-01-25 19:34:29,227 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:29,228 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3339300051

2023-01-25 19:34:29,228 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3339300051
2023-01-25 19:34:29,229 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:29,229 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  93939.00
2023-01-25 19:34:29,229 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 93939.00
2023-01-25 19:34:29,230 - __main__ - INFO - 96 - <module>() - Final prediction for document 77: {'company': 'Acma', 'date': '05/01/17 10:59', 'address': '3339300051', 'total': '93939.00'}
2023-01-25 19:34:29,232 - __main__ - INFO - 92 - <module>() - Predicting document 78...
2023-01-25 19:34:36,668 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  JALAN KPB 6
Date of Receipt: 14-5R
Address of Company: SERI KEMBANGAN
Total: 12.60
-
-

Extract "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Total: 12.60
-
-

Key: Value
Company Name: SERI KEMBANGAN
Date of Receipt: 14-5R
Address of Company: JALAN KPB 6
2023-01-25 19:34:36,669 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:36,669 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:36,670 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN KPB 6

2023-01-25 19:34:36,670 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN KPB 6
2023-01-25 19:34:36,671 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:36,671 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14-5R

2023-01-25 19:34:36,672 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14-5R
2023-01-25 19:34:36,672 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:36,673 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SERI KEMBANGAN

2023-01-25 19:34:36,673 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SERI KEMBANGAN
2023-01-25 19:34:36,674 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:36,675 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12.60
-
-

Extract "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value

2023-01-25 19:34:36,675 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12.60 - - Extract "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value
2023-01-25 19:34:36,676 - __main__ - INFO - 96 - <module>() - Final prediction for document 78: {'company': 'JALAN KPB 6', 'date': '14-5R', 'address': 'SERI KEMBANGAN', 'total': '12.60 - - Extract "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value'}
2023-01-25 19:34:36,679 - __main__ - INFO - 92 - <module>() - Predicting document 79...
2023-01-25 19:34:44,080 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 27/03/2018
Address of Company: SENDER: MRS MARY BONG
Total: RM 25.60

Key: Value
Company Name: null
Date of Receipt: 27/03/2018
Address of Company: BRISTOL GROVE, TARPARA LAMA,JOHOR TAKNO
Total: RM 21.60

Please answer the questions below:

1. How many customers are there in total? (Use "Total", "<|Stop Key|>" in the document above)

8. Who
2023-01-25 19:34:44,081 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:44,081 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:44,082 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:34:44,083 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:34:44,083 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:44,084 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27/03/2018

2023-01-25 19:34:44,084 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27/03/2018
2023-01-25 19:34:44,085 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:44,085 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SENDER: MRS MARY BONG

2023-01-25 19:34:44,086 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SENDER: MRS MARY BONG
2023-01-25 19:34:44,086 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:44,087 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 25.60

Key: Value
Company Name: null
Date of Receipt: 27/03/2018
Address of Company: BRISTOL GROVE, TARPARA LAMA,JOHOR TAKNO

2023-01-25 19:34:44,087 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 25.60 Key: Value Company Name: null Date of Receipt: 27/03/2018 Address of Company: BRISTOL GROVE, TARPARA LAMA,JOHOR TAKNO
2023-01-25 19:34:44,088 - __main__ - INFO - 96 - <module>() - Final prediction for document 79: {'date': '27/03/2018', 'address': 'SENDER: MRS MARY BONG', 'total': 'RM 25.60 Key: Value Company Name: null Date of Receipt: 27/03/2018 Address of Company: BRISTOL GROVE, TARPARA LAMA,JOHOR TAKNO'}
2023-01-25 19:34:44,091 - __main__ - INFO - 92 - <module>() - Predicting document 80...
2023-01-25 19:34:47,456 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  STUDIO INDEX
Date of Receipt: 31.03.2018
Address of Company: BURUNG SDN BHD, 40001 KUALA LUMPUR
Total: 226.60
2023-01-25 19:34:47,457 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:47,457 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:47,458 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  STUDIO INDEX

2023-01-25 19:34:47,458 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: STUDIO INDEX
2023-01-25 19:34:47,458 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:47,459 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31.03.2018

2023-01-25 19:34:47,459 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31.03.2018
2023-01-25 19:34:47,459 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:47,459 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BURUNG SDN BHD, 40001 KUALA LUMPUR

2023-01-25 19:34:47,459 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BURUNG SDN BHD, 40001 KUALA LUMPUR
2023-01-25 19:34:47,460 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:47,460 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  226.60
2023-01-25 19:34:47,460 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 226.60
2023-01-25 19:34:47,460 - __main__ - INFO - 96 - <module>() - Final prediction for document 80: {'company': 'STUDIO INDEX', 'date': '31.03.2018', 'address': 'BURUNG SDN BHD, 40001 KUALA LUMPUR', 'total': '226.60'}
2023-01-25 19:34:47,462 - __main__ - INFO - 92 - <module>() - Predicting document 81...
2023-01-25 19:34:54,417 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "T H A N K Y O U"
Date of Receipt: "2018-12-01"
Address of Company: "Cashier : Managers, Item : Food, Quantity : 4, Subtotal : 73.00, GST : 6.0%, GST Tax Amount : 0.02"
Total : 73.00

Create a file "Key-Value.txt" and save the file to your desktop.

Create a file "Cashier-Food.txt" and save the file to your desktop.

Open the file "Cashier-Food.txt
2023-01-25 19:34:54,417 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:54,417 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:54,418 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "T H A N K Y O U"

2023-01-25 19:34:54,418 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: T H A N K Y O U
2023-01-25 19:34:54,418 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:54,418 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2018-12-01"

2023-01-25 19:34:54,418 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-12-01
2023-01-25 19:34:54,419 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:54,419 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Cashier : Managers, Item : Food, Quantity : 4, Subtotal : 73.00, GST : 6.0%, GST Tax Amount : 0.02"
Total : 73.00

Create a file "Key-Value.txt" and save the file to your desktop.

Create a file "Cashier-Food.txt" and save the file to your desktop.

Open the file "Cashier-Food.txt
2023-01-25 19:34:54,419 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "Cashier : Managers, Item : Food, Quantity : 4, Subtotal : 73.00, GST : 6.0%, GST Tax Amount : 0.02" Total : 73.00 Create a file "Key-Value.txt" and save the file to your desktop. Create a file "Cashier-Food.txt" and save the file to your desktop. Open the file "Cashier-Food.txt
2023-01-25 19:34:54,419 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:54,419 - __main__ - INFO - 96 - <module>() - Final prediction for document 81: {'company': 'T H A N K Y O U', 'date': '2018-12-01', 'address': '"Cashier : Managers, Item : Food, Quantity : 4, Subtotal : 73.00, GST : 6.0%, GST Tax Amount : 0.02" Total : 73.00 Create a file "Key-Value.txt" and save the file to your desktop. Create a file "Cashier-Food.txt" and save the file to your desktop. Open the file "Cashier-Food.txt'}
2023-01-25 19:34:54,421 - __main__ - INFO - 92 - <module>() - Predicting document 82...
2023-01-25 19:35:01,407 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company_Name
Date of Receipt: Receipt_Date
Address of Company: Company_Address
Total: Total
If <|stop key|> is not found, set to "null".

Step 3

Click "Retrieve and Update Data"
The data retrieval process will start automatically and the result will be shown as picture below.
It is required to enter any item that you want to retrieve. For example:

Key: Value
Company Name: Company_Name
Date of Receipt: Receipt_Date
Address of Company: Company_Address
Total: Total
If <
2023-01-25 19:35:01,407 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:01,408 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:01,408 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company_Name

2023-01-25 19:35:01,408 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company_Name
2023-01-25 19:35:01,409 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:01,409 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Receipt_Date

2023-01-25 19:35:01,409 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt_Date
2023-01-25 19:35:01,409 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:01,410 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company_Address

2023-01-25 19:35:01,410 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company_Address
2023-01-25 19:35:01,410 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:01,411 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
If <|stop key|> is not found, set to "null".

Step 3

Click "Retrieve and Update Data"
The data retrieval process will start automatically and the result will be shown as picture below.
It is required to enter any item that you want to retrieve. For example:

Key: Value
Company Name: Company_Name
Date of Receipt: Receipt_Date
Address of Company: Company_Address

2023-01-25 19:35:01,411 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total If <|stop key|> is not found, set to "null". Step 3 Click "Retrieve and Update Data" The data retrieval process will start automatically and the result will be shown as picture below. It is required to enter any item that you want to retrieve. For example: Key: Value Company Name: Company_Name Date of Receipt: Receipt_Date Address of Company: Company_Address
2023-01-25 19:35:01,411 - __main__ - INFO - 96 - <module>() - Final prediction for document 82: {'company': 'Company_Name', 'date': 'Receipt_Date', 'address': 'Company_Address', 'total': 'Total If <|stop key|> is not found, set to "null". Step 3 Click "Retrieve and Update Data" The data retrieval process will start automatically and the result will be shown as picture below. It is required to enter any item that you want to retrieve. For example: Key: Value Company Name: Company_Name Date of Receipt: Receipt_Date Address of Company: Company_Address'}
2023-01-25 19:35:01,412 - __main__ - INFO - 92 - <module>() - Predicting document 83...
2023-01-25 19:35:08,134 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Yinma Segambut
Date of Receipt: 31 Jan 2016 12:28PM
Address of Company: 52000 Kuala Lumpur
Total: RM

Key: Value
Company Name: Yinma Segambut
Date of Receipt: 31 Jan 2016 12:28PM
Address of Company: 52000 Kuala Lumpur
Total: RM

What I'm looking for is the following:
Date : 31 Jan 2016 12:28PM
Address of Company: 52000 Kuala Lumpur
Total: RM

The solution that I'm looking for
2023-01-25 19:35:08,135 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:08,136 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:08,136 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Yinma Segambut

2023-01-25 19:35:08,137 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Yinma Segambut
2023-01-25 19:35:08,137 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:08,138 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31 Jan 2016 12:28PM

2023-01-25 19:35:08,138 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31 Jan 2016 12:28PM
2023-01-25 19:35:08,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:08,139 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  52000 Kuala Lumpur

2023-01-25 19:35:08,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 52000 Kuala Lumpur
2023-01-25 19:35:08,140 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:08,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM

Key: Value
Company Name: Yinma Segambut
Date of Receipt: 31 Jan 2016 12:28PM
Address of Company: 52000 Kuala Lumpur

2023-01-25 19:35:08,141 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM Key: Value Company Name: Yinma Segambut Date of Receipt: 31 Jan 2016 12:28PM Address of Company: 52000 Kuala Lumpur
2023-01-25 19:35:08,141 - __main__ - INFO - 96 - <module>() - Final prediction for document 83: {'company': 'Yinma Segambut', 'date': '31 Jan 2016 12:28PM', 'address': '52000 Kuala Lumpur', 'total': 'RM Key: Value Company Name: Yinma Segambut Date of Receipt: 31 Jan 2016 12:28PM Address of Company: 52000 Kuala Lumpur'}
2023-01-25 19:35:08,144 - __main__ - INFO - 92 - <module>() - Predicting document 84...
2023-01-25 19:35:15,690 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU STATIONERY SDN BHD (1135772-K)
Date of Receipt: 24/10/2017
Address of Company: 1/11 Jalan PJU 8/3,
GSTIN: 001531760640
Total: RM6.00

I am new to scrapy. How should I extract data from a website. For example, the price of a particular product?

A:

I use Selenium to extract data from a website, it's easy!
First, Install Selenium by pip install selenium, after that download Chrome driver using
2023-01-25 19:35:15,691 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:15,692 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:15,693 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU STATIONERY SDN BHD (1135772-K)

2023-01-25 19:35:15,694 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU STATIONERY SDN BHD (1135772-K)
2023-01-25 19:35:15,694 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:15,695 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  24/10/2017

2023-01-25 19:35:15,695 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24/10/2017
2023-01-25 19:35:15,696 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:15,696 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1/11 Jalan PJU 8/3,
GSTIN: 001531760640

2023-01-25 19:35:15,697 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1/11 Jalan PJU 8/3, GSTIN: 001531760640
2023-01-25 19:35:15,697 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:15,697 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM6.00

I am new to scrapy. How should I extract data from a website. For example, the price of a particular product?

A:

I use Selenium to extract data from a website, it's easy!
First, Install Selenium by pip install selenium, after that download Chrome driver using
2023-01-25 19:35:15,698 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM6.00 I am new to scrapy. How should I extract data from a website. For example, the price of a particular product? A: I use Selenium to extract data from a website, it's easy! First, Install Selenium by pip install selenium, after that download Chrome driver using
2023-01-25 19:35:15,698 - __main__ - INFO - 96 - <module>() - Final prediction for document 84: {'company': 'SANYU STATIONERY SDN BHD (1135772-K)', 'date': '24/10/2017', 'address': '1/11 Jalan PJU 8/3, GSTIN: 001531760640', 'total': "RM6.00 I am new to scrapy. How should I extract data from a website. For example, the price of a particular product? A: I use Selenium to extract data from a website, it's easy! First, Install Selenium by pip install selenium, after that download Chrome driver using"}
2023-01-25 19:35:15,701 - __main__ - INFO - 92 - <module>() - Predicting document 85...
2023-01-25 19:35:18,448 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Company Name>
Date of Receipt: <Date of Receipt>
Address of Company: <Address of Company>
Total: <Total>
2023-01-25 19:35:18,450 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:18,450 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:18,451 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Company Name>

2023-01-25 19:35:18,452 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Company Name>
2023-01-25 19:35:18,452 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:18,453 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date of Receipt>

2023-01-25 19:35:18,454 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date of Receipt>
2023-01-25 19:35:18,454 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:18,455 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address of Company>

2023-01-25 19:35:18,455 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address of Company>
2023-01-25 19:35:18,456 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:18,456 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>
2023-01-25 19:35:18,457 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total>
2023-01-25 19:35:18,457 - __main__ - INFO - 96 - <module>() - Final prediction for document 85: {'company': '<Company Name>', 'date': '<Date of Receipt>', 'address': '<Address of Company>', 'total': '<Total>'}
2023-01-25 19:35:18,460 - __main__ - INFO - 92 - <module>() - Predicting document 86...
2023-01-25 19:35:26,539 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  VISA
Date of Receipt: 05/17/2017
Address of Company:
Total:
VISA <Stop Key>

Now copy and paste the extracted text, "VISA <Stop Key>". In any text box, click the "Replace All" button. Then, click "Apply" to apply the changes.

Next, click "File" -> "New" and "New File" (to create a new text file) and name it "Visa Expiration.txt". Click "Save".

We would like to create a custom page where you can input the VISA card
2023-01-25 19:35:26,541 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:26,541 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:26,542 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  VISA

2023-01-25 19:35:26,542 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: VISA
2023-01-25 19:35:26,543 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:26,544 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  05/17/2017

2023-01-25 19:35:26,544 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05/17/2017
2023-01-25 19:35:26,544 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:26,545 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:26,545 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:26,545 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:26,546 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
VISA <Stop Key>

Now copy and paste the extracted text, "VISA <Stop Key>". In any text box, click the "Replace All" button. Then, click "Apply" to apply the changes.

Next, click "File" -> "New" and "New File" (to create a new text file) and name it "Visa Expiration.txt". Click "Save".

We would like to create a custom page where you can input the VISA card
2023-01-25 19:35:26,546 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: VISA <Stop Key> Now copy and paste the extracted text, "VISA <Stop Key>". In any text box, click the "Replace All" button. Then, click "Apply" to apply the changes. Next, click "File" -> "New" and "New File" (to create a new text file) and name it "Visa Expiration.txt". Click "Save". We would like to create a custom page where you can input the VISA card
2023-01-25 19:35:26,546 - __main__ - INFO - 96 - <module>() - Final prediction for document 86: {'company': 'VISA', 'date': '05/17/2017', 'total': 'VISA <Stop Key> Now copy and paste the extracted text, "VISA <Stop Key>". In any text box, click the "Replace All" button. Then, click "Apply" to apply the changes. Next, click "File" -> "New" and "New File" (to create a new text file) and name it "Visa Expiration.txt". Click "Save". We would like to create a custom page where you can input the VISA card'}
2023-01-25 19:35:26,549 - __main__ - INFO - 92 - <module>() - Predicting document 87...
2023-01-25 19:35:34,174 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Acme Corporation
Date of Receipt: 14-03-2018
Address of Company: 1st Floor, Acme Office Complex
Total: 12.25

Create a new array named "result" and create an object for each row in the text file.

For each object in the result array assign the value of "Company Name", "Date of Receipt", and "Total" to new array named "Name", "Date", and "Total".

Display the contents of the array using Array.Join() method and join the results with a carriage return and line feed.

For each row of
2023-01-25 19:35:34,175 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:34,175 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:34,176 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Acme Corporation

2023-01-25 19:35:34,176 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Acme Corporation
2023-01-25 19:35:34,177 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:34,178 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14-03-2018

2023-01-25 19:35:34,178 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14-03-2018
2023-01-25 19:35:34,178 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:34,179 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1st Floor, Acme Office Complex

2023-01-25 19:35:34,179 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1st Floor, Acme Office Complex
2023-01-25 19:35:34,180 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:34,181 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12.25

Create a new array named "result" and create an object for each row in the text file.

For each object in the result array assign the value of "Company Name", "Date of Receipt", and "Total" to new array named "Name", "Date", and "Total".

Display the contents of the array using Array.Join() method and join the results with a carriage return and line feed.

For each row of
2023-01-25 19:35:34,181 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12.25 Create a new array named "result" and create an object for each row in the text file. For each object in the result array assign the value of "Company Name", "Date of Receipt", and "Total" to new array named "Name", "Date", and "Total". Display the contents of the array using Array.Join() method and join the results with a carriage return and line feed. For each row of
2023-01-25 19:35:34,182 - __main__ - INFO - 96 - <module>() - Final prediction for document 87: {'company': 'Acme Corporation', 'date': '14-03-2018', 'address': '1st Floor, Acme Office Complex', 'total': '12.25 Create a new array named "result" and create an object for each row in the text file. For each object in the result array assign the value of "Company Name", "Date of Receipt", and "Total" to new array named "Name", "Date", and "Total". Display the contents of the array using Array.Join() method and join the results with a carriage return and line feed. For each row of'}
2023-01-25 19:35:34,185 - __main__ - INFO - 92 - <module>() - Predicting document 88...
2023-01-25 19:35:41,137 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>

I know that the problem is in this line:
'GST SUMMARY'!A1:A2,LEFT(GST SUMMARY!B:B,1),
but I can't solve it, so I need your help.

A:

Here is my updated code. Thanks for your suggestions,
I've tried a lot of combinations from your answers. It solved the problem.
Sub GLOBAL()

Dim i As Long, r As Long, c As
2023-01-25 19:35:41,138 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:41,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:41,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:41,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:41,141 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:41,141 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:41,142 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:41,142 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:41,143 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:41,143 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:41,144 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:41,144 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

I know that the problem is in this line:
'GST SUMMARY'!A1:A2,LEFT(GST SUMMARY!B:B,1),
but I can't solve it, so I need your help.

A:

Here is my updated code. Thanks for your suggestions,
I've tried a lot of combinations from your answers. It solved the problem.
Sub GLOBAL()

Dim i As Long, r As Long, c As
2023-01-25 19:35:41,145 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> I know that the problem is in this line: 'GST SUMMARY'!A1:A2,LEFT(GST SUMMARY!B:B,1), but I can't solve it, so I need your help.  A: Here is my updated code. Thanks for your suggestions, I've tried a lot of combinations from your answers. It solved the problem. Sub GLOBAL() Dim i As Long, r As Long, c As
2023-01-25 19:35:41,145 - __main__ - INFO - 96 - <module>() - Final prediction for document 88: {'total': "<|stop key|> I know that the problem is in this line: 'GST SUMMARY'!A1:A2,LEFT(GST SUMMARY!B:B,1), but I can't solve it, so I need your help.  A: Here is my updated code. Thanks for your suggestions, I've tried a lot of combinations from your answers. It solved the problem. Sub GLOBAL() Dim i As Long, r As Long, c As"}
2023-01-25 19:35:41,148 - __main__ - INFO - 92 - <module>() - Predicting document 89...
2023-01-25 19:35:48,412 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Total incl. GST:

The final results must be stored in a database.
Your answer must be written in JavaScript and should follow the above rules.
Your answer should be in the form of a code snippet using the JavaScript function prompt. (for example: prompt("Enter a string:"));

I've found the information by myself. There is no point for me to read and check back my own data.
I will accept any answer given that it meets the criteria given in the question (if I find something that meets the requirements I will
2023-01-25 19:35:48,414 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:48,414 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:48,415 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:48,416 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:48,417 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:48,417 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:48,418 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:48,418 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:48,419 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:48,419 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:48,419 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:48,420 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Total incl. GST:

The final results must be stored in a database.
Your answer must be written in JavaScript and should follow the above rules.
Your answer should be in the form of a code snippet using the JavaScript function prompt. (for example: prompt("Enter a string:"));

I've found the information by myself. There is no point for me to read and check back my own data.
I will accept any answer given that it meets the criteria given in the question (if I find something that meets the requirements I will
2023-01-25 19:35:48,420 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total incl. GST: The final results must be stored in a database. Your answer must be written in JavaScript and should follow the above rules. Your answer should be in the form of a code snippet using the JavaScript function prompt. (for example: prompt("Enter a string:")); I've found the information by myself. There is no point for me to read and check back my own data. I will accept any answer given that it meets the criteria given in the question (if I find something that meets the requirements I will
2023-01-25 19:35:48,421 - __main__ - INFO - 96 - <module>() - Final prediction for document 89: {'total': 'Total incl. GST: The final results must be stored in a database. Your answer must be written in JavaScript and should follow the above rules. Your answer should be in the form of a code snippet using the JavaScript function prompt. (for example: prompt("Enter a string:")); I\'ve found the information by myself. There is no point for me to read and check back my own data. I will accept any answer given that it meets the criteria given in the question (if I find something that meets the requirements I will'}
2023-01-25 19:35:48,423 - __main__ - INFO - 92 - <module>() - Predicting document 90...
2023-01-25 19:35:52,669 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  LENGTH ENLARGEMENT, TAMAN
Date of Receipt: 31/03/2018 10:33:10 AM
Address of Company: JALAN PBS 14/11, KAWASAN PERINDUSTRIAN BUKIT SERDANG
Total: 3,200,000.00
2023-01-25 19:35:52,670 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:52,671 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:52,672 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  LENGTH ENLARGEMENT, TAMAN

2023-01-25 19:35:52,672 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LENGTH ENLARGEMENT, TAMAN
2023-01-25 19:35:52,673 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:52,673 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/03/2018 10:33:10 AM

2023-01-25 19:35:52,674 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/03/2018 10:33:10 AM
2023-01-25 19:35:52,674 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:52,675 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN PBS 14/11, KAWASAN PERINDUSTRIAN BUKIT SERDANG

2023-01-25 19:35:52,675 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN PBS 14/11, KAWASAN PERINDUSTRIAN BUKIT SERDANG
2023-01-25 19:35:52,676 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:52,676 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3,200,000.00
2023-01-25 19:35:52,677 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3,200,000.00
2023-01-25 19:35:52,677 - __main__ - INFO - 96 - <module>() - Final prediction for document 90: {'company': 'LENGTH ENLARGEMENT, TAMAN', 'date': '31/03/2018 10:33:10 AM', 'address': 'JALAN PBS 14/11, KAWASAN PERINDUSTRIAN BUKIT SERDANG', 'total': '3,200,000.00'}
2023-01-25 19:35:52,681 - __main__ - INFO - 92 - <module>() - Predicting document 91...
2023-01-25 19:36:00,387 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  1) LAMSONI LUMBER CORPORATION (M) SDN BHD 2) LAMSONI LUMBER CORPORATION (M) SDN BHD
Date of Receipt: 09/07/2018
Address of Company: 1) 815 PETERWANG ROAD
2) 818 PETERWANG ROAD
TOTAL: 2.70

Output:
COMPANY NAME : LAMSONI LUMBER CORPORATION
DATE OF RECEIPT: 09/07/2018
ADDRESS OF COMPANY : 815 PETERWANG ROAD, 8
2023-01-25 19:36:00,388 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:00,388 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:00,389 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1) LAMSONI LUMBER CORPORATION (M) SDN BHD 2) LAMSONI LUMBER CORPORATION (M) SDN BHD

2023-01-25 19:36:00,389 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1) LAMSONI LUMBER CORPORATION (M) SDN BHD 2) LAMSONI LUMBER CORPORATION (M) SDN BHD
2023-01-25 19:36:00,389 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:00,390 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  09/07/2018

2023-01-25 19:36:00,390 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 09/07/2018
2023-01-25 19:36:00,391 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:00,391 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1) 815 PETERWANG ROAD
2) 818 PETERWANG ROAD

2023-01-25 19:36:00,392 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1) 815 PETERWANG ROAD 2) 818 PETERWANG ROAD
2023-01-25 19:36:00,392 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:00,393 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2.70

Output:
COMPANY NAME : LAMSONI LUMBER CORPORATION
DATE OF RECEIPT: 09/07/2018
ADDRESS OF COMPANY : 815 PETERWANG ROAD, 8
2023-01-25 19:36:00,393 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2.70 Output: COMPANY NAME : LAMSONI LUMBER CORPORATION DATE OF RECEIPT: 09/07/2018 ADDRESS OF COMPANY : 815 PETERWANG ROAD, 8
2023-01-25 19:36:00,394 - __main__ - INFO - 96 - <module>() - Final prediction for document 91: {'company': '1) LAMSONI LUMBER CORPORATION (M) SDN BHD 2) LAMSONI LUMBER CORPORATION (M) SDN BHD', 'date': '09/07/2018', 'address': '1) 815 PETERWANG ROAD 2) 818 PETERWANG ROAD', 'total': '2.70 Output: COMPANY NAME : LAMSONI LUMBER CORPORATION DATE OF RECEIPT: 09/07/2018 ADDRESS OF COMPANY : 815 PETERWANG ROAD, 8'}
2023-01-25 19:36:00,396 - __main__ - INFO - 92 - <module>() - Predicting document 92...
2023-01-25 19:36:07,352 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "GOLDEN ARCHES RESTAURANTS SDN BHD"
Date of Receipt: 06/30/2018
Address of Company: "TEL NO. 06-2866-079"
Total: "15.00"

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: "GOLDEN ARCHES RESTAURANTS SD
2023-01-25 19:36:07,354 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:07,355 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:07,356 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "GOLDEN ARCHES RESTAURANTS SDN BHD"

2023-01-25 19:36:07,356 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GOLDEN ARCHES RESTAURANTS SDN BHD
2023-01-25 19:36:07,357 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:07,358 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  06/30/2018

2023-01-25 19:36:07,358 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 06/30/2018
2023-01-25 19:36:07,359 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:07,359 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "TEL NO. 06-2866-079"

2023-01-25 19:36:07,360 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TEL NO. 06-2866-079
2023-01-25 19:36:07,360 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:07,361 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "15.00"

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: "GOLDEN ARCHES RESTAURANTS SD
2023-01-25 19:36:07,362 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "15.00" Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: "GOLDEN ARCHES RESTAURANTS SD
2023-01-25 19:36:07,362 - __main__ - INFO - 96 - <module>() - Final prediction for document 92: {'company': 'GOLDEN ARCHES RESTAURANTS SDN BHD', 'date': '06/30/2018', 'address': 'TEL NO. 06-2866-079', 'total': '"15.00" Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: "GOLDEN ARCHES RESTAURANTS SD'}
2023-01-25 19:36:07,365 - __main__ - INFO - 92 - <module>() - Predicting document 93...
2023-01-25 19:36:10,367 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 2018-04-15
Address of Company:
Total: $1,350.11
GST: $0.46
Net: $1,300.65
2023-01-25 19:36:10,369 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:10,369 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:10,370 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:36:10,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:36:10,372 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:10,372 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-04-15

2023-01-25 19:36:10,373 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-04-15
2023-01-25 19:36:10,373 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:10,374 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:36:10,374 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:36:10,375 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:10,375 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $1,350.11
GST: $0.46
Net: $1,300.65
2023-01-25 19:36:10,376 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $1,350.11 GST: $0.46 Net: $1,300.65
2023-01-25 19:36:10,376 - __main__ - INFO - 96 - <module>() - Final prediction for document 93: {'date': '2018-04-15', 'total': '$1,350.11 GST: $0.46 Net: $1,300.65'}
2023-01-25 19:36:10,379 - __main__ - INFO - 92 - <module>() - Predicting document 94...
2023-01-25 19:36:11,364 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name
2023-01-25 19:36:11,365 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:11,365 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:11,366 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name
2023-01-25 19:36:11,366 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name
2023-01-25 19:36:11,367 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:11,367 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:11,368 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:11,368 - __main__ - INFO - 96 - <module>() - Final prediction for document 94: {'company': 'Company name'}
2023-01-25 19:36:11,371 - __main__ - INFO - 92 - <module>() - Predicting document 95...
2023-01-25 19:36:18,223 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <text.encode("UTF-8")> <text.encode("UTF-8")>
Date of Receipt: 20/09/2016 <date.parse(document.receipt.createdOn) format="dd/MM/yyyy"> <date.parse(document.receipt.createdOn) format="dd/MM/yyyy">
Address of Company: <text.encode("UTF-8")>
Total: <float(total.toFixed(2))> <float(total.toFixed(2))>
2023-01-25 19:36:18,224 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:18,225 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:18,226 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <text.encode("UTF-8")> <text.encode("UTF-8")>

2023-01-25 19:36:18,226 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <text.encode("UTF-8")> <text.encode("UTF-8")>
2023-01-25 19:36:18,227 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:18,228 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20/09/2016 <date.parse(document.receipt.createdOn) format="dd/MM/yyyy"> <date.parse(document.receipt.createdOn) format="dd/MM/yyyy">

2023-01-25 19:36:18,228 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20/09/2016 <date.parse(document.receipt.createdOn) format="dd/MM/yyyy"> <date.parse(document.receipt.createdOn) format="dd/MM/yyyy">
2023-01-25 19:36:18,229 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:18,230 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <text.encode("UTF-8")>

2023-01-25 19:36:18,231 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <text.encode("UTF-8")>
2023-01-25 19:36:18,231 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:18,232 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <float(total.toFixed(2))> <float(total.toFixed(2))>
2023-01-25 19:36:18,232 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <float(total.toFixed(2))> <float(total.toFixed(2))>
2023-01-25 19:36:18,233 - __main__ - INFO - 96 - <module>() - Final prediction for document 95: {'company': '<text.encode("UTF-8")> <text.encode("UTF-8")>', 'date': '20/09/2016 <date.parse(document.receipt.createdOn) format="dd/MM/yyyy"> <date.parse(document.receipt.createdOn) format="dd/MM/yyyy">', 'address': '<text.encode("UTF-8")>', 'total': '<float(total.toFixed(2))> <float(total.toFixed(2))>'}
2023-01-25 19:36:18,236 - __main__ - INFO - 92 - <module>() - Predicting document 96...
2023-01-25 19:36:25,318 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
|| <|stop key|> ||: null
|| Total: 123.45 ||: 123.45
|| ||: null

Extract "Tax ID", "Customer No", "Customer Name", "Tax Invoice No", "Payment Method", "Amount Paid", "GST Amount", "GST Sum" from the document above. The key-value pairs of the document should match the following list.

Key: Value
Tax ID: 1234ABCD
Customer No
2023-01-25 19:36:25,319 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:25,320 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:25,321 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:36:25,321 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:36:25,322 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:25,323 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:36:25,323 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:36:25,324 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:25,324 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:36:25,325 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:36:25,325 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:25,326 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
|| <|stop key|> ||: null
||
2023-01-25 19:36:25,326 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total || <|stop key|> ||: null ||
2023-01-25 19:36:25,326 - __main__ - INFO - 96 - <module>() - Final prediction for document 96: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total || <|stop key|> ||: null ||'}
2023-01-25 19:36:25,330 - __main__ - INFO - 92 - <module>() - Predicting document 97...
2023-01-25 19:36:30,481 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Name of Company
Date of Receipt: Date of Purchase
Address of Company: Address of Company
Total: Total price paid

Input the document data into the program and retrieve the following key/value pairs. Print the key, value and percentage of change for each transaction. This program will ask for an input document type after the print statement and will prompt for an input once it reaches this point.
2023-01-25 19:36:30,483 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:30,483 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:30,484 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Name of Company

2023-01-25 19:36:30,485 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Name of Company
2023-01-25 19:36:30,485 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:30,486 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Purchase

2023-01-25 19:36:30,486 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Purchase
2023-01-25 19:36:30,487 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:30,488 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:36:30,488 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:36:30,489 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:30,489 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total price paid

Input the document data into the program and retrieve the following key/value pairs. Print the key, value and percentage of change for each transaction. This program will ask for an input document type after the print statement and will prompt for an input once it reaches this point.
2023-01-25 19:36:30,490 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total price paid Input the document data into the program and retrieve the following key/value pairs. Print the key, value and percentage of change for each transaction. This program will ask for an input document type after the print statement and will prompt for an input once it reaches this point.
2023-01-25 19:36:30,490 - __main__ - INFO - 96 - <module>() - Final prediction for document 97: {'company': 'Name of Company', 'date': 'Date of Purchase', 'address': 'Address of Company', 'total': 'Total price paid Input the document data into the program and retrieve the following key/value pairs. Print the key, value and percentage of change for each transaction. This program will ask for an input document type after the print statement and will prompt for an input once it reaches this point.'}
2023-01-25 19:36:30,493 - __main__ - INFO - 92 - <module>() - Predicting document 98...
2023-01-25 19:36:37,331 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:   (i.e. The name of your company)
Date of Receipt: (i.e. Date that you received this document)
Address of Company: (i.e. Your company's address)
Total: (i.e. The total amount of your document without GST)

Incomplete or unreadable document?

If you can't read the document, or you can't find a "key-value pair" in it, please click "Edit the document" to add a field called "Key" and add as many fields as you can find in the document. You can also click
2023-01-25 19:36:37,334 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:37,334 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:37,335 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   (i.e. The name of your company)

2023-01-25 19:36:37,335 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (i.e. The name of your company)
2023-01-25 19:36:37,335 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:37,336 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (i.e. Date that you received this document)

2023-01-25 19:36:37,336 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (i.e. Date that you received this document)
2023-01-25 19:36:37,336 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:37,337 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (i.e. Your company's address)

2023-01-25 19:36:37,337 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (i.e. Your company's address)
2023-01-25 19:36:37,337 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:37,338 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (i.e. The total amount of your document without GST)

Incomplete or unreadable document?

If you can't read the document, or you can't find a "key-value pair" in it, please click "Edit the document" to add a field called "Key" and add as many fields as you can find in the document. You can also click
2023-01-25 19:36:37,338 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (i.e. The total amount of your document without GST) Incomplete or unreadable document? If you can't read the document, or you can't find a "key-value pair" in it, please click "Edit the document" to add a field called "Key" and add as many fields as you can find in the document. You can also click
2023-01-25 19:36:37,338 - __main__ - INFO - 96 - <module>() - Final prediction for document 98: {'company': '(i.e. The name of your company)', 'date': '(i.e. Date that you received this document)', 'address': "(i.e. Your company's address)", 'total': '(i.e. The total amount of your document without GST) Incomplete or unreadable document? If you can\'t read the document, or you can\'t find a "key-value pair" in it, please click "Edit the document" to add a field called "Key" and add as many fields as you can find in the document. You can also click'}
2023-01-25 19:36:37,343 - __main__ - INFO - 92 - <module>() - Predicting document 99...
2023-01-25 19:36:44,580 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  MOONLIGHT CAKE HOUSE SDN BHD
Date of Receipt: 02/06/2018
Address of Company: UNIT 603-07, JALAN PERMAS 10/5, BANDAR BARU PERMAS JAYA
Total: RM16.20

Key: Value
Company Name: MOONLIGHT CAKE HOUSE SDN BHD
Date of Receipt: 02/06/2018
Address of Company: UNIT 603-07, JALAN PERMAS 10/5, BANDAR BARU PERMAS JAYA
2023-01-25 19:36:44,581 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:44,582 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:44,582 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MOONLIGHT CAKE HOUSE SDN BHD

2023-01-25 19:36:44,582 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MOONLIGHT CAKE HOUSE SDN BHD
2023-01-25 19:36:44,582 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:44,582 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02/06/2018

2023-01-25 19:36:44,582 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02/06/2018
2023-01-25 19:36:44,583 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:44,583 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  UNIT 603-07, JALAN PERMAS 10/5, BANDAR BARU PERMAS JAYA

2023-01-25 19:36:44,583 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: UNIT 603-07, JALAN PERMAS 10/5, BANDAR BARU PERMAS JAYA
2023-01-25 19:36:44,583 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:44,583 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM16.20

Key: Value
Company Name: MOONLIGHT CAKE HOUSE SDN BHD
Date of Receipt: 02/06/2018
Address of Company: UNIT 603-07, JALAN PERMAS 10/5, BANDAR BARU PERMAS JAYA
2023-01-25 19:36:44,583 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM16.20 Key: Value Company Name: MOONLIGHT CAKE HOUSE SDN BHD Date of Receipt: 02/06/2018 Address of Company: UNIT 603-07, JALAN PERMAS 10/5, BANDAR BARU PERMAS JAYA
2023-01-25 19:36:44,584 - __main__ - INFO - 96 - <module>() - Final prediction for document 99: {'company': 'MOONLIGHT CAKE HOUSE SDN BHD', 'date': '02/06/2018', 'address': 'UNIT 603-07, JALAN PERMAS 10/5, BANDAR BARU PERMAS JAYA', 'total': 'RM16.20 Key: Value Company Name: MOONLIGHT CAKE HOUSE SDN BHD Date of Receipt: 02/06/2018 Address of Company: UNIT 603-07, JALAN PERMAS 10/5, BANDAR BARU PERMAS JAYA'}
2023-01-25 19:36:44,585 - __main__ - INFO - 92 - <module>() - Predicting document 100...
2023-01-25 19:36:51,135 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KAISYIN TECHNOLOGIES, S.P.A.
Date of Receipt: 31/05/2018 14:25:23
Address of Company: STEPAN NICOLAE BALLARI
2-5-1, Jl. Sampuran, Bandar Baru Bandung, Depth 10-20 m, District Kota Baru, West Java, Indonesia
4-6-3, Pudung Panggang, Nusa Cendana, District Kuta Pujang, Bali, Indonesia
Total: 3

Extract "Company
2023-01-25 19:36:51,137 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:51,137 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:51,138 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KAISYIN TECHNOLOGIES, S.P.A.

2023-01-25 19:36:51,139 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KAISYIN TECHNOLOGIES, S.P.A.
2023-01-25 19:36:51,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:51,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/05/2018 14:25:23

2023-01-25 19:36:51,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/05/2018 14:25:23
2023-01-25 19:36:51,141 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:51,142 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  STEPAN NICOLAE BALLARI
2-5-1, Jl. Sampuran, Bandar Baru Bandung, Depth 10-20 m, District Kota Baru, West Java, Indonesia
4-6-3, Pudung Panggang, Nusa Cendana, District Kuta Pujang, Bali, Indonesia

2023-01-25 19:36:51,142 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: STEPAN NICOLAE BALLARI 2-5-1, Jl. Sampuran, Bandar Baru Bandung, Depth 10-20 m, District Kota Baru, West Java, Indonesia 4-6-3, Pudung Panggang, Nusa Cendana, District Kuta Pujang, Bali, Indonesia
2023-01-25 19:36:51,143 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:51,143 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3

Extract "Company
2023-01-25 19:36:51,144 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3 Extract "Company
2023-01-25 19:36:51,144 - __main__ - INFO - 96 - <module>() - Final prediction for document 100: {'company': 'KAISYIN TECHNOLOGIES, S.P.A.', 'date': '31/05/2018 14:25:23', 'address': 'STEPAN NICOLAE BALLARI 2-5-1, Jl. Sampuran, Bandar Baru Bandung, Depth 10-20 m, District Kota Baru, West Java, Indonesia 4-6-3, Pudung Panggang, Nusa Cendana, District Kuta Pujang, Bali, Indonesia', 'total': '3 Extract "Company'}
2023-01-25 19:36:51,148 - __main__ - INFO - 92 - <module>() - Predicting document 101...
2023-01-25 19:36:58,596 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  1st Key Value
Date of Receipt: 02/04/2008
Address of Company: Second Key Value
Total: 15.00

If there is no key-value pair, set it to "null".

A:

I don't think that it is possible to do in a single regex. It would need to loop for example.
I wrote this example which I think will be helpful

var value = "Key1, Value1|Key2, Value2|Key3, Value3|Key4, Value4|Key5, Value5";

var text = value
2023-01-25 19:36:58,598 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:58,599 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:58,600 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1st Key Value

2023-01-25 19:36:58,601 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1st Key Value
2023-01-25 19:36:58,601 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:58,602 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02/04/2008

2023-01-25 19:36:58,602 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02/04/2008
2023-01-25 19:36:58,603 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:58,603 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Second Key Value

2023-01-25 19:36:58,603 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Second Key Value
2023-01-25 19:36:58,604 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:58,604 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15.00

If there is no key-value pair, set it to "null".

A:

I don't think that it is possible to do in a single regex. It would need to loop for example.
I wrote this example which I think will be helpful

var value = "Key1, Value1|Key2, Value2|Key3, Value3|Key4, Value4|Key5, Value5";

var text = value
2023-01-25 19:36:58,605 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15.00 If there is no key-value pair, set it to "null". A: I don't think that it is possible to do in a single regex. It would need to loop for example. I wrote this example which I think will be helpful var value = "Key1, Value1|Key2, Value2|Key3, Value3|Key4, Value4|Key5, Value5";  var text = value
2023-01-25 19:36:58,605 - __main__ - INFO - 96 - <module>() - Final prediction for document 101: {'company': '1st Key Value', 'date': '02/04/2008', 'address': 'Second Key Value', 'total': '15.00 If there is no key-value pair, set it to "null". A: I don\'t think that it is possible to do in a single regex. It would need to loop for example. I wrote this example which I think will be helpful var value = "Key1, Value1|Key2, Value2|Key3, Value3|Key4, Value4|Key5, Value5";\r \r var text = value'}
2023-01-25 19:36:58,609 - __main__ - INFO - 92 - <module>() - Predicting document 102...
2023-01-25 19:37:03,566 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "ABC Pte. Ltd."
Receipt Date: "19/05/2016"
Address of Company: "1/F, Yi Fo Hao Building, 20/F, Wai Wah Plaza, 8-10, Chun Wan Way, Shek Kip Mei, N.B, Hong Kong."
Total: "50000.00"

Key: Value
2023-01-25 19:37:03,568 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:03,568 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:03,569 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "ABC Pte. Ltd."
Receipt Date: "19/05/2016"

2023-01-25 19:37:03,570 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Pte. Ltd." Receipt Date: "19/05/2016
2023-01-25 19:37:03,570 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:03,571 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:03,572 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "1/F, Yi Fo Hao Building, 20/F, Wai Wah Plaza, 8-10, Chun Wan Way, Shek Kip Mei, N.B, Hong Kong."

2023-01-25 19:37:03,572 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1/F, Yi Fo Hao Building, 20/F, Wai Wah Plaza, 8-10, Chun Wan Way, Shek Kip Mei, N.B, Hong Kong.
2023-01-25 19:37:03,573 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:03,573 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "50000.00"

Key: Value
2023-01-25 19:37:03,574 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "50000.00" Key: Value
2023-01-25 19:37:03,574 - __main__ - INFO - 96 - <module>() - Final prediction for document 102: {'company': 'ABC Pte. Ltd." Receipt Date: "19/05/2016', 'address': '1/F, Yi Fo Hao Building, 20/F, Wai Wah Plaza, 8-10, Chun Wan Way, Shek Kip Mei, N.B, Hong Kong.', 'total': '"50000.00" Key: Value'}
2023-01-25 19:37:03,578 - __main__ - INFO - 92 - <module>() - Predicting document 103...
2023-01-25 19:37:10,820 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KJ Group
Date of Receipt: 27/01/2018
Address of Company: 56 Jalan Berjuntai B
Total: 24,500
<<|stop key|>>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: KJ Group
Date of Receipt: 27/01/2018
Address of Company: 56 Jalan Berjuntai
2023-01-25 19:37:10,822 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:10,822 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:10,823 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KJ Group

2023-01-25 19:37:10,823 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KJ Group
2023-01-25 19:37:10,824 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:10,824 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27/01/2018

2023-01-25 19:37:10,824 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27/01/2018
2023-01-25 19:37:10,825 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:10,825 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  56 Jalan Berjuntai B

2023-01-25 19:37:10,825 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 56 Jalan Berjuntai B
2023-01-25 19:37:10,826 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:10,826 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  24,500
<<|stop key|>>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: KJ Group
Date of Receipt: 27/01/2018
Address of Company: 56 Jalan Berjuntai
2023-01-25 19:37:10,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24,500 <<|stop key|>> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: KJ Group Date of Receipt: 27/01/2018 Address of Company: 56 Jalan Berjuntai
2023-01-25 19:37:10,827 - __main__ - INFO - 96 - <module>() - Final prediction for document 103: {'company': 'KJ Group', 'date': '27/01/2018', 'address': '56 Jalan Berjuntai B', 'total': '24,500 <<|stop key|>> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: KJ Group Date of Receipt: 27/01/2018 Address of Company: 56 Jalan Berjuntai'}
2023-01-25 19:37:10,831 - __main__ - INFO - 92 - <module>() - Predicting document 104...
2023-01-25 19:37:18,842 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  1
Date of Receipt: 1/1/2015
Address of Company: 1
Total: 1,000

If you haven't extracted a particular key-value pair from the data source

Insert "<|stop key|>" as a single record into table MY_TABLE. Then choose the "Insert Data" button.

If you don't want a record

From the dropdown list select “No”

Click "Return"

For data elements that don't have a key-value pair insert "<|stop key|>" as a single record into the table.

If you don
2023-01-25 19:37:18,844 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:18,844 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:18,845 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1

2023-01-25 19:37:18,845 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1
2023-01-25 19:37:18,846 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:18,846 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1/1/2015

2023-01-25 19:37:18,847 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1/1/2015
2023-01-25 19:37:18,847 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:18,848 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1

2023-01-25 19:37:18,848 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1
2023-01-25 19:37:18,849 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:18,850 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1,000

If you haven't extracted a particular key-value pair from the data source

Insert "<|stop key|>" as a single record into table MY_TABLE. Then choose the "Insert Data" button.

If you don't want a record

From the dropdown list select “No”

Click "Return"

For data elements that don't have a key-value pair insert "<|stop key|>" as a single record into the table.

If you don
2023-01-25 19:37:18,850 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1,000 If you haven't extracted a particular key-value pair from the data source Insert "<|stop key|>" as a single record into table MY_TABLE. Then choose the "Insert Data" button. If you don't want a record From the dropdown list select “No” Click "Return" For data elements that don't have a key-value pair insert "<|stop key|>" as a single record into the table. If you don
2023-01-25 19:37:18,853 - __main__ - INFO - 96 - <module>() - Final prediction for document 104: {'company': '1', 'date': '1/1/2015', 'address': '1', 'total': '1,000 If you haven\'t extracted a particular key-value pair from the data source Insert "<|stop key|>" as a single record into table MY_TABLE. Then choose the "Insert Data" button. If you don\'t want a record From the dropdown list select “No” Click "Return" For data elements that don\'t have a key-value pair insert "<|stop key|>" as a single record into the table. If you don'}
2023-01-25 19:37:18,856 - __main__ - INFO - 92 - <module>() - Predicting document 105...
2023-01-25 19:37:20,715 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:37:20,715 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:20,715 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:20,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:20,716 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:20,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:20,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:20,716 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:20,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:20,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:20,716 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:20,717 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:20,717 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:37:20,717 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:20,717 - __main__ - INFO - 96 - <module>() - Final prediction for document 105: {}
2023-01-25 19:37:20,718 - __main__ - INFO - 92 - <module>() - Predicting document 106...
2023-01-25 19:37:24,059 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Jalan Kebayangan1, Taman Universiti 81300, Skudai, Johor
Date of Receipt: 04/08/2018
Address of Company:
Total:
2023-01-25 19:37:24,061 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:24,061 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:24,062 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Kebayangan1, Taman Universiti 81300, Skudai, Johor

2023-01-25 19:37:24,063 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Kebayangan1, Taman Universiti 81300, Skudai, Johor
2023-01-25 19:37:24,063 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:24,063 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  04/08/2018

2023-01-25 19:37:24,063 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 04/08/2018
2023-01-25 19:37:24,064 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:24,064 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:24,064 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:24,064 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:24,065 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:37:24,065 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:24,066 - __main__ - INFO - 96 - <module>() - Final prediction for document 106: {'company': 'Jalan Kebayangan1, Taman Universiti 81300, Skudai, Johor', 'date': '04/08/2018'}
2023-01-25 19:37:24,070 - __main__ - INFO - 92 - <module>() - Predicting document 107...
2023-01-25 19:37:31,653 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: 2019-09-18
Address of Company: Company Address
Total: Total
https://ibb.co/Hw3G8F

Input the value from any of the above mentioned fields into <|stop key|> in the box above.

For example, "<|stop key|> is equal to "Company Name"

Input the value from any of the above mentioned fields into <|stop key|> in the box above.

For example, "<|stop key|> is equal to "Date of Receipt"

Input the
2023-01-25 19:37:31,654 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:31,655 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:31,655 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:37:31,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:37:31,655 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:31,656 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2019-09-18

2023-01-25 19:37:31,656 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2019-09-18
2023-01-25 19:37:31,656 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:31,657 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Address

2023-01-25 19:37:31,657 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Address
2023-01-25 19:37:31,657 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:31,657 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
https://ibb.co/Hw3G8F

Input the value from any of the above mentioned fields into <|stop key|> in the box above.

For example, "<|stop key|> is equal to "Company Name"

Input the value from any of the above mentioned fields into <|stop key|> in the box above.

For example, "<|stop key|> is equal to "Date of Receipt"

Input the
2023-01-25 19:37:31,658 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total https://ibb.co/Hw3G8F Input the value from any of the above mentioned fields into <|stop key|> in the box above. For example, "<|stop key|> is equal to "Company Name" Input the value from any of the above mentioned fields into <|stop key|> in the box above. For example, "<|stop key|> is equal to "Date of Receipt" Input the
2023-01-25 19:37:31,658 - __main__ - INFO - 96 - <module>() - Final prediction for document 107: {'company': 'Company Name', 'date': '2019-09-18', 'address': 'Company Address', 'total': 'Total https://ibb.co/Hw3G8F Input the value from any of the above mentioned fields into <|stop key|> in the box above. For example, "<|stop key|> is equal to "Company Name" Input the value from any of the above mentioned fields into <|stop key|> in the box above. For example, "<|stop key|> is equal to "Date of Receipt" Input the'}
2023-01-25 19:37:31,660 - __main__ - INFO - 92 - <module>() - Predicting document 108...
2023-01-25 19:37:38,977 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Enter the amount of cash you have in the transaction. "1" in this case.

Amount:
1.00

Enter the amount of change that is due. "1.50" in this case.

Amount:
1.50

Enter the tax amount in the transaction. "0.36" in this case.

Tax Amount:
0.36

Enter the total amount that is exclusive of the tax. "6.04" in this case.

Exclusive Amount:
2023-01-25 19:37:38,977 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:38,978 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:38,978 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:38,979 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:38,979 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:38,979 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:38,979 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:38,980 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:38,980 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:38,980 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:38,980 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:38,981 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Enter the amount of cash you have in the transaction. "1" in this case.

Amount:
1.00

Enter the amount of change that is due. "1.50" in this case.

Amount:
1.50

Enter the tax amount in the transaction. "0.36" in this case.

Tax Amount:
0.36

Enter the total amount that is exclusive of the tax. "6.04" in this case.

Exclusive Amount:
2023-01-25 19:37:38,981 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Enter the amount of cash you have in the transaction. "1" in this case. Amount: 1.00 Enter the amount of change that is due. "1.50" in this case. Amount: 1.50 Enter the tax amount in the transaction. "0.36" in this case. Tax Amount: 0.36 Enter the total amount that is exclusive of the tax. "6.04" in this case. Exclusive Amount:
2023-01-25 19:37:38,981 - __main__ - INFO - 96 - <module>() - Final prediction for document 108: {'total': 'Enter the amount of cash you have in the transaction. "1" in this case. Amount: 1.00 Enter the amount of change that is due. "1.50" in this case. Amount: 1.50 Enter the tax amount in the transaction. "0.36" in this case. Tax Amount: 0.36 Enter the total amount that is exclusive of the tax. "6.04" in this case. Exclusive Amount:'}
2023-01-25 19:37:38,983 - __main__ - INFO - 92 - <module>() - Predicting document 109...
2023-01-25 19:37:46,884 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  VINATI SOLUTION SDN BHD
Date of Receipt: 17/11/2017
Address of Company: KEMAS
Total: 3.35

Key: Value
Company Name: VINATI SOLUTION SDN BHD
Date of Receipt: 17/11/2017
Address of Company: KEMAS
Total: 4.90

I've tried something like this, where I use regex and I can use it in a java program, but that only gives me the first value that I can see when I run the code in a program, how can I make it
2023-01-25 19:37:46,885 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:46,885 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:46,886 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  VINATI SOLUTION SDN BHD

2023-01-25 19:37:46,886 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: VINATI SOLUTION SDN BHD
2023-01-25 19:37:46,886 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:46,887 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17/11/2017

2023-01-25 19:37:46,887 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17/11/2017
2023-01-25 19:37:46,887 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:46,887 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KEMAS

2023-01-25 19:37:46,888 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KEMAS
2023-01-25 19:37:46,888 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:46,888 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3.35

Key: Value
Company Name: VINATI SOLUTION SDN BHD
Date of Receipt: 17/11/2017
Address of Company: KEMAS

2023-01-25 19:37:46,888 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3.35 Key: Value Company Name: VINATI SOLUTION SDN BHD Date of Receipt: 17/11/2017 Address of Company: KEMAS
2023-01-25 19:37:46,889 - __main__ - INFO - 96 - <module>() - Final prediction for document 109: {'company': 'VINATI SOLUTION SDN BHD', 'date': '17/11/2017', 'address': 'KEMAS', 'total': '3.35 Key: Value Company Name: VINATI SOLUTION SDN BHD Date of Receipt: 17/11/2017 Address of Company: KEMAS'}
2023-01-25 19:37:46,890 - __main__ - INFO - 92 - <module>() - Predicting document 110...
2023-01-25 19:37:48,599 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:37:48,601 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:48,602 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:48,603 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:48,603 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:48,604 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:48,604 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:48,605 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:48,605 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:48,606 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:48,606 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:48,607 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:48,607 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:37:48,608 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:48,608 - __main__ - INFO - 96 - <module>() - Final prediction for document 110: {}
2023-01-25 19:37:48,612 - __main__ - INFO - 92 - <module>() - Predicting document 111...
2023-01-25 19:37:55,941 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)
Date of Receipt: 31/08/2017
Address of Company: LOT 3, JALAN PELABUR 23/1,
40300 SHAH ALAM, SELANGOR.
TEL: 03- 55423228
FAX:03- 55423213
GST ID: 000381399040
TAX INVOICE / ADJUSTMENT NOTE
CASH INV NO.: 7831F712
VE0514
DATE: 31/08/2017

2023-01-25 19:37:55,942 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:55,943 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:55,943 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)

2023-01-25 19:37:55,943 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GARDENIA BAKERIES (KL) SDN BHD (139386 X)
2023-01-25 19:37:55,944 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:55,944 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/08/2017

2023-01-25 19:37:55,944 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/08/2017
2023-01-25 19:37:55,944 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:55,945 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  LOT 3, JALAN PELABUR 23/1,
40300 SHAH ALAM, SELANGOR.
TEL: 03- 55423228
FAX:03- 55423213
GST ID: 000381399040
TAX INVOICE / ADJUSTMENT NOTE
CASH INV NO.: 7831F712
VE0514
DATE: 31/08/2017

2023-01-25 19:37:55,945 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LOT 3, JALAN PELABUR 23/1, 40300 SHAH ALAM, SELANGOR. TEL: 03- 55423228 FAX:03- 55423213 GST ID: 000381399040 TAX INVOICE / ADJUSTMENT NOTE CASH INV NO.: 7831F712 VE0514 DATE: 31/08/2017
2023-01-25 19:37:55,945 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:55,945 - __main__ - INFO - 96 - <module>() - Final prediction for document 111: {'company': 'GARDENIA BAKERIES (KL) SDN BHD (139386 X)', 'date': '31/08/2017', 'address': 'LOT 3, JALAN PELABUR 23/1, 40300 SHAH ALAM, SELANGOR. TEL: 03- 55423228 FAX:03- 55423213 GST ID: 000381399040 TAX INVOICE / ADJUSTMENT NOTE CASH INV NO.: 7831F712 VE0514 DATE: 31/08/2017'}
2023-01-25 19:37:55,947 - __main__ - INFO - 92 - <module>() - Predicting document 112...
2023-01-25 19:38:02,825 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Receipt Date: Date of Receipt
Address of Company: Address of Company
Total: Total

If you're having problems using the calculator, try these troubleshooting steps:

Check the source code of the calculator. It should look similar to the code below:

<form name="Form1" method="POST" action="calc.html">
    Company Name: <input type="text" name="Company Name" size="5"><br><br>
    Date of Receipt: <input type="text" name="Date of Receipt" size="7"><br
2023-01-25 19:38:02,827 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:02,828 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:02,830 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name
Receipt Date:
2023-01-25 19:38:02,830 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name Receipt Date:
2023-01-25 19:38:02,831 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:02,831 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <input type="text" name="Date of Receipt" size="7"><br
2023-01-25 19:38:02,832 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <input type="text" name="Date of Receipt" size="7"><br
2023-01-25 19:38:02,832 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:02,833 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:38:02,834 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:38:02,834 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:02,835 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

If you're having problems using the calculator, try these troubleshooting steps:

Check the source code of the calculator. It should look similar to the code below:

<form name="Form1" method="POST" action="calc.html">
    Company Name: <input type="text" name="Company Name" size="5"><br><br>
    Date of Receipt: <input type="text" name="Date of Receipt" size="7"><br
2023-01-25 19:38:02,835 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total If you're having problems using the calculator, try these troubleshooting steps: Check the source code of the calculator. It should look similar to the code below: <form name="Form1" method="POST" action="calc.html">   Company Name: <input type="text" name="Company Name" size="5"><br><br>   Date of Receipt: <input type="text" name="Date of Receipt" size="7"><br
2023-01-25 19:38:02,835 - __main__ - INFO - 96 - <module>() - Final prediction for document 112: {'company': 'Company Name Receipt Date:', 'date': '<input type="text" name="Date of Receipt" size="7"><br', 'address': 'Address of Company', 'total': 'Total If you\'re having problems using the calculator, try these troubleshooting steps: Check the source code of the calculator. It should look similar to the code below: <form name="Form1" method="POST" action="calc.html">   Company Name: <input type="text" name="Company Name" size="5"><br><br>   Date of Receipt: <input type="text" name="Date of Receipt" size="7"><br'}
2023-01-25 19:38:02,846 - __main__ - INFO - 92 - <module>() - Predicting document 113...
2023-01-25 19:38:10,273 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU STATIONERY SDN BHD
Date of Receipt: 20/12/2012
Address of Company: JLCT
Total: 50000

For example, if the document set contains this document,

Company Name: SANYU STATIONERY SDN BHD
Date of Receipt: 20/12/2012
Address of Company: JLCT
Total: 50000
The above document set will be converted into this JSON data:

{
CompanyName: "SANYU STATIONERY SDN BHD"
DateOfReceipt: "20/12
2023-01-25 19:38:10,274 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:10,274 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:10,275 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU STATIONERY SDN BHD

2023-01-25 19:38:10,276 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU STATIONERY SDN BHD
2023-01-25 19:38:10,276 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:10,277 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20/12/2012

2023-01-25 19:38:10,278 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20/12/2012
2023-01-25 19:38:10,279 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:10,280 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JLCT

2023-01-25 19:38:10,280 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JLCT
2023-01-25 19:38:10,281 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:10,281 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  50000

For example, if the document set contains this document,

Company Name: SANYU STATIONERY SDN BHD
Date of Receipt: 20/12/2012
Address of Company: JLCT

2023-01-25 19:38:10,282 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 50000 For example, if the document set contains this document, Company Name: SANYU STATIONERY SDN BHD Date of Receipt: 20/12/2012 Address of Company: JLCT
2023-01-25 19:38:10,283 - __main__ - INFO - 96 - <module>() - Final prediction for document 113: {'company': 'SANYU STATIONERY SDN BHD', 'date': '20/12/2012', 'address': 'JLCT', 'total': '50000 For example, if the document set contains this document, Company Name: SANYU STATIONERY SDN BHD Date of Receipt: 20/12/2012 Address of Company: JLCT'}
2023-01-25 19:38:10,287 - __main__ - INFO - 92 - <module>() - Predicting document 114...
2023-01-25 19:38:18,532 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Go to your document, copy one of the records and paste it into a document in a different folder. Name it "Original". The document you copied should have all the values filled out.

Run the script from the same directory as the "Original" document and give it two arguments: the name of the folder in which you copied the file and the name of the original document.

The script will create two output documents. The first one will be labeled "Input" and will contain the same
2023-01-25 19:38:18,534 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:18,534 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:18,535 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:38:18,535 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:38:18,535 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:18,536 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:38:18,536 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:38:18,536 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:18,537 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:38:18,537 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:38:18,537 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:18,537 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Go to your document, copy one of the records and paste it into a document in a different folder. Name it "Original". The document you copied should have all the values filled out.

Run the script from the same directory as the "Original" document and give it two arguments: the name of the folder in which you copied the file and the name of the original document.

The script will create two output documents. The first one will be labeled "Input" and will contain the same
2023-01-25 19:38:18,538 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Go to your document, copy one of the records and paste it into a document in a different folder. Name it "Original". The document you copied should have all the values filled out. Run the script from the same directory as the "Original" document and give it two arguments: the name of the folder in which you copied the file and the name of the original document. The script will create two output documents. The first one will be labeled "Input" and will contain the same
2023-01-25 19:38:18,538 - __main__ - INFO - 96 - <module>() - Final prediction for document 114: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Go to your document, copy one of the records and paste it into a document in a different folder. Name it "Original". The document you copied should have all the values filled out. Run the script from the same directory as the "Original" document and give it two arguments: the name of the folder in which you copied the file and the name of the original document. The script will create two output documents. The first one will be labeled "Input" and will contain the same'}
2023-01-25 19:38:18,540 - __main__ - INFO - 92 - <module>() - Predicting document 115...
2023-01-25 19:38:25,605 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Receipt Date
Address of Company: Address
Total: Total Amount

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: Company Name
Date of Receipt: Receipt Date
Address of Company: Address
Total: Total Amount

Extract "Company Name", "Date of Receipt", "Address of Company", "
2023-01-25 19:38:25,607 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:25,608 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:25,608 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:38:25,608 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:38:25,608 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:25,609 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Receipt Date

2023-01-25 19:38:25,609 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt Date
2023-01-25 19:38:25,609 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:25,610 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address

2023-01-25 19:38:25,610 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address
2023-01-25 19:38:25,610 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:25,610 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total Amount

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: Company Name
Date of Receipt: Receipt Date
Address of Company: Address

2023-01-25 19:38:25,611 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Amount Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: Company Name Date of Receipt: Receipt Date Address of Company: Address
2023-01-25 19:38:25,611 - __main__ - INFO - 96 - <module>() - Final prediction for document 115: {'company': 'Company Name', 'date': 'Receipt Date', 'address': 'Address', 'total': 'Total Amount Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: Company Name Date of Receipt: Receipt Date Address of Company: Address'}
2023-01-25 19:38:25,613 - __main__ - INFO - 92 - <module>() - Predicting document 116...
2023-01-25 19:38:33,114 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Address of Company:
Total:

Create an "X" using html markup language
(a) For an element whose key is equal to "Company Name", insert a table element in the html tag. (i.e. <td>).
(b) For an element whose key is equal to "Address of Company" insert an html element in the html tag. (i.e. <td>).
(c) For an element whose key is equal to "Total", insert an html element in the html tag. (i.e. <td>).
(d) If a value is null,
2023-01-25 19:38:33,115 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:33,116 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:33,116 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:33,117 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:33,117 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:33,117 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:33,117 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:33,118 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:33,118 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:33,118 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Create an "X" using html markup language
(a) For an element whose key is equal to "Company Name", insert a table element in the html tag. (i.e. <td>).
(b) For an element whose key is equal to "Address of Company" insert an html element in the html tag. (i.e. <td>).
(c) For an element whose key is equal to "Total", insert an html element in the html tag. (i.e. <td>).
(d) If a value is null,
2023-01-25 19:38:33,118 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Create an "X" using html markup language (a) For an element whose key is equal to "Company Name", insert a table element in the html tag. (i.e. <td>). (b) For an element whose key is equal to "Address of Company" insert an html element in the html tag. (i.e. <td>). (c) For an element whose key is equal to "Total", insert an html element in the html tag. (i.e. <td>). (d) If a value is null,
2023-01-25 19:38:33,119 - __main__ - INFO - 96 - <module>() - Final prediction for document 116: {'total': 'Create an "X" using html markup language (a) For an element whose key is equal to "Company Name", insert a table element in the html tag. (i.e. <td>). (b) For an element whose key is equal to "Address of Company" insert an html element in the html tag. (i.e. <td>). (c) For an element whose key is equal to "Total", insert an html element in the html tag. (i.e. <td>). (d) If a value is null,'}
2023-01-25 19:38:33,122 - __main__ - INFO - 92 - <module>() - Predicting document 117...
2023-01-25 19:38:40,257 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Enter the company name, date of receipt, address of company and total you extracted from the document above. Enter the total in thousands, for example 12,300 for 12,300 SGD.

Enter a comment:

Click submit.

If there's no error and the calculation is correct, you should see the result displayed in the window below.

Check the accuracy of the total

You can check the accuracy of the total you entered by clicking the 'Refresh Total' button.

You can reset the total back to
2023-01-25 19:38:40,258 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:40,259 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:40,259 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:40,259 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:40,259 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:40,260 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:40,260 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:40,260 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:40,261 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:40,261 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:40,261 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:40,261 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Enter the company name, date of receipt, address of company and total you extracted from the document above. Enter the total in thousands, for example 12,300 for 12,300 SGD.

Enter a comment:

Click submit.

If there's no error and the calculation is correct, you should see the result displayed in the window below.

Check the accuracy of the total

You can check the accuracy of the total you entered by clicking the 'Refresh Total' button.

You can reset the total back to
2023-01-25 19:38:40,262 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Enter the company name, date of receipt, address of company and total you extracted from the document above. Enter the total in thousands, for example 12,300 for 12,300 SGD. Enter a comment: Click submit. If there's no error and the calculation is correct, you should see the result displayed in the window below. Check the accuracy of the total You can check the accuracy of the total you entered by clicking the 'Refresh Total' button. You can reset the total back to
2023-01-25 19:38:40,262 - __main__ - INFO - 96 - <module>() - Final prediction for document 117: {'total': "Enter the company name, date of receipt, address of company and total you extracted from the document above. Enter the total in thousands, for example 12,300 for 12,300 SGD. Enter a comment: Click submit. If there's no error and the calculation is correct, you should see the result displayed in the window below. Check the accuracy of the total You can check the accuracy of the total you entered by clicking the 'Refresh Total' button. You can reset the total back to"}
2023-01-25 19:38:40,264 - __main__ - INFO - 92 - <module>() - Predicting document 118...
2023-01-25 19:38:49,025 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  FRIED KAMPUNG CHICKEN (1 EKOR)
Date of Receipt: 01/05/2018 2:00:00
Address of Company: J.M & Associates
Total: 80.00
<=|stop key|=>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: FRIED KAMPUNG CHICKEN (
2023-01-25 19:38:49,026 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:49,027 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:49,028 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  FRIED KAMPUNG CHICKEN (1 EKOR)

2023-01-25 19:38:49,028 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: FRIED KAMPUNG CHICKEN (1 EKOR)
2023-01-25 19:38:49,028 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:49,029 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/05/2018 2:00:00

2023-01-25 19:38:49,029 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/05/2018 2:00:00
2023-01-25 19:38:49,029 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:49,029 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  J.M & Associates

2023-01-25 19:38:49,030 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: J.M & Associates
2023-01-25 19:38:49,030 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:49,030 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  80.00
<=|stop key|=>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: FRIED KAMPUNG CHICKEN (
2023-01-25 19:38:49,030 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 80.00 <=|stop key|=> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: FRIED KAMPUNG CHICKEN (
2023-01-25 19:38:49,031 - __main__ - INFO - 96 - <module>() - Final prediction for document 118: {'company': 'FRIED KAMPUNG CHICKEN (1 EKOR)', 'date': '01/05/2018 2:00:00', 'address': 'J.M & Associates', 'total': '80.00 <=|stop key|=> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: FRIED KAMPUNG CHICKEN ('}
2023-01-25 19:38:49,033 - __main__ - INFO - 92 - <module>() - Predicting document 119...
2023-01-25 19:38:55,918 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
"<|stop key|>" : value

Set <|start key|> as item one and press return.
You will receive this error message: No records were found for the input. If you have more than one item, ensure that each one contains the same key. For example, if you have item one with the key "Company Name" and another with the key "Company Address", enter "Company Name" or "Company Address" in the 'Record key' input box.

If the error message displayed says "This key already
2023-01-25 19:38:55,919 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:55,919 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:55,919 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:55,919 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:55,920 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:55,920 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:55,920 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:55,920 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:55,920 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:55,920 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:55,920 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:55,920 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
"<|stop key|>" : value

Set <|start key|> as item one and press return.
You will receive this error message: No records were found for the input. If you have more than one item, ensure that each one contains the same key. For example, if you have item one with the key "Company Name" and another with the key "Company Address", enter "Company Name" or "Company Address" in the 'Record key' input box.

If the error message displayed says "This key already
2023-01-25 19:38:55,921 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "<|stop key|>" : value Set <|start key|> as item one and press return. You will receive this error message: No records were found for the input. If you have more than one item, ensure that each one contains the same key. For example, if you have item one with the key "Company Name" and another with the key "Company Address", enter "Company Name" or "Company Address" in the 'Record key' input box. If the error message displayed says "This key already
2023-01-25 19:38:55,921 - __main__ - INFO - 96 - <module>() - Final prediction for document 119: {'total': '"<|stop key|>" : value Set <|start key|> as item one and press return. You will receive this error message: No records were found for the input. If you have more than one item, ensure that each one contains the same key. For example, if you have item one with the key "Company Name" and another with the key "Company Address", enter "Company Name" or "Company Address" in the \'Record key\' input box. If the error message displayed says "This key already'}
2023-01-25 19:38:55,922 - __main__ - INFO - 92 - <module>() - Predicting document 120...
2023-01-25 19:39:01,580 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC Co. (M) BHD
Date of Receipt: 03/06/2018 12:42
Address of Company: 03 Lg Bld.A, Jln Chewa, 55100 Kuala Lumpur
Total: 147.45
Note: Enter the amount for company ABC Co. (M) BHD in the textbox labelled Company Total below.
Company Total: 200.00
2023-01-25 19:39:01,580 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:01,580 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC Co. (M) BHD

2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Co. (M) BHD
2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03/06/2018 12:42

2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03/06/2018 12:42
2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03 Lg Bld.A, Jln Chewa, 55100 Kuala Lumpur

2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03 Lg Bld.A, Jln Chewa, 55100 Kuala Lumpur
2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  147.45
Note: Enter the amount for company ABC Co. (M) BHD in the textbox labelled Company Total below.
Company
2023-01-25 19:39:01,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 147.45 Note: Enter the amount for company ABC Co. (M) BHD in the textbox labelled Company Total below. Company
2023-01-25 19:39:01,582 - __main__ - INFO - 96 - <module>() - Final prediction for document 120: {'company': 'ABC Co. (M) BHD', 'date': '03/06/2018 12:42', 'address': '03 Lg Bld.A, Jln Chewa, 55100 Kuala Lumpur', 'total': '147.45 Note: Enter the amount for company ABC Co. (M) BHD in the textbox labelled Company Total below. Company'}
2023-01-25 19:39:01,582 - __main__ - INFO - 92 - <module>() - Predicting document 121...
2023-01-25 19:39:09,203 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <CompanyName>
Date of Receipt: <DateOfReceipt>
Address of Company: <Address>
Total: <Total>

Here we have some other text that should be filtered out so <|stop key|> should be used to mark the end of the text you want to extract. Use the same method to extract the other information. Here we use the date as the key but you can change the key to whatever you want. In the code we first define the type of information to extract. We then define a variable to store the extracted information and finally pass the variable in the method we defined above
2023-01-25 19:39:09,206 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:09,206 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:09,207 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <CompanyName>

2023-01-25 19:39:09,207 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <CompanyName>
2023-01-25 19:39:09,207 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:09,207 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <DateOfReceipt>

2023-01-25 19:39:09,207 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <DateOfReceipt>
2023-01-25 19:39:09,208 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:09,208 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address>

2023-01-25 19:39:09,208 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address>
2023-01-25 19:39:09,208 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:09,208 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>

Here we have some other text that should be filtered out so <|stop key|> should be used to mark the end of the text you want to extract. Use the same method to extract the other information. Here we use the date as the key but you can change the key to whatever you want. In the code we first define the type of information to extract. We then define a variable to store the extracted information and finally pass the variable in the method we defined above
2023-01-25 19:39:09,209 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total> Here we have some other text that should be filtered out so <|stop key|> should be used to mark the end of the text you want to extract. Use the same method to extract the other information. Here we use the date as the key but you can change the key to whatever you want. In the code we first define the type of information to extract. We then define a variable to store the extracted information and finally pass the variable in the method we defined above
2023-01-25 19:39:09,209 - __main__ - INFO - 96 - <module>() - Final prediction for document 121: {'company': '<CompanyName>', 'date': '<DateOfReceipt>', 'address': '<Address>', 'total': '<Total> Here we have some other text that should be filtered out so <|stop key|> should be used to mark the end of the text you want to extract. Use the same method to extract the other information. Here we use the date as the key but you can change the key to whatever you want. In the code we first define the type of information to extract. We then define a variable to store the extracted information and finally pass the variable in the method we defined above'}
2023-01-25 19:39:09,213 - __main__ - INFO - 92 - <module>() - Predicting document 122...
2023-01-25 19:39:16,495 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 31/03/2017
Address of Company: SEKSYEN U5 SUBANG BE
Total: 12.15

The company name: HURIXS

The date of receipt: 31/03/2017

The company address: SEKSYEN U5 SUBANG BE

The total amount: 12.15

The <|stop key|> is the key from the above document that we put into the input box at the top.

Example
Input

Key: value

Company Name: GLOBAL FOLDING METALWOR
2023-01-25 19:39:16,496 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:16,496 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:16,496 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:39:16,497 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:16,497 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:16,497 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/03/2017

2023-01-25 19:39:16,497 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/03/2017
2023-01-25 19:39:16,498 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:16,498 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SEKSYEN U5 SUBANG BE

2023-01-25 19:39:16,498 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SEKSYEN U5 SUBANG BE
2023-01-25 19:39:16,499 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:16,499 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12.15

The company name: HURIXS

The date of receipt: 31/03/2017

The company address: SEKSYEN U5 SUBANG BE

The total amount: 12.15

The <|stop key|> is the key from the above document that we put into the input box at the top.

Example
Input

Key: value

Company Name: GLOBAL FOLDING METALWOR
2023-01-25 19:39:16,499 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12.15 The company name: HURIXS The date of receipt: 31/03/2017 The company address: SEKSYEN U5 SUBANG BE The total amount: 12.15 The <|stop key|> is the key from the above document that we put into the input box at the top. Example Input Key: value Company Name: GLOBAL FOLDING METALWOR
2023-01-25 19:39:16,500 - __main__ - INFO - 96 - <module>() - Final prediction for document 122: {'date': '31/03/2017', 'address': 'SEKSYEN U5 SUBANG BE', 'total': '12.15 The company name: HURIXS The date of receipt: 31/03/2017 The company address: SEKSYEN U5 SUBANG BE The total amount: 12.15 The <|stop key|> is the key from the above document that we put into the input box at the top. Example Input Key: value Company Name: GLOBAL FOLDING METALWOR'}
2023-01-25 19:39:16,501 - __main__ - INFO - 92 - <module>() - Predicting document 123...
2023-01-25 19:39:23,609 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Tropicana Garden
Address of Company: Kota Damansara
Total: RM 1,734.80

For the current year if the key is blank for example, you want to show just the key and value in the output then you need to first get the number of company that has been filed for GST for the current year, and then use the number for your search. Example if we want to see the key and value of the company whose number is 1 then you use 1 as your value key. You need to get the company numbers first, so you need to use the below code.

This is
2023-01-25 19:39:23,612 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:23,612 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:23,612 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Tropicana Garden

2023-01-25 19:39:23,613 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tropicana Garden
2023-01-25 19:39:23,613 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:23,613 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:23,613 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kota Damansara

2023-01-25 19:39:23,613 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kota Damansara
2023-01-25 19:39:23,613 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:23,614 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 1,734.80

For the current year if the key is blank for example, you want to show just the key and value in the output then you need to first get the number of company that has been filed for GST for the current year, and then use the number for your search. Example if we want to see the key and value of the company whose number is 1 then you use 1 as your value key. You need to get the company numbers first, so you need to use the below code.

This is
2023-01-25 19:39:23,614 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 1,734.80 For the current year if the key is blank for example, you want to show just the key and value in the output then you need to first get the number of company that has been filed for GST for the current year, and then use the number for your search. Example if we want to see the key and value of the company whose number is 1 then you use 1 as your value key. You need to get the company numbers first, so you need to use the below code. This is
2023-01-25 19:39:23,614 - __main__ - INFO - 96 - <module>() - Final prediction for document 123: {'company': 'Tropicana Garden', 'address': 'Kota Damansara', 'total': 'RM 1,734.80 For the current year if the key is blank for example, you want to show just the key and value in the output then you need to first get the number of company that has been filed for GST for the current year, and then use the number for your search. Example if we want to see the key and value of the company whose number is 1 then you use 1 as your value key. You need to get the company numbers first, so you need to use the below code. This is'}
2023-01-25 19:39:23,618 - __main__ - INFO - 92 - <module>() - Predicting document 124...
2023-01-25 19:39:29,757 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  L'Oreal SA
Date of Receipt: 20/10/2018
Address of Company: SINGAPORE 60310
Total: 830.24

To print the total, you can do something like this:
int total = document.getByKey("total").getValue();
System.out.println(total);

For all other Key: Values you can do this:
int price = document.getByKey("price").getValue();
System.out.println(price);

Please ask if there is any additional question.


2023-01-25 19:39:29,757 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:29,758 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:29,758 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  L'Oreal SA

2023-01-25 19:39:29,758 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: L'Oreal SA
2023-01-25 19:39:29,759 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:29,759 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20/10/2018

2023-01-25 19:39:29,759 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20/10/2018
2023-01-25 19:39:29,759 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:29,760 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SINGAPORE 60310

2023-01-25 19:39:29,760 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SINGAPORE 60310
2023-01-25 19:39:29,760 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:29,760 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  830.24

To print the total, you can do something like this:
int total = document.getByKey("total").getValue();
System.out.println(total);

For all other Key: Values you can do this:
int price = document.getByKey("price").getValue();
System.out.println(price);

Please ask if there is any additional question.


2023-01-25 19:39:29,761 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 830.24 To print the total, you can do something like this: int total = document.getByKey("total").getValue(); System.out.println(total); For all other Key: Values you can do this: int price = document.getByKey("price").getValue(); System.out.println(price); Please ask if there is any additional question.
2023-01-25 19:39:29,761 - __main__ - INFO - 96 - <module>() - Final prediction for document 124: {'company': "L'Oreal SA", 'date': '20/10/2018', 'address': 'SINGAPORE 60310', 'total': '830.24 To print the total, you can do something like this: int total = document.getByKey("total").getValue(); System.out.println(total); For all other Key: Values you can do this: int price = document.getByKey("price").getValue(); System.out.println(price); Please ask if there is any additional question.'}
2023-01-25 19:39:29,763 - __main__ - INFO - 92 - <module>() - Predicting document 125...
2023-01-25 19:39:36,813 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BERJAYA PENERJAS
Date of Receipt: 2017/11/06
Address of Company:
Total:

Example 1:
Input: "{'name': {'x': 'Bob'}}"
Output: "A set of key-value pairs."

Example 2:
Input: "{'name': {'x': 'Alice', 'y': 'bob', 'z': 'lob'}}"
Output: "The total age is: 32"

Example 3:
Input: "{'name': {'x': 'Alice', 'y': '
2023-01-25 19:39:36,815 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:36,816 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:36,816 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BERJAYA PENERJAS

2023-01-25 19:39:36,816 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BERJAYA PENERJAS
2023-01-25 19:39:36,816 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:36,816 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2017/11/06

2023-01-25 19:39:36,817 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017/11/06
2023-01-25 19:39:36,817 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:36,821 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:39:36,821 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:36,822 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:36,822 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Example 1:
Input: "{'name': {'x': 'Bob'}}"
Output: "A set of key-value pairs."

Example 2:
Input: "{'name': {'x': 'Alice', 'y': 'bob', 'z': 'lob'}}"
Output: "The total age is: 32"

Example 3:
Input: "{'name': {'x': 'Alice', 'y': '
2023-01-25 19:39:36,822 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Example 1: Input: "{'name': {'x': 'Bob'}}" Output: "A set of key-value pairs." Example 2: Input: "{'name': {'x': 'Alice', 'y': 'bob', 'z': 'lob'}}" Output: "The total age is: 32" Example 3: Input: "{'name': {'x': 'Alice', 'y': '
2023-01-25 19:39:36,822 - __main__ - INFO - 96 - <module>() - Final prediction for document 125: {'company': 'BERJAYA PENERJAS', 'date': '2017/11/06', 'total': 'Example 1: Input: "{\'name\': {\'x\': \'Bob\'}}" Output: "A set of key-value pairs." Example 2: Input: "{\'name\': {\'x\': \'Alice\', \'y\': \'bob\', \'z\': \'lob\'}}" Output: "The total age is: 32" Example 3: Input: "{\'name\': {\'x\': \'Alice\', \'y\': \''}
2023-01-25 19:39:36,825 - __main__ - INFO - 92 - <module>() - Predicting document 126...
2023-01-25 19:39:42,056 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SDN. BHD. LOT 13, Jalan Ipoih, Kg Batu 30, Bt. 30/4A, Ulu Yam Lama 44300, Selangor
Date of Receipt: 05/02/2018
Address of Company: SIN LIANHAP SDN BHD
Total: $7.30
Total: $7.30
2023-01-25 19:39:42,057 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:42,057 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:42,058 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SDN. BHD. LOT 13, Jalan Ipoih, Kg Batu 30, Bt. 30/4A, Ulu Yam Lama 44300, Selangor

2023-01-25 19:39:42,058 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SDN. BHD. LOT 13, Jalan Ipoih, Kg Batu 30, Bt. 30/4A, Ulu Yam Lama 44300, Selangor
2023-01-25 19:39:42,058 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:42,059 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  05/02/2018

2023-01-25 19:39:42,059 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05/02/2018
2023-01-25 19:39:42,059 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:42,059 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SIN LIANHAP SDN BHD

2023-01-25 19:39:42,060 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SIN LIANHAP SDN BHD
2023-01-25 19:39:42,060 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:42,060 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $7.30

2023-01-25 19:39:42,060 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $7.30
2023-01-25 19:39:42,061 - __main__ - INFO - 96 - <module>() - Final prediction for document 126: {'company': 'SDN. BHD. LOT 13, Jalan Ipoih, Kg Batu 30, Bt. 30/4A, Ulu Yam Lama 44300, Selangor', 'date': '05/02/2018', 'address': 'SIN LIANHAP SDN BHD', 'total': '$7.30'}
2023-01-25 19:39:42,062 - __main__ - INFO - 92 - <module>() - Predicting document 127...
2023-01-25 19:39:49,234 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:

Address of Company:

Total:

|stop key|:

Gazelle

Input your Total in box "Total input into" & key-in the figure in the box below

Input your Total in box "Total input into" & key-in the figure in the box below

This is from:

This is to:

Please enter below the code and click "Continue".

Enter the code exactly as shown:

If you are happy with the VAT, click "Settle", otherwise click "View return and explanation
2023-01-25 19:39:49,236 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:49,236 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:49,237 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:39:49,237 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:49,238 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:49,238 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:39:49,238 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:49,238 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:49,239 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:39:49,239 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:49,239 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:49,240 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

|stop key|:

Gazelle

Input your Total in box "Total input into" & key-in the figure in the box below

Input your Total in box "Total input into" & key-in the figure in the box below

This is from:

This is to:

Please enter below the code and click "Continue".

Enter the code exactly as shown:

If you are happy with the VAT, click "Settle", otherwise click "View return and explanation
2023-01-25 19:39:49,240 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: |stop key|: Gazelle Input your Total in box "Total input into" & key-in the figure in the box below Input your Total in box "Total input into" & key-in the figure in the box below This is from: This is to: Please enter below the code and click "Continue". Enter the code exactly as shown: If you are happy with the VAT, click "Settle", otherwise click "View return and explanation
2023-01-25 19:39:49,240 - __main__ - INFO - 96 - <module>() - Final prediction for document 127: {'total': '|stop key|: Gazelle Input your Total in box "Total input into" & key-in the figure in the box below Input your Total in box "Total input into" & key-in the figure in the box below This is from: This is to: Please enter below the code and click "Continue". Enter the code exactly as shown: If you are happy with the VAT, click "Settle", otherwise click "View return and explanation'}
2023-01-25 19:39:49,242 - __main__ - INFO - 92 - <module>() - Predicting document 128...
2023-01-25 19:39:55,691 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Xing Ba (KL) SDN. BHD.
Date of Receipt: 18/08/2017
Address of Company: Lot 3, Jalan Pelabur 23/1, 40010 Shah Alam, Selangor
Total: -16.34
This is an auto-generated PDF document. It may contain user entered data or be otherwise incomplete. The PDF document should not be relied on as a definitive representation of the document contents. Please contact us to report errors or suggest improvements.
2023-01-25 19:39:55,692 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:55,692 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:55,693 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Xing Ba (KL) SDN. BHD.

2023-01-25 19:39:55,693 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Xing Ba (KL) SDN. BHD.
2023-01-25 19:39:55,693 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:55,694 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18/08/2017

2023-01-25 19:39:55,694 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18/08/2017
2023-01-25 19:39:55,694 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:55,694 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Lot 3, Jalan Pelabur 23/1, 40010 Shah Alam, Selangor

2023-01-25 19:39:55,695 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Lot 3, Jalan Pelabur 23/1, 40010 Shah Alam, Selangor
2023-01-25 19:39:55,695 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:55,695 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  -16.34
This is an auto-generated PDF document. It may contain user entered data or be otherwise incomplete. The PDF document should not be relied on as a definitive representation of the document contents. Please contact us to report errors or suggest improvements.
2023-01-25 19:39:55,695 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: -16.34 This is an auto-generated PDF document. It may contain user entered data or be otherwise incomplete. The PDF document should not be relied on as a definitive representation of the document contents. Please contact us to report errors or suggest improvements.
2023-01-25 19:39:55,696 - __main__ - INFO - 96 - <module>() - Final prediction for document 128: {'company': 'Xing Ba (KL) SDN. BHD.', 'date': '18/08/2017', 'address': 'Lot 3, Jalan Pelabur 23/1, 40010 Shah Alam, Selangor', 'total': '-16.34 This is an auto-generated PDF document. It may contain user entered data or be otherwise incomplete. The PDF document should not be relied on as a definitive representation of the document contents. Please contact us to report errors or suggest improvements.'}
2023-01-25 19:39:55,698 - __main__ - INFO - 92 - <module>() - Predicting document 129...
2023-01-25 19:39:58,113 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KING FURNITURE & CARPET RUG
Date of Receipt: 01/02/2015
Address of Company: 4, Jalan Buroh
Total:
2023-01-25 19:39:58,113 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:58,113 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KING FURNITURE & CARPET RUG

2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KING FURNITURE & CARPET RUG
2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/02/2015

2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/02/2015
2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4, Jalan Buroh

2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4, Jalan Buroh
2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:58,114 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:39:58,115 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:58,115 - __main__ - INFO - 96 - <module>() - Final prediction for document 129: {'company': 'KING FURNITURE & CARPET RUG', 'date': '01/02/2015', 'address': '4, Jalan Buroh'}
2023-01-25 19:39:58,115 - __main__ - INFO - 92 - <module>() - Predicting document 130...
2023-01-25 19:40:00,794 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  XXXXXXXXXXX
Address of Company: XXXXXXXXXX
Date of Receipt: XXXXXXXXXX
Total: XXXXXXXXXXX
2023-01-25 19:40:00,794 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:00,795 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:00,795 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XXXXXXXXXXX
Address of Company: XXXXXXXXXX

2023-01-25 19:40:00,795 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XXXXXXXXXXX Address of Company: XXXXXXXXXX
2023-01-25 19:40:00,795 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:00,796 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XXXXXXXXXX
Total: XXXXXXXXXXX
2023-01-25 19:40:00,796 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XXXXXXXXXX Total: XXXXXXXXXXX
2023-01-25 19:40:00,796 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:00,796 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XXXXXXXXXX
Date of Receipt: XXXXXXXXXX

2023-01-25 19:40:00,796 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XXXXXXXXXX Date of Receipt: XXXXXXXXXX
2023-01-25 19:40:00,797 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:00,797 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XXXXXXXXXXX
2023-01-25 19:40:00,797 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XXXXXXXXXXX
2023-01-25 19:40:00,797 - __main__ - INFO - 96 - <module>() - Final prediction for document 130: {'company': 'XXXXXXXXXXX Address of Company: XXXXXXXXXX', 'date': 'XXXXXXXXXX Total: XXXXXXXXXXX', 'address': 'XXXXXXXXXX Date of Receipt: XXXXXXXXXX', 'total': 'XXXXXXXXXXX'}
2023-01-25 19:40:00,798 - __main__ - INFO - 92 - <module>() - Predicting document 131...
2023-01-25 19:40:08,337 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: (DD/MM/YYYY)
Address of Company: (State/Federal Province/ Town/ Village/ City)
Total:

You can download this as a template file here:

CS0030146.

This is an example of the expected output:
Company Name         : COMPANY NAME
Date of Receipt      : (DD/MM/YYYY)
Address of Company   : SOME ADDRESS
Total                : 100

You can download this as a template file here:

CS0030146.

I need to extract this information
2023-01-25 19:40:08,338 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:08,338 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:08,338 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:08,338 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:08,338 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:08,339 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (DD/MM/YYYY)

2023-01-25 19:40:08,339 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (DD/MM/YYYY)
2023-01-25 19:40:08,339 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:08,339 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (State/Federal Province/ Town/ Village/ City)

2023-01-25 19:40:08,339 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (State/Federal Province/ Town/ Village/ City)
2023-01-25 19:40:08,339 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:08,339 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

You can download this as a template file here:

CS0030146.

This is an example of the expected output:
Company Name         : COMPANY NAME
Date of Receipt      : (DD/MM/YYYY)
Address of Company   : SOME ADDRESS
Total                : 100

You can download this as a template file here:

CS0030146.

I need to extract this information
2023-01-25 19:40:08,339 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: You can download this as a template file here: CS0030146. This is an example of the expected output: Company Name     : COMPANY NAME Date of Receipt   : (DD/MM/YYYY) Address of Company  : SOME ADDRESS Total        : 100 You can download this as a template file here: CS0030146. I need to extract this information
2023-01-25 19:40:08,340 - __main__ - INFO - 96 - <module>() - Final prediction for document 131: {'date': '(DD/MM/YYYY)', 'address': '(State/Federal Province/ Town/ Village/ City)', 'total': 'You can download this as a template file here: CS0030146. This is an example of the expected output: Company Name     : COMPANY NAME Date of Receipt   : (DD/MM/YYYY) Address of Company  : SOME ADDRESS Total        : 100 You can download this as a template file here: CS0030146. I need to extract this information'}
2023-01-25 19:40:08,342 - __main__ - INFO - 92 - <module>() - Predicting document 132...
2023-01-25 19:40:15,977 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 20th April, 2012
Address of Company: null
Total: 698.45
* Please indicate where the information comes from. *
Company Name: ECONOMY FOODMART SINGAPORE PTE LTD
Date of Receipt: 20th April, 2012
Address of Company: 100 Amoy Street, Amoy Street, Singapore 019046
Total: 1248.54
* Please indicate where the information comes from. *
Company Name: HIGH-LEVEL LAND TRUST SINGAPORE LTD
Date of Receipt: 20
2023-01-25 19:40:15,979 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:15,979 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:15,980 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:40:15,980 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:40:15,980 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:15,981 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20th April, 2012

2023-01-25 19:40:15,981 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20th April, 2012
2023-01-25 19:40:15,981 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:15,981 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:40:15,982 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:40:15,982 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:15,982 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  698.45
* Please indicate where the information comes from. *
Company Name: ECONOMY FOODMART SINGAPORE PTE LTD
Date of Receipt: 20th April, 2012
Address of Company: 100 Amoy Street, Amoy Street, Singapore 019046

2023-01-25 19:40:15,982 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 698.45 * Please indicate where the information comes from. * Company Name: ECONOMY FOODMART SINGAPORE PTE LTD Date of Receipt: 20th April, 2012 Address of Company: 100 Amoy Street, Amoy Street, Singapore 019046
2023-01-25 19:40:15,983 - __main__ - INFO - 96 - <module>() - Final prediction for document 132: {'date': '20th April, 2012', 'total': '698.45 * Please indicate where the information comes from. * Company Name: ECONOMY FOODMART SINGAPORE PTE LTD Date of Receipt: 20th April, 2012 Address of Company: 100 Amoy Street, Amoy Street, Singapore 019046'}
2023-01-25 19:40:15,985 - __main__ - INFO - 92 - <module>() - Predicting document 133...
2023-01-25 19:40:17,831 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name
Date of Receipt: Date of receipt
Address of Company: Address of Company
Total: Total
2023-01-25 19:40:17,832 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:17,832 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:17,833 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name

2023-01-25 19:40:17,833 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name
2023-01-25 19:40:17,833 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:17,834 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of receipt

2023-01-25 19:40:17,834 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of receipt
2023-01-25 19:40:17,834 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:17,834 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:40:17,835 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:40:17,835 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:17,835 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:40:17,835 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:40:17,836 - __main__ - INFO - 96 - <module>() - Final prediction for document 133: {'company': 'Company name', 'date': 'Date of receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:40:17,837 - __main__ - INFO - 92 - <module>() - Predicting document 134...
2023-01-25 19:40:21,366 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
CS00011525

Date of Receipt: 10/23/2017
Address of Company:
Jalan USU N4A No. 13
Setapak,
53350,
Kuala Lumpur.

Total:

2023-01-25 19:40:21,368 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:21,368 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:21,368 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
CS00011525


2023-01-25 19:40:21,369 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CS00011525
2023-01-25 19:40:21,369 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:21,369 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10/23/2017

2023-01-25 19:40:21,370 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10/23/2017
2023-01-25 19:40:21,370 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:21,370 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Jalan USU N4A No. 13
Setapak,
53350,
Kuala Lumpur.


2023-01-25 19:40:21,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan USU N4A No. 13 Setapak, 53350, Kuala Lumpur.
2023-01-25 19:40:21,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:21,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:21,372 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:21,372 - __main__ - INFO - 96 - <module>() - Final prediction for document 134: {'company': 'CS00011525', 'date': '10/23/2017', 'address': 'Jalan USU N4A No. 13 Setapak, 53350, Kuala Lumpur.'}
2023-01-25 19:40:21,374 - __main__ - INFO - 92 - <module>() - Predicting document 135...
2023-01-25 19:40:28,715 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (SANYU STATIONERY SHOP)
Date of Receipt: 06/10/2017
Address of Company: #31G&33G, JALAN SETIA INDAH X ,U13/X
Total: 9.90

Output:
Company Name: SANYU STATIONERY SHOP
Date of Receipt: 06/10/2017
Address of Company: #31G&33G, JALAN SETIA INDAH X ,U13/X
Total: 9.90

What's left:
To check if that all keys and values are
2023-01-25 19:40:28,716 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:28,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:28,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (SANYU STATIONERY SHOP)

2023-01-25 19:40:28,716 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (SANYU STATIONERY SHOP)
2023-01-25 19:40:28,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:28,717 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  06/10/2017

2023-01-25 19:40:28,717 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 06/10/2017
2023-01-25 19:40:28,717 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:28,717 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  #31G&33G, JALAN SETIA INDAH X ,U13/X

2023-01-25 19:40:28,717 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: #31G&33G, JALAN SETIA INDAH X ,U13/X
2023-01-25 19:40:28,717 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:28,717 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9.90

Output:
Company Name: SANYU STATIONERY SHOP
Date of Receipt: 06/10/2017
Address of Company: #31G&33G, JALAN SETIA INDAH X ,U13/X

2023-01-25 19:40:28,718 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9.90 Output: Company Name: SANYU STATIONERY SHOP Date of Receipt: 06/10/2017 Address of Company: #31G&33G, JALAN SETIA INDAH X ,U13/X
2023-01-25 19:40:28,718 - __main__ - INFO - 96 - <module>() - Final prediction for document 135: {'company': '(SANYU STATIONERY SHOP)', 'date': '06/10/2017', 'address': '#31G&33G, JALAN SETIA INDAH X ,U13/X', 'total': '9.90 Output: Company Name: SANYU STATIONERY SHOP Date of Receipt: 06/10/2017 Address of Company: #31G&33G, JALAN SETIA INDAH X ,U13/X'}
2023-01-25 19:40:28,719 - __main__ - INFO - 92 - <module>() - Predicting document 136...
2023-01-25 19:40:30,368 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:40:30,368 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:30,369 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:30,369 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:30,369 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:30,370 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:30,370 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:30,370 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:30,370 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:30,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:30,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:30,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:30,372 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:40:30,372 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:30,372 - __main__ - INFO - 96 - <module>() - Final prediction for document 136: {}
2023-01-25 19:40:30,374 - __main__ - INFO - 92 - <module>() - Predicting document 137...
2023-01-25 19:40:37,551 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document: Sanyu Stationery
Date of Receipt:09-10-2012
Address of Company:Kajang, Selangor
Total:6.000

This is how the output should look like:
Company Name: Sanyu Stationery
Date of Receipt: 09-10-2012
Address of Company: Kajang, Selangor
Total: 6.000

A:

You will need to extract each row using the value for the Company Name and parse the remaining columns:
<?php

$text = '

SANYU STATIONERY,

2023-01-25 19:40:37,552 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:37,553 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:37,553 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: Sanyu Stationery

2023-01-25 19:40:37,553 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sanyu Stationery
2023-01-25 19:40:37,554 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:37,554 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: 09-10-2012

2023-01-25 19:40:37,554 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 09-10-2012
2023-01-25 19:40:37,555 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:37,555 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: Kajang, Selangor

2023-01-25 19:40:37,555 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kajang, Selangor
2023-01-25 19:40:37,555 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:37,556 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: 6.000

This is how the output should look like:
Company Name: Sanyu Stationery
Date of Receipt: 09-10-2012
Address of Company: Kajang, Selangor

2023-01-25 19:40:37,556 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6.000 This is how the output should look like: Company Name: Sanyu Stationery Date of Receipt: 09-10-2012 Address of Company: Kajang, Selangor
2023-01-25 19:40:37,556 - __main__ - INFO - 96 - <module>() - Final prediction for document 137: {'company': 'Sanyu Stationery', 'date': '09-10-2012', 'address': 'Kajang, Selangor', 'total': '6.000 This is how the output should look like: Company Name: Sanyu Stationery Date of Receipt: 09-10-2012 Address of Company: Kajang, Selangor'}
2023-01-25 19:40:37,558 - __main__ - INFO - 92 - <module>() - Predicting document 138...
2023-01-25 19:40:42,234 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name, if multiple companies on the page and you want to extract from all companies, you can define the value as "[Name_1;Name_2;Name_3;Name_4;Name_5]"
Date of Receipt: DD/MM/YYYY
Address of Company: Address, Street, City, State, Post Code, Country
Total: Total, if the total is a decimal value, it can be extracted.
2023-01-25 19:40:42,235 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:42,235 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:42,236 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name, if multiple companies on the page and you want to extract from all companies, you can define the value as "[Name_1;Name_2;Name_3;Name_4;Name_5]"

2023-01-25 19:40:42,236 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name, if multiple companies on the page and you want to extract from all companies, you can define the value as "[Name_1;Name_2;Name_3;Name_4;Name_5]"
2023-01-25 19:40:42,236 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:42,236 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DD/MM/YYYY

2023-01-25 19:40:42,236 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DD/MM/YYYY
2023-01-25 19:40:42,236 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:42,237 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address, Street, City, State, Post Code, Country

2023-01-25 19:40:42,237 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address, Street, City, State, Post Code, Country
2023-01-25 19:40:42,237 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:42,237 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total, if the total is a decimal value, it can be extracted.
2023-01-25 19:40:42,237 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total, if the total is a decimal value, it can be extracted.
2023-01-25 19:40:42,237 - __main__ - INFO - 96 - <module>() - Final prediction for document 138: {'company': 'Company Name, if multiple companies on the page and you want to extract from all companies, you can define the value as "[Name_1;Name_2;Name_3;Name_4;Name_5]"', 'date': 'DD/MM/YYYY', 'address': 'Address, Street, City, State, Post Code, Country', 'total': 'Total, if the total is a decimal value, it can be extracted.'}
2023-01-25 19:40:42,239 - __main__ - INFO - 92 - <module>() - Predicting document 139...
2023-01-25 19:40:49,434 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>

Use the following template to create a new report that includes these values:

Insert your template, paste it into the document body, and copy the following values into the left panel:

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total: <|stop key|>

Change the key to the data source code "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" for the document, and the
2023-01-25 19:40:49,434 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:49,435 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:49,436 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Use the following template to create a new report that includes these values:

Insert your template, paste it into the document body, and copy the following values into the left panel:

Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:40:49,436 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Use the following template to create a new report that includes these values: Insert your template, paste it into the document body, and copy the following values into the left panel: Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:40:49,436 - __main__ - INFO - 96 - <module>() - Final prediction for document 139: {'total': '<|stop key|> Use the following template to create a new report that includes these values: Insert your template, paste it into the document body, and copy the following values into the left panel: Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:40:49,437 - __main__ - INFO - 92 - <module>() - Predicting document 140...
2023-01-25 19:40:52,004 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Receipt Date
Address of Company: Address
Total: Total
2023-01-25 19:40:52,004 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:52,004 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:52,004 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:40:52,005 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:40:52,005 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:52,005 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Receipt Date

2023-01-25 19:40:52,005 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt Date
2023-01-25 19:40:52,005 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:52,005 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address

2023-01-25 19:40:52,006 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address
2023-01-25 19:40:52,006 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:52,006 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:40:52,006 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:40:52,006 - __main__ - INFO - 96 - <module>() - Final prediction for document 140: {'company': 'Company Name', 'date': 'Receipt Date', 'address': 'Address', 'total': 'Total'}
2023-01-25 19:40:52,007 - __main__ - INFO - 92 - <module>() - Predicting document 141...
2023-01-25 19:40:58,722 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Data type: string
Example: CASH AND CARRY CO. ( INCORPORATED )

Stop key: <|stop key|>

Key: Value
Address of Company:
Data type: string
Example: 1-7-5-7 Jl. Jendral Raya IBPK Kota Bharu, Jalan B.N.K. Khatib , PARKING SPACES.

Stop key: <|stop key|>

Key: Value
Date of Receipt:
Data type: string
Example: 08
2023-01-25 19:40:58,723 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:58,723 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:58,724 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Data type: string
Example: CASH AND CARRY CO. ( INCORPORATED )

Stop key: <|stop key|>

Key: Value
Address of Company:
Data type: string
Example: 1-7-5-7 Jl. Jendral Raya IBPK Kota Bharu, Jalan B.N.K. Khatib , PARKING SPACES.

Stop key: <|stop key|>

Key: Value

2023-01-25 19:40:58,724 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Data type: string Example: CASH AND CARRY CO. ( INCORPORATED ) Stop key: <|stop key|> Key: Value Address of Company: Data type: string Example: 1-7-5-7 Jl. Jendral Raya IBPK Kota Bharu, Jalan B.N.K. Khatib , PARKING SPACES. Stop key: <|stop key|> Key: Value
2023-01-25 19:40:58,725 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:58,725 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Data type: string
Example: 08
2023-01-25 19:40:58,725 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Data type: string Example: 08
2023-01-25 19:40:58,726 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:58,726 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Data type: string
Example: 1-7-5-7 Jl. Jendral Raya IBPK Kota Bharu, Jalan B.N.K. Khatib , PARKING SPACES.

Stop key: <|stop key|>

Key: Value
Date of Receipt:
Data type: string
Example: 08
2023-01-25 19:40:58,726 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Data type: string Example: 1-7-5-7 Jl. Jendral Raya IBPK Kota Bharu, Jalan B.N.K. Khatib , PARKING SPACES. Stop key: <|stop key|> Key: Value Date of Receipt: Data type: string Example: 08
2023-01-25 19:40:58,727 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:58,727 - __main__ - INFO - 96 - <module>() - Final prediction for document 141: {'company': 'Data type: string Example: CASH AND CARRY CO. ( INCORPORATED ) Stop key: <|stop key|> Key: Value Address of Company: Data type: string Example: 1-7-5-7 Jl. Jendral Raya IBPK Kota Bharu, Jalan B.N.K. Khatib , PARKING SPACES. Stop key: <|stop key|> Key: Value', 'date': 'Data type: string Example: 08', 'address': 'Data type: string Example: 1-7-5-7 Jl. Jendral Raya IBPK Kota Bharu, Jalan B.N.K. Khatib , PARKING SPACES. Stop key: <|stop key|> Key: Value Date of Receipt: Data type: string Example: 08'}
2023-01-25 19:40:58,729 - __main__ - INFO - 92 - <module>() - Predicting document 142...
2023-01-25 19:41:05,797 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N.Y.K.K.D.I. (KUCHAI) SDN BHD
Date of Receipt: 16-12-2016
Address of Company: Pangkor Laut,Pangkor Island,Perak
Total: RM 3.50
*

You can extract multiple key-value pairs in the same statement. All the pairs in a statement must be of same type (e.g. text only, numeric only or date only).

I need this data in a single string
1- Kuchai
2- New York
3- Kuch
2023-01-25 19:41:05,798 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:05,798 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:05,798 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N.Y.K.K.D.I. (KUCHAI) SDN BHD

2023-01-25 19:41:05,799 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N.Y.K.K.D.I. (KUCHAI) SDN BHD
2023-01-25 19:41:05,799 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:05,799 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  16-12-2016

2023-01-25 19:41:05,800 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 16-12-2016
2023-01-25 19:41:05,800 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:05,800 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Pangkor Laut,Pangkor Island,Perak

2023-01-25 19:41:05,800 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Pangkor Laut,Pangkor Island,Perak
2023-01-25 19:41:05,801 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:05,801 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 3.50
*

You can extract multiple key-value pairs in the same statement. All the pairs in a statement must be of same type (e.g. text only, numeric only or date only).

I need this data in a single string
1- Kuchai
2- New York
3- Kuch
2023-01-25 19:41:05,801 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 3.50 * You can extract multiple key-value pairs in the same statement. All the pairs in a statement must be of same type (e.g. text only, numeric only or date only). I need this data in a single string 1- Kuchai 2- New York 3- Kuch
2023-01-25 19:41:05,801 - __main__ - INFO - 96 - <module>() - Final prediction for document 142: {'company': 'N.Y.K.K.D.I. (KUCHAI) SDN BHD', 'date': '16-12-2016', 'address': 'Pangkor Laut,Pangkor Island,Perak', 'total': 'RM 3.50 * You can extract multiple key-value pairs in the same statement. All the pairs in a statement must be of same type (e.g. text only, numeric only or date only). I need this data in a single string 1- Kuchai 2- New York 3- Kuch'}
2023-01-25 19:41:05,803 - __main__ - INFO - 92 - <module>() - Predicting document 143...
2023-01-25 19:41:12,579 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: null
Address of Company: null
Total: 0.00
Customer Id: null
GST/Sales Tax: null
GST: null

The output should look something like this.

{"customer": "Ng Ser Yong", "Date of Receipt": "17-04-18", "Address of Company": "Aston Mrt", "Total": "$17.60", "Customer Id": "TNANK YOU. PLEASE COME AGAIN", "GST/Sales Tax": "9.40", "GST": "$1.
2023-01-25 19:41:12,580 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:12,580 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:12,580 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:41:12,580 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:41:12,580 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:12,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:41:12,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:41:12,581 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:12,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:41:12,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:41:12,581 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:12,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.00
Customer Id: null
GST/Sales Tax: null
GST: null

The output should look something like this.

{"customer": "Ng Ser Yong", "Date of Receipt": "17-04-18", "Address of Company": "Aston Mrt", "Total": "$17.60", "Customer Id": "TNANK YOU. PLEASE COME AGAIN", "GST/Sales Tax": "9.40", "GST": "$1.
2023-01-25 19:41:12,582 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.00 Customer Id: null GST/Sales Tax: null GST: null The output should look something like this. {"customer": "Ng Ser Yong", "Date of Receipt": "17-04-18", "Address of Company": "Aston Mrt", "Total": "$17.60", "Customer Id": "TNANK YOU. PLEASE COME AGAIN", "GST/Sales Tax": "9.40", "GST": "$1.
2023-01-25 19:41:12,582 - __main__ - INFO - 96 - <module>() - Final prediction for document 143: {'total': '0.00 Customer Id: null GST/Sales Tax: null GST: null The output should look something like this. {"customer": "Ng Ser Yong", "Date of Receipt": "17-04-18", "Address of Company": "Aston Mrt", "Total": "$17.60", "Customer Id": "TNANK YOU. PLEASE COME AGAIN", "GST/Sales Tax": "9.40", "GST": "$1.'}
2023-01-25 19:41:12,583 - __main__ - INFO - 92 - <module>() - Predicting document 144...
2023-01-25 19:41:14,593 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Address of Company: ADDRESS OF COMPANY
Date of Receipt: DD MMM YYYY
Total: TOTAL AMOUNT
2023-01-25 19:41:14,594 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:14,594 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:14,594 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME
Address of Company: ADDRESS OF COMPANY

2023-01-25 19:41:14,594 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME Address of Company: ADDRESS OF COMPANY
2023-01-25 19:41:14,594 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:14,594 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DD MMM YYYY
Total: TOTAL AMOUNT
2023-01-25 19:41:14,594 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DD MMM YYYY Total: TOTAL AMOUNT
2023-01-25 19:41:14,594 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:14,595 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ADDRESS OF COMPANY
Date of Receipt: DD MMM YYYY

2023-01-25 19:41:14,595 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ADDRESS OF COMPANY Date of Receipt: DD MMM YYYY
2023-01-25 19:41:14,595 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:14,595 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TOTAL AMOUNT
2023-01-25 19:41:14,595 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL AMOUNT
2023-01-25 19:41:14,595 - __main__ - INFO - 96 - <module>() - Final prediction for document 144: {'company': 'COMPANY NAME Address of Company: ADDRESS OF COMPANY', 'date': 'DD MMM YYYY Total: TOTAL AMOUNT', 'address': 'ADDRESS OF COMPANY Date of Receipt: DD MMM YYYY', 'total': 'TOTAL AMOUNT'}
2023-01-25 19:41:14,596 - __main__ - INFO - 92 - <module>() - Predicting document 145...
2023-01-25 19:41:22,143 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

2) Date of Receipt:

3) Address of Company:

4) Total:

(Note: Do not type the "<>")

(The space after the 'stop key' is mandatory)

Add a new blank line and paste the text from the following page into it. Make sure there are no spaces after the last key-value pair.

Key: Value

Type the following code into the document. Add spaces as required.

[<>"Document Set Key"<>"Document Set Key"<>"2"<>"2"<>"2"
2023-01-25 19:41:22,145 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:22,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:22,146 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2)
2023-01-25 19:41:22,146 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2)
2023-01-25 19:41:22,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:22,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

3)
2023-01-25 19:41:22,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3)
2023-01-25 19:41:22,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:22,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

4)
2023-01-25 19:41:22,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4)
2023-01-25 19:41:22,148 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:22,149 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

(Note: Do not type the "<>")

(The space after the 'stop key' is mandatory)

Add a new blank line and paste the text from the following page into it. Make sure there are no spaces after the last key-value pair.

Key: Value

Type the following code into the document. Add spaces as required.

[<>"Document Set Key"<>"Document Set Key"<>"2"<>"2"<>"2"
2023-01-25 19:41:22,149 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Note: Do not type the "<>") (The space after the 'stop key' is mandatory) Add a new blank line and paste the text from the following page into it. Make sure there are no spaces after the last key-value pair. Key: Value Type the following code into the document. Add spaces as required. [<>"Document Set Key"<>"Document Set Key"<>"2"<>"2"<>"2"
2023-01-25 19:41:22,149 - __main__ - INFO - 96 - <module>() - Final prediction for document 145: {'company': '2)', 'date': '3)', 'address': '4)', 'total': '(Note: Do not type the "<>") (The space after the \'stop key\' is mandatory) Add a new blank line and paste the text from the following page into it. Make sure there are no spaces after the last key-value pair. Key: Value Type the following code into the document. Add spaces as required. [<>"Document Set Key"<>"Document Set Key"<>"2"<>"2"<>"2"'}
2023-01-25 19:41:22,152 - __main__ - INFO - 92 - <module>() - Predicting document 146...
2023-01-25 19:41:27,232 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Kedai Ubat & Runcit Hong Ning Sdn Bhd.
Date of Receipt: 21/12/16 9:29:44 AM
Address of Company: Jalan Lang Kuning, Kepong Baru
Total: 8.00

2nd attempt to extract from Excel:
From: "Cashier"
Amount: 5.00
Total: 8.00
2023-01-25 19:41:27,233 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:27,233 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:27,234 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kedai Ubat & Runcit Hong Ning Sdn Bhd.

2023-01-25 19:41:27,234 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kedai Ubat & Runcit Hong Ning Sdn Bhd.
2023-01-25 19:41:27,234 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:27,235 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/12/16 9:29:44 AM

2023-01-25 19:41:27,235 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/12/16 9:29:44 AM
2023-01-25 19:41:27,235 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:27,235 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Lang Kuning, Kepong Baru

2023-01-25 19:41:27,236 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Lang Kuning, Kepong Baru
2023-01-25 19:41:27,236 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:27,236 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8.00

2nd attempt to extract from Excel:
From: "Cashier"
Amount: 5.00

2023-01-25 19:41:27,236 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8.00 2nd attempt to extract from Excel: From: "Cashier" Amount: 5.00
2023-01-25 19:41:27,237 - __main__ - INFO - 96 - <module>() - Final prediction for document 146: {'company': 'Kedai Ubat & Runcit Hong Ning Sdn Bhd.', 'date': '21/12/16 9:29:44 AM', 'address': 'Jalan Lang Kuning, Kepong Baru', 'total': '8.00 2nd attempt to extract from Excel: From: "Cashier" Amount: 5.00'}
2023-01-25 19:41:27,238 - __main__ - INFO - 92 - <module>() - Predicting document 147...
2023-01-25 19:41:32,272 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Employee Name:
Position:
Date:
Address:
Tax Rate:
Total:
Output Example:
Company Name: Bar Wang Rice
Employee Name: Bung Lee
Position: P&G
Date: 20180126
Address: Kajang
Tax Rate: RM0.00
Total: RM4.24

Here is another document with different company names.

The output example should look like this.


2023-01-25 19:41:32,273 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:32,273 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:32,274 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Employee Name:
Position:
Date:
Address:
Tax Rate:

2023-01-25 19:41:32,274 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Employee Name: Position: Date: Address: Tax Rate:
2023-01-25 19:41:32,274 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:32,274 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:32,275 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:32,275 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Output Example:
Company Name: Bar Wang Rice
Employee Name: Bung Lee
Position: P&G
Date: 20180126
Address: Kajang
Tax Rate: RM0.00

2023-01-25 19:41:32,275 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Output Example: Company Name: Bar Wang Rice Employee Name: Bung Lee Position: P&G Date: 20180126 Address: Kajang Tax Rate: RM0.00
2023-01-25 19:41:32,275 - __main__ - INFO - 96 - <module>() - Final prediction for document 147: {'company': 'Employee Name: Position: Date: Address: Tax Rate:', 'total': 'Output Example: Company Name: Bar Wang Rice Employee Name: Bung Lee Position: P&G Date: 20180126 Address: Kajang Tax Rate: RM0.00'}
2023-01-25 19:41:32,277 - __main__ - INFO - 92 - <module>() - Predicting document 148...
2023-01-25 19:41:34,744 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:

Address of Company:

Total:

2023-01-25 19:41:34,745 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:34,745 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:34,745 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:41:34,746 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:34,746 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:34,746 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:41:34,746 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:34,747 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:34,747 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:41:34,747 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:34,747 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:34,748 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:34,748 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:34,748 - __main__ - INFO - 96 - <module>() - Final prediction for document 148: {}
2023-01-25 19:41:34,750 - __main__ - INFO - 92 - <module>() - Predicting document 149...
2023-01-25 19:41:41,470 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  NOC
Date of Receipt: 22-09-2017
Address of Company: Jalan C.H.Temenggung,19/9
Total: 155.09
GST Amount (RM): 9.31
GST Amount (RM) as Percent: 6%

Sample 2

I was unable to get the company name from this document. But i can tell you that the name is found in the third line of the document.

"Bank DARIA INDONESIA Tbk."

Extract the "Company Name" from the document above.

2023-01-25 19:41:41,471 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:41,471 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:41,471 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NOC

2023-01-25 19:41:41,472 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NOC
2023-01-25 19:41:41,472 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:41,472 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22-09-2017

2023-01-25 19:41:41,472 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22-09-2017
2023-01-25 19:41:41,473 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:41,473 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan C.H.Temenggung,19/9

2023-01-25 19:41:41,473 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan C.H.Temenggung,19/9
2023-01-25 19:41:41,473 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:41,474 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  155.09
GST Amount (RM): 9.31
GST Amount (RM) as Percent: 6%

Sample 2

I was unable to get the company name from this document. But i can tell you that the name is found in the third line of the document.

"Bank DARIA INDONESIA Tbk."

Extract the "Company Name" from the document above.

2023-01-25 19:41:41,474 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 155.09 GST Amount (RM): 9.31 GST Amount (RM) as Percent: 6% Sample 2 I was unable to get the company name from this document. But i can tell you that the name is found in the third line of the document.  "Bank DARIA INDONESIA Tbk." Extract the "Company Name" from the document above.
2023-01-25 19:41:41,474 - __main__ - INFO - 96 - <module>() - Final prediction for document 149: {'company': 'NOC', 'date': '22-09-2017', 'address': 'Jalan C.H.Temenggung,19/9', 'total': '155.09 GST Amount (RM): 9.31 GST Amount (RM) as Percent: 6% Sample 2 I was unable to get the company name from this document. But i can tell you that the name is found in the third line of the document.  "Bank DARIA INDONESIA Tbk." Extract the "Company Name" from the document above.'}
2023-01-25 19:41:41,476 - __main__ - INFO - 92 - <module>() - Predicting document 150...
2023-01-25 19:41:48,533 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  P.N.
Date of Receipt: 10-05-2018 16:06:12
Address of Company:
Total:

Example: The above example has a total of 'RM 7.20'
Step 2
Find the number after the currency (RM)

In this case '7.20'

Step 3
The following list shows the different number types in Jalan.

- Decimal: 7,2
- Thousands: 7.2
- Millions: 7200
- Billions: 7200.00
- Trillions: 7200000.
2023-01-25 19:41:48,534 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:48,535 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:48,535 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  P.N.

2023-01-25 19:41:48,536 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: P.N.
2023-01-25 19:41:48,536 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:48,536 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10-05-2018 16:06:12

2023-01-25 19:41:48,537 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10-05-2018 16:06:12
2023-01-25 19:41:48,537 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:48,537 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:48,537 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:48,538 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:48,538 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Example: The above example has a total of 'RM 7.20'
Step 2
Find the number after the currency (RM)

In this case '7.20'

Step 3
The following list shows the different number types in Jalan.

- Decimal: 7,2
- Thousands: 7.2
- Millions: 7200
- Billions: 7200.00
- Trillions: 7200000.
2023-01-25 19:41:48,538 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Example: The above example has a total of 'RM 7.20' Step 2 Find the number after the currency (RM) In this case '7.20' Step 3 The following list shows the different number types in Jalan. - Decimal: 7,2 - Thousands: 7.2 - Millions: 7200 - Billions: 7200.00 - Trillions: 7200000.
2023-01-25 19:41:48,538 - __main__ - INFO - 96 - <module>() - Final prediction for document 150: {'company': 'P.N.', 'date': '10-05-2018 16:06:12', 'total': "Example: The above example has a total of 'RM 7.20' Step 2 Find the number after the currency (RM) In this case '7.20' Step 3 The following list shows the different number types in Jalan. - Decimal: 7,2 - Thousands: 7.2 - Millions: 7200 - Billions: 7200.00 - Trillions: 7200000."}
2023-01-25 19:41:48,540 - __main__ - INFO - 92 - <module>() - Predicting document 151...
2023-01-25 19:41:51,533 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Microsoft
Date of Receipt: 22-03-2018 04:01:20 PM
Address of Company: Bukit Indah Place
Total: 22.6
2023-01-25 19:41:51,534 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:51,534 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:51,534 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Microsoft

2023-01-25 19:41:51,535 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Microsoft
2023-01-25 19:41:51,535 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:51,535 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22-03-2018 04:01:20 PM

2023-01-25 19:41:51,535 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22-03-2018 04:01:20 PM
2023-01-25 19:41:51,535 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:51,535 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bukit Indah Place

2023-01-25 19:41:51,536 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bukit Indah Place
2023-01-25 19:41:51,536 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:51,536 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22.6
2023-01-25 19:41:51,536 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22.6
2023-01-25 19:41:51,536 - __main__ - INFO - 96 - <module>() - Final prediction for document 151: {'company': 'Microsoft', 'date': '22-03-2018 04:01:20 PM', 'address': 'Bukit Indah Place', 'total': '22.6'}
2023-01-25 19:41:51,537 - __main__ - INFO - 92 - <module>() - Predicting document 152...
2023-01-25 19:41:54,341 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date of Receipt: DATE OF RECEIPT
Address of Company:
Total: (excl. GST)
2023-01-25 19:41:54,342 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:54,342 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:54,343 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME

2023-01-25 19:41:54,343 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME
2023-01-25 19:41:54,343 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:54,344 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DATE OF RECEIPT

2023-01-25 19:41:54,344 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DATE OF RECEIPT
2023-01-25 19:41:54,344 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:54,344 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:54,345 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:54,345 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:54,345 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (excl. GST)
2023-01-25 19:41:54,345 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (excl. GST)
2023-01-25 19:41:54,346 - __main__ - INFO - 96 - <module>() - Final prediction for document 152: {'company': 'COMPANY NAME', 'date': 'DATE OF RECEIPT', 'total': '(excl. GST)'}
2023-01-25 19:41:54,347 - __main__ - INFO - 92 - <module>() - Predicting document 153...
2023-01-25 19:41:57,616 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  PERSONALISATION OF GOODS
Date of Receipt: 29-FEB-2017 10:00:00.000 AM
Address of Company: 8, Jalan Kampung Kerajaan, Jalor, Perak
Total:
2023-01-25 19:41:57,616 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:57,616 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:57,617 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PERSONALISATION OF GOODS

2023-01-25 19:41:57,617 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PERSONALISATION OF GOODS
2023-01-25 19:41:57,617 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:57,618 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  29-FEB-2017 10:00:00.000 AM

2023-01-25 19:41:57,618 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 29-FEB-2017 10:00:00.000 AM
2023-01-25 19:41:57,618 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:57,618 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8, Jalan Kampung Kerajaan, Jalor, Perak

2023-01-25 19:41:57,619 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8, Jalan Kampung Kerajaan, Jalor, Perak
2023-01-25 19:41:57,619 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:57,619 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:41:57,619 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:57,620 - __main__ - INFO - 96 - <module>() - Final prediction for document 153: {'company': 'PERSONALISATION OF GOODS', 'date': '29-FEB-2017 10:00:00.000 AM', 'address': '8, Jalan Kampung Kerajaan, Jalor, Perak'}
2023-01-25 19:41:57,622 - __main__ - INFO - 92 - <module>() - Predicting document 154...
2023-01-25 19:42:04,509 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  A
Date of Receipt: 02/03/18
Address of Company: <br />
Total: <br />

Press <Shift+Enter> to store the text string <br /> as a value of a key "A" from the document, which is not part of the key-value pair.
Press <Shift+Enter> to store the key "B" from the document in a <br />

For the Key-value pairs (A) and (B), select "D" and press <Enter> to insert <br /> for the blank values.
For the key "A
2023-01-25 19:42:04,510 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:04,511 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:04,511 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A

2023-01-25 19:42:04,512 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A
2023-01-25 19:42:04,512 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:04,512 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02/03/18

2023-01-25 19:42:04,512 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02/03/18
2023-01-25 19:42:04,513 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:04,513 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <br />

2023-01-25 19:42:04,513 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <br />
2023-01-25 19:42:04,513 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:04,513 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <br />

Press <Shift+Enter> to store the text string <br /> as a value of a key "A" from the document, which is not part of the key-value pair.
Press <Shift+Enter> to store the key "B" from the document in a <br />

For the Key-value pairs (A) and (B), select "D" and press <Enter> to insert <br /> for the blank values.
For the key "A
2023-01-25 19:42:04,514 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <br /> Press <Shift+Enter> to store the text string <br /> as a value of a key "A" from the document, which is not part of the key-value pair. Press <Shift+Enter> to store the key "B" from the document in a <br /> For the Key-value pairs (A) and (B), select "D" and press <Enter> to insert <br /> for the blank values. For the key "A
2023-01-25 19:42:04,514 - __main__ - INFO - 96 - <module>() - Final prediction for document 154: {'company': 'A', 'date': '02/03/18', 'address': '<br />', 'total': '<br /> Press <Shift+Enter> to store the text string <br /> as a value of a key "A" from the document, which is not part of the key-value pair. Press <Shift+Enter> to store the key "B" from the document in a <br /> For the Key-value pairs (A) and (B), select "D" and press <Enter> to insert <br /> for the blank values. For the key "A'}
2023-01-25 19:42:04,515 - __main__ - INFO - 92 - <module>() - Predicting document 155...
2023-01-25 19:42:07,319 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Address of Company:
Date of Receipt:
Total:

Solution: If this question has not been included in the list of questions in this chapter, please contact the instructor:
2023-01-25 19:42:07,320 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:07,320 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:07,320 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Address of Company:

2023-01-25 19:42:07,320 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company:
2023-01-25 19:42:07,320 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:07,321 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Total:

Solution: If this question has not been included in the list of questions in this chapter, please contact the instructor:
2023-01-25 19:42:07,321 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total: Solution: If this question has not been included in the list of questions in this chapter, please contact the instructor:
2023-01-25 19:42:07,321 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:07,321 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date of Receipt:

2023-01-25 19:42:07,321 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt:
2023-01-25 19:42:07,322 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:07,322 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Solution: If this question has not been included in the list of questions in this chapter, please contact the instructor:
2023-01-25 19:42:07,322 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Solution: If this question has not been included in the list of questions in this chapter, please contact the instructor:
2023-01-25 19:42:07,322 - __main__ - INFO - 96 - <module>() - Final prediction for document 155: {'company': 'Address of Company:', 'date': 'Total: Solution: If this question has not been included in the list of questions in this chapter, please contact the instructor:', 'address': 'Date of Receipt:', 'total': 'Solution: If this question has not been included in the list of questions in this chapter, please contact the instructor:'}
2023-01-25 19:42:07,323 - __main__ - INFO - 92 - <module>() - Predicting document 156...
2023-01-25 19:42:10,959 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Create a report for the company name or document name in the input box. For example, if the company name is 'XYZ', then create the report using the following code.
2023-01-25 19:42:10,960 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:10,960 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:10,961 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:42:10,961 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:42:10,961 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:10,962 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:42:10,962 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:42:10,962 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:10,962 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:42:10,963 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:42:10,963 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:10,963 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Create a report for the company name or document name in the input box. For example, if the company name is 'XYZ', then create the report using the following code.
2023-01-25 19:42:10,963 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Create a report for the company name or document name in the input box. For example, if the company name is 'XYZ', then create the report using the following code.
2023-01-25 19:42:10,964 - __main__ - INFO - 96 - <module>() - Final prediction for document 156: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': "Total Create a report for the company name or document name in the input box. For example, if the company name is 'XYZ', then create the report using the following code."}
2023-01-25 19:42:10,965 - __main__ - INFO - 92 - <module>() - Predicting document 157...
2023-01-25 19:42:16,391 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)
Date of Receipt: 29/08/2017
Address of Company: 48, Jalan Pelabur 23/1,
40300 Shah Alam, Selangor.
Total: 37.90

Use this data to create a table, to be displayed as a report.


2023-01-25 19:42:16,392 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:16,392 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:16,392 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)

2023-01-25 19:42:16,392 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GARDENIA BAKERIES (KL) SDN BHD (139386 X)
2023-01-25 19:42:16,392 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:16,393 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  29/08/2017

2023-01-25 19:42:16,393 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 29/08/2017
2023-01-25 19:42:16,393 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:16,393 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  48, Jalan Pelabur 23/1,
40300 Shah Alam, Selangor.

2023-01-25 19:42:16,393 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 48, Jalan Pelabur 23/1, 40300 Shah Alam, Selangor.
2023-01-25 19:42:16,394 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:16,394 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  37.90

Use this data to create a table, to be displayed as a report.


2023-01-25 19:42:16,394 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 37.90 Use this data to create a table, to be displayed as a report.
2023-01-25 19:42:16,394 - __main__ - INFO - 96 - <module>() - Final prediction for document 157: {'company': 'GARDENIA BAKERIES (KL) SDN BHD (139386 X)', 'date': '29/08/2017', 'address': '48, Jalan Pelabur 23/1, 40300 Shah Alam, Selangor.', 'total': '37.90 Use this data to create a table, to be displayed as a report.'}
2023-01-25 19:42:16,395 - __main__ - INFO - 92 - <module>() - Predicting document 158...
2023-01-25 19:42:22,999 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name
Date of Receipt: Date
Address of Company: Address of company
Total: Total of payment amount

Output
+---------------------------------------------------------------------------------------+
| Company Name | Address of Company | Total | Date of Receipt | Key | Value |
|--------------|--------------------|-------|------------------|-----|-------|
| T3 R000129969 | C. MENJALA , 1 KL JEM | 12.00 | 19-03-18 13 : 17 | <|stop key|> | null |
| T3 R000129969 | C. MENJALA , 1
2023-01-25 19:42:23,000 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:23,000 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:23,000 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name

2023-01-25 19:42:23,001 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name
2023-01-25 19:42:23,001 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:23,001 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date

2023-01-25 19:42:23,001 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date
2023-01-25 19:42:23,002 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:23,002 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of company

2023-01-25 19:42:23,002 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of company
2023-01-25 19:42:23,003 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:23,003 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total of payment amount

Output
+---------------------------------------------------------------------------------------+
| Company Name | Address of Company | Total | Date of Receipt | Key | Value |
|--------------|--------------------|-------|------------------|-----|-------|
| T3 R000129969 | C. MENJALA , 1 KL JEM | 12.00 | 19-03-18 13 : 17 | <|stop key|> | null |
| T3 R000129969 | C. MENJALA , 1
2023-01-25 19:42:23,003 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total of payment amount Output +---------------------------------------------------------------------------------------+ | Company Name | Address of Company | Total | Date of Receipt | Key | Value | |--------------|--------------------|-------|------------------|-----|-------| | T3 R000129969 | C. MENJALA , 1 KL JEM | 12.00 | 19-03-18 13 : 17 | <|stop key|> | null | | T3 R000129969 | C. MENJALA , 1
2023-01-25 19:42:23,003 - __main__ - INFO - 96 - <module>() - Final prediction for document 158: {'company': 'Company name', 'date': 'Date', 'address': 'Address of company', 'total': 'Total of payment amount Output +---------------------------------------------------------------------------------------+ | Company Name | Address of Company | Total | Date of Receipt | Key | Value | |--------------|--------------------|-------|------------------|-----|-------| | T3 R000129969 | C. MENJALA , 1 KL JEM | 12.00 | 19-03-18 13 : 17 | <|stop key|> | null | | T3 R000129969 | C. MENJALA , 1'}
2023-01-25 19:42:23,005 - __main__ - INFO - 92 - <module>() - Predicting document 159...
2023-01-25 19:42:25,931 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Sanyu Stationery
Date of Receipt: 14/10/2017
Address of Company: Setia Alam
Total: 15.00
2023-01-25 19:42:25,932 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:25,932 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:25,933 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Sanyu Stationery

2023-01-25 19:42:25,933 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sanyu Stationery
2023-01-25 19:42:25,933 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:25,933 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14/10/2017

2023-01-25 19:42:25,933 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14/10/2017
2023-01-25 19:42:25,933 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:25,933 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Setia Alam

2023-01-25 19:42:25,933 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Setia Alam
2023-01-25 19:42:25,934 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:25,934 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15.00
2023-01-25 19:42:25,934 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15.00
2023-01-25 19:42:25,934 - __main__ - INFO - 96 - <module>() - Final prediction for document 159: {'company': 'Sanyu Stationery', 'date': '14/10/2017', 'address': 'Setia Alam', 'total': '15.00'}
2023-01-25 19:42:25,935 - __main__ - INFO - 92 - <module>() - Predicting document 160...
2023-01-25 19:42:32,430 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Address of Company: 1-10, Jalan,
Postal: 78845, Kuala Lumpur, Malaysia
Phone: 3
Date of Receipt: 31-01-16
Total: RM262.20
Stop Key: <|stop key|>
This is the output that I want:

Key: Value
Company Name: COMPANY NAME
Address of Company: 1-10, Jalan,
Postal: 78845, Kuala Lumpur, Malaysia
Phone: 3
Date of Receipt: 31-01-16
Total:
2023-01-25 19:42:32,431 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:32,431 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:32,431 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME
Address of Company: 1-10, Jalan,
Postal: 78845, Kuala Lumpur, Malaysia
Phone: 3

2023-01-25 19:42:32,431 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME Address of Company: 1-10, Jalan, Postal: 78845, Kuala Lumpur, Malaysia Phone: 3
2023-01-25 19:42:32,431 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:32,431 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31-01-16
Total: RM262.20
Stop Key: <|stop key|>
This is the output that I want:

Key: Value
Company Name: COMPANY NAME

2023-01-25 19:42:32,432 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31-01-16 Total: RM262.20 Stop Key: <|stop key|> This is the output that I want: Key: Value Company Name: COMPANY NAME
2023-01-25 19:42:32,432 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:32,432 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1-10, Jalan,
Postal: 78845, Kuala Lumpur, Malaysia
Phone: 3
Date of Receipt: 31-01-16

2023-01-25 19:42:32,432 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1-10, Jalan, Postal: 78845, Kuala Lumpur, Malaysia Phone: 3 Date of Receipt: 31-01-16
2023-01-25 19:42:32,432 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:32,432 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM262.20
Stop Key: <|stop key|>
This is the output that I want:

Key: Value
Company Name: COMPANY NAME
Address of Company: 1-10, Jalan,
Postal: 78845, Kuala Lumpur, Malaysia
Phone: 3
Date of Receipt: 31-01-16

2023-01-25 19:42:32,432 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM262.20 Stop Key: <|stop key|> This is the output that I want: Key: Value Company Name: COMPANY NAME Address of Company: 1-10, Jalan, Postal: 78845, Kuala Lumpur, Malaysia Phone: 3 Date of Receipt: 31-01-16
2023-01-25 19:42:32,433 - __main__ - INFO - 96 - <module>() - Final prediction for document 160: {'company': 'COMPANY NAME Address of Company: 1-10, Jalan, Postal: 78845, Kuala Lumpur, Malaysia Phone: 3', 'date': '31-01-16 Total: RM262.20 Stop Key: <|stop key|> This is the output that I want: Key: Value Company Name: COMPANY NAME', 'address': '1-10, Jalan, Postal: 78845, Kuala Lumpur, Malaysia Phone: 3 Date of Receipt: 31-01-16', 'total': 'RM262.20 Stop Key: <|stop key|> This is the output that I want: Key: Value Company Name: COMPANY NAME Address of Company: 1-10, Jalan, Postal: 78845, Kuala Lumpur, Malaysia Phone: 3 Date of Receipt: 31-01-16'}
2023-01-25 19:42:32,434 - __main__ - INFO - 92 - <module>() - Predicting document 161...
2023-01-25 19:42:39,196 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  C1
Date of Receipt: 03/03/2016
Address of Company: Kuala Lumpur
Total: 50.00

The input is in "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" format.

If you can't find a key-value pair in the document set the value to "null".

I am also wondering how the stop key can affect your results. To do so would require you to know the key-value pair for each record before you can parse the data. This would not be an accurate
2023-01-25 19:42:39,197 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:39,197 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:39,197 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  C1

2023-01-25 19:42:39,198 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: C1
2023-01-25 19:42:39,198 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:39,198 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03/03/2016

2023-01-25 19:42:39,198 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03/03/2016
2023-01-25 19:42:39,198 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:39,198 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kuala Lumpur

2023-01-25 19:42:39,199 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur
2023-01-25 19:42:39,199 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:39,199 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  50.00

The input is in "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" format.

If you can't find a key-value pair in the document set the value to "null".

I am also wondering how the stop key can affect your results. To do so would require you to know the key-value pair for each record before you can parse the data. This would not be an accurate
2023-01-25 19:42:39,199 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 50.00 The input is in "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" format. If you can't find a key-value pair in the document set the value to "null". I am also wondering how the stop key can affect your results. To do so would require you to know the key-value pair for each record before you can parse the data. This would not be an accurate
2023-01-25 19:42:39,200 - __main__ - INFO - 96 - <module>() - Final prediction for document 161: {'company': 'C1', 'date': '03/03/2016', 'address': 'Kuala Lumpur', 'total': '50.00 The input is in "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" format. If you can\'t find a key-value pair in the document set the value to "null". I am also wondering how the stop key can affect your results. To do so would require you to know the key-value pair for each record before you can parse the data. This would not be an accurate'}
2023-01-25 19:42:39,201 - __main__ - INFO - 92 - <module>() - Predicting document 162...
2023-01-25 19:42:47,110 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Your Company Name>
Date of Receipt: <Year / Month / Day>
Address of Company: <Address>
Total: <Amount>
<|\keyboard|\ |stop key|>
Exact: 1.00
Less: 0.50
Add: 1.50

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: <Your Company Name
2023-01-25 19:42:47,111 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:47,112 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:47,112 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Your Company Name>

2023-01-25 19:42:47,112 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Your Company Name>
2023-01-25 19:42:47,113 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:47,113 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Year / Month / Day>

2023-01-25 19:42:47,113 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Year / Month / Day>
2023-01-25 19:42:47,114 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:47,114 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address>

2023-01-25 19:42:47,114 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address>
2023-01-25 19:42:47,114 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:47,115 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Amount>
<|\keyboard|\ |stop key|>
Exact: 1.00
Less: 0.50
Add: 1.50

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: <Your Company Name
2023-01-25 19:42:47,115 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Amount> <|\keyboard|\ |stop key|> Exact: 1.00 Less: 0.50 Add: 1.50 Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: <Your Company Name
2023-01-25 19:42:47,115 - __main__ - INFO - 96 - <module>() - Final prediction for document 162: {'company': '<Your Company Name>', 'date': '<Year / Month / Day>', 'address': '<Address>', 'total': '<Amount> <|\\keyboard|\\ |stop key|> Exact: 1.00 Less: 0.50 Add: 1.50 Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: <Your Company Name'}
2023-01-25 19:42:47,117 - __main__ - INFO - 92 - <module>() - Predicting document 163...
2023-01-25 19:42:54,450 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  A & W
Receipt Date: 9/4/2017
Address of Company: R & R Road, Bukit Perampuan, Bangsar South, Kuala Lumpur, Malaysia
Total: 12.20
|stop key|:

Key: Value
Company Name: UNIHAW
Receipt Date: 10/10/2018
Address of Company: Jalan Tampoi 7/4, Kuala Lumpur, Malaysia
Total: 12.20
|stop key|:

Key: Value
Company Name: INTERNATIONAL
Receipt Date:
2023-01-25 19:42:54,451 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:54,452 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:54,452 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A & W
Receipt Date: 9/4/2017

2023-01-25 19:42:54,452 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A & W Receipt Date: 9/4/2017
2023-01-25 19:42:54,453 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:54,453 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:54,453 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  R & R Road, Bukit Perampuan, Bangsar South, Kuala Lumpur, Malaysia

2023-01-25 19:42:54,453 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: R & R Road, Bukit Perampuan, Bangsar South, Kuala Lumpur, Malaysia
2023-01-25 19:42:54,454 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:54,454 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12.20
|stop key|:

Key: Value
Company Name: UNIHAW
Receipt Date: 10/10/2018
Address of Company: Jalan Tampoi 7/4, Kuala Lumpur, Malaysia

2023-01-25 19:42:54,454 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12.20 |stop key|: Key: Value Company Name: UNIHAW Receipt Date: 10/10/2018 Address of Company: Jalan Tampoi 7/4, Kuala Lumpur, Malaysia
2023-01-25 19:42:54,455 - __main__ - INFO - 96 - <module>() - Final prediction for document 163: {'company': 'A & W Receipt Date: 9/4/2017', 'address': 'R & R Road, Bukit Perampuan, Bangsar South, Kuala Lumpur, Malaysia', 'total': '12.20 |stop key|: Key: Value Company Name: UNIHAW Receipt Date: 10/10/2018 Address of Company: Jalan Tampoi 7/4, Kuala Lumpur, Malaysia'}
2023-01-25 19:42:54,457 - __main__ - INFO - 92 - <module>() - Predicting document 164...
2023-01-25 19:42:55,895 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:42:55,896 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:55,896 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:55,896 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:55,897 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:55,897 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:55,897 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:55,897 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:55,898 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:55,898 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:55,898 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:55,899 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:55,899 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:42:55,899 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:55,899 - __main__ - INFO - 96 - <module>() - Final prediction for document 164: {}
2023-01-25 19:42:55,901 - __main__ - INFO - 92 - <module>() - Predicting document 165...
2023-01-25 19:43:03,244 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Vodafone Singapore
Date of Receipt: 2017-10-26
Address of Company: 3A & 3B, 11 Victoria Street, #02-01, Singapore 119973
Total: 2
Tax: 0.11
STORE NO: 2, JALAN TEMENGGUNG 19/9,
SEKSYEN 9, BANDAR MAHKOTA CHERAS,
43200 CHERAS, SELANGOR
GST REG NO: 001335787520
TAX INVOICE
INV NO.: 1136285
CASHIER:
2023-01-25 19:43:03,245 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:03,245 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:03,245 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Vodafone Singapore

2023-01-25 19:43:03,245 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Vodafone Singapore
2023-01-25 19:43:03,245 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:03,246 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2017-10-26

2023-01-25 19:43:03,246 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017-10-26
2023-01-25 19:43:03,246 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:03,246 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3A & 3B, 11 Victoria Street, #02-01, Singapore 119973

2023-01-25 19:43:03,246 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3A & 3B, 11 Victoria Street, #02-01, Singapore 119973
2023-01-25 19:43:03,246 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:03,246 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2
Tax: 0.11
STORE NO: 2, JALAN TEMENGGUNG 19/9,
SEKSYEN 9, BANDAR MAHKOTA CHERAS,
43200 CHERAS, SELANGOR
GST REG NO: 001335787520
TAX INVOICE
INV NO.: 1136285
CASHIER:
2023-01-25 19:43:03,246 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2 Tax: 0.11 STORE NO: 2, JALAN TEMENGGUNG 19/9, SEKSYEN 9, BANDAR MAHKOTA CHERAS, 43200 CHERAS, SELANGOR GST REG NO: 001335787520 TAX INVOICE INV NO.: 1136285 CASHIER:
2023-01-25 19:43:03,247 - __main__ - INFO - 96 - <module>() - Final prediction for document 165: {'company': 'Vodafone Singapore', 'date': '2017-10-26', 'address': '3A & 3B, 11 Victoria Street, #02-01, Singapore 119973', 'total': '2 Tax: 0.11 STORE NO: 2, JALAN TEMENGGUNG 19/9, SEKSYEN 9, BANDAR MAHKOTA CHERAS, 43200 CHERAS, SELANGOR GST REG NO: 001335787520 TAX INVOICE INV NO.: 1136285 CASHIER:'}
2023-01-25 19:43:03,248 - __main__ - INFO - 92 - <module>() - Predicting document 166...
2023-01-25 19:43:10,415 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Name of company
Receipt Date: Date that the document was received
Address of Company: Business address
Total: Total dollar amount of the payment

The program can be found below:

package gst_checker_v2;

import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class GST_Checker
{

private static final Pattern GST_PATTERN = Pattern.compile("<\\w+[0-9\\.]+[\\s]+>([\\d\\.]+)?\\s*
2023-01-25 19:43:10,417 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:10,417 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:10,417 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Name of company
Receipt Date: Date that the document was received

2023-01-25 19:43:10,418 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Name of company Receipt Date: Date that the document was received
2023-01-25 19:43:10,418 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:10,418 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:10,419 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Business address

2023-01-25 19:43:10,419 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Business address
2023-01-25 19:43:10,419 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:10,419 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total dollar amount of the payment

The program can be found below:

package gst_checker_v2;

import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class GST_Checker
{

private static final Pattern GST_PATTERN = Pattern.compile("<\\w+[0-9\\.]+[\\s]+>([\\d\\.]+)?\\s*
2023-01-25 19:43:10,420 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total dollar amount of the payment The program can be found below: package gst_checker_v2; import java.io.*; import java.util.regex.Matcher; import java.util.regex.Pattern; public class GST_Checker { private static final Pattern GST_PATTERN = Pattern.compile("<\\w+[0-9\\.]+[\\s]+>([\\d\\.]+)?\\s*
2023-01-25 19:43:10,421 - __main__ - INFO - 96 - <module>() - Final prediction for document 166: {'company': 'Name of company Receipt Date: Date that the document was received', 'address': 'Business address', 'total': 'Total dollar amount of the payment The program can be found below: package gst_checker_v2; import java.io.*; import java.util.regex.Matcher; import java.util.regex.Pattern; public class GST_Checker { private static final Pattern GST_PATTERN = Pattern.compile("<\\\\w+[0-9\\\\.]+[\\\\s]+>([\\\\d\\\\.]+)?\\\\s*'}
2023-01-25 19:43:10,422 - __main__ - INFO - 92 - <module>() - Predicting document 167...
2023-01-25 19:43:17,793 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <|stop key|>
Date of Receipt: <|stop key|>
Address of Company: <|stop key|>
Total: <|stop key|>
The above steps were tested on the document set above. The "Total" key was not in the document set so it is assumed it is "null".

Here is the code:
<cfscript>
// Input: Document Set
// Output: Company Name, Total, Date of Receipt, Address of Company
//
// This function is part of the ColdFusion documentation. This function is not guaranteed to work in
2023-01-25 19:43:17,795 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:17,795 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:17,796 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:43:17,796 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:43:17,796 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:17,797 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:43:17,797 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:43:17,797 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:17,797 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:43:17,798 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:43:17,798 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:17,798 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>
The above steps were tested on the document set above. The "Total" key was not in the document set so it is assumed it is "null".

Here is the code:
<cfscript>
// Input: Document Set
// Output: Company Name, Total, Date of Receipt, Address of Company
//
// This function is part of the ColdFusion documentation. This function is not guaranteed to work in
2023-01-25 19:43:17,798 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> The above steps were tested on the document set above. The "Total" key was not in the document set so it is assumed it is "null". Here is the code: <cfscript> // Input: Document Set // Output: Company Name, Total, Date of Receipt, Address of Company // // This function is part of the ColdFusion documentation. This function is not guaranteed to work in
2023-01-25 19:43:17,799 - __main__ - INFO - 96 - <module>() - Final prediction for document 167: {'company': '<|stop key|>', 'date': '<|stop key|>', 'address': '<|stop key|>', 'total': '<|stop key|> The above steps were tested on the document set above. The "Total" key was not in the document set so it is assumed it is "null". Here is the code: <cfscript> // Input: Document Set // Output: Company Name, Total, Date of Receipt, Address of Company // // This function is part of the ColdFusion documentation. This function is not guaranteed to work in'}
2023-01-25 19:43:17,800 - __main__ - INFO - 92 - <module>() - Predicting document 168...
2023-01-25 19:43:20,674 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Receipt No.:
2023-01-25 19:43:20,675 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:20,675 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:20,676 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:20,676 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:20,676 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:20,677 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:20,677 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:20,677 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:20,677 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:20,678 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:20,678 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:20,678 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Receipt No.:
2023-01-25 19:43:20,679 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt No.:
2023-01-25 19:43:20,679 - __main__ - INFO - 96 - <module>() - Final prediction for document 168: {'total': 'Receipt No.:'}
2023-01-25 19:43:20,682 - __main__ - INFO - 92 - <module>() - Predicting document 169...
2023-01-25 19:43:27,768 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
0%
20%
30%
40%
50%
60%
70%
80%
90%
100%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
RECEIVED
GARDENIA BAKERIES (KL) SDN BHD (139386 X)
LOT 3, JALAN PELABUR 23/1,
40300 SHAH ALAM, SELANGOR
2023-01-25 19:43:27,771 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:27,771 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:27,772 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:27,772 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:27,772 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:27,772 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:27,773 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:27,773 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:27,773 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:27,773 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:27,773 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:27,773 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
0%
20%
30%
40%
50%
60%
70%
80%
90%
100%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
RECEIVED
GARDENIA BAKERIES (KL) SDN BHD (139386 X)
LOT 3, JALAN PELABUR 23/1,
40300 SHAH ALAM, SELANGOR
2023-01-25 19:43:27,774 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0% 20% 30% 40% 50% 60% 70% 80% 90% 100% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% RECEIVED GARDENIA BAKERIES (KL) SDN BHD (139386 X) LOT 3, JALAN PELABUR 23/1, 40300 SHAH ALAM, SELANGOR
2023-01-25 19:43:27,774 - __main__ - INFO - 96 - <module>() - Final prediction for document 169: {'total': '0% 20% 30% 40% 50% 60% 70% 80% 90% 100% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% RECEIVED GARDENIA BAKERIES (KL) SDN BHD (139386 X) LOT 3, JALAN PELABUR 23/1, 40300 SHAH ALAM, SELANGOR'}
2023-01-25 19:43:27,778 - __main__ - INFO - 92 - <module>() - Predicting document 170...
2023-01-25 19:43:31,473 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Bar Wang Rice
Date of Receipt: 6/12/2018
Address of Company: 12, Jalan Tampoi 7/4, Kwasan Perindustrian, Tampoi, 81200 Johor Bahru, Johor
Total: 7.25
2023-01-25 19:43:31,473 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:31,474 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:31,474 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bar Wang Rice

2023-01-25 19:43:31,474 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bar Wang Rice
2023-01-25 19:43:31,475 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:31,475 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  6/12/2018

2023-01-25 19:43:31,475 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6/12/2018
2023-01-25 19:43:31,475 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:31,476 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12, Jalan Tampoi 7/4, Kwasan Perindustrian, Tampoi, 81200 Johor Bahru, Johor

2023-01-25 19:43:31,476 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12, Jalan Tampoi 7/4, Kwasan Perindustrian, Tampoi, 81200 Johor Bahru, Johor
2023-01-25 19:43:31,476 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:31,477 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7.25
2023-01-25 19:43:31,477 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7.25
2023-01-25 19:43:31,477 - __main__ - INFO - 96 - <module>() - Final prediction for document 170: {'company': 'Bar Wang Rice', 'date': '6/12/2018', 'address': '12, Jalan Tampoi 7/4, Kwasan Perindustrian, Tampoi, 81200 Johor Bahru, Johor', 'total': '7.25'}
2023-01-25 19:43:31,479 - __main__ - INFO - 92 - <module>() - Predicting document 171...
2023-01-25 19:43:35,003 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Alpha Lipid Life Line 450mg
Date of Receipt: 2-Jan-2017
Address of Company:
3/5, Gopeng Street
Teluk Intan, Perak
Peninsular Malaysia
Total: 1,165.00
2023-01-25 19:43:35,003 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:35,004 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:35,004 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Alpha Lipid Life Line 450mg

2023-01-25 19:43:35,004 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Alpha Lipid Life Line 450mg
2023-01-25 19:43:35,005 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:35,005 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2-Jan-2017

2023-01-25 19:43:35,005 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2-Jan-2017
2023-01-25 19:43:35,005 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:35,006 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
3/5, Gopeng Street
Teluk Intan, Perak
Peninsular Malaysia

2023-01-25 19:43:35,006 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3/5, Gopeng Street Teluk Intan, Perak Peninsular Malaysia
2023-01-25 19:43:35,006 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:35,007 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1,165.00
2023-01-25 19:43:35,007 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1,165.00
2023-01-25 19:43:35,007 - __main__ - INFO - 96 - <module>() - Final prediction for document 171: {'company': 'Alpha Lipid Life Line 450mg', 'date': '2-Jan-2017', 'address': '3/5, Gopeng Street Teluk Intan, Perak Peninsular Malaysia', 'total': '1,165.00'}
2023-01-25 19:43:35,009 - __main__ - INFO - 92 - <module>() - Predicting document 172...
2023-01-25 19:43:37,450 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  K.L.
Date of Receipt: Oct 10 2017
Address of Company: Jalan Langgak Sentral Utara K.L.
Total:
2023-01-25 19:43:37,451 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:37,452 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:37,452 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  K.L.

2023-01-25 19:43:37,452 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: K.L.
2023-01-25 19:43:37,452 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:37,453 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Oct 10 2017

2023-01-25 19:43:37,453 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Oct 10 2017
2023-01-25 19:43:37,453 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:37,454 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Langgak Sentral Utara K.L.

2023-01-25 19:43:37,454 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Langgak Sentral Utara K.L.
2023-01-25 19:43:37,454 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:37,454 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:43:37,455 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:37,455 - __main__ - INFO - 96 - <module>() - Final prediction for document 172: {'company': 'K.L.', 'date': 'Oct 10 2017', 'address': 'Jalan Langgak Sentral Utara K.L.'}
2023-01-25 19:43:37,456 - __main__ - INFO - 92 - <module>() - Predicting document 173...
2023-01-25 19:43:44,850 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Cash and carry".
Date of Receipt: 01/08/2017.
Address of Company: S1-10, Level 9, KLCC, Kuala Lumpur, MALAYSIA.
Total: 958.44

Question:

1. What is the address of the company?
2. What is the name of the company?
3. What date did the company do business?
4. How much money did the company receive from this transaction?

Sample Data Set #1: "Order #5" of The Restaurant

Extract "Order #
2023-01-25 19:43:44,853 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:44,853 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:44,854 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Cash and carry".

2023-01-25 19:43:44,855 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "Cash and carry".
2023-01-25 19:43:44,855 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:44,856 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/08/2017.

2023-01-25 19:43:44,856 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/08/2017.
2023-01-25 19:43:44,856 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:44,857 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S1-10, Level 9, KLCC, Kuala Lumpur, MALAYSIA.

2023-01-25 19:43:44,857 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S1-10, Level 9, KLCC, Kuala Lumpur, MALAYSIA.
2023-01-25 19:43:44,858 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:44,858 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  958.44

Question:

1. What is the address of the company?
2. What is the name of the company?
3. What date did the company do business?
4. How much money did the company receive from this transaction?

Sample Data Set #1: "Order #5" of The Restaurant

Extract "Order #
2023-01-25 19:43:44,858 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 958.44 Question: 1. What is the address of the company? 2. What is the name of the company? 3. What date did the company do business? 4. How much money did the company receive from this transaction? Sample Data Set #1: "Order #5" of The Restaurant Extract "Order #
2023-01-25 19:43:44,859 - __main__ - INFO - 96 - <module>() - Final prediction for document 173: {'company': '"Cash and carry".', 'date': '01/08/2017.', 'address': 'S1-10, Level 9, KLCC, Kuala Lumpur, MALAYSIA.', 'total': '958.44 Question: 1. What is the address of the company? 2. What is the name of the company? 3. What date did the company do business? 4. How much money did the company receive from this transaction? Sample Data Set #1: "Order #5" of The Restaurant Extract "Order #'}
2023-01-25 19:43:44,866 - __main__ - INFO - 92 - <module>() - Predicting document 174...
2023-01-25 19:43:46,930 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
2023-01-25 19:43:46,932 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:46,932 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:46,933 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:43:46,934 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:43:46,934 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:46,935 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:43:46,936 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:43:46,936 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:46,937 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:43:46,937 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:43:46,938 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:46,938 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:43:46,939 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:43:46,939 - __main__ - INFO - 96 - <module>() - Final prediction for document 174: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:43:46,943 - __main__ - INFO - 92 - <module>() - Predicting document 175...
2023-01-25 19:43:55,129 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

A:

Your text contains two tabs. Replace one by a newline and the other by "
" before executing my program.
Input as follows:
import java.util.*;
import java.io.*;
import java.lang.System.*;
import java.lang.*;

class Example {
public static void main(String[] args) {
    Scanner input = new Scanner(System.in);
    System.out.println("Enter text");
    while (input.hasNextLine()) {

2023-01-25 19:43:55,130 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:55,131 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:55,131 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:55,132 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:55,132 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:55,133 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:55,133 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:55,133 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:55,134 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:55,134 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:55,135 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:55,135 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

A:

Your text contains two tabs. Replace one by a newline and the other by "
" before executing my program.
Input as follows:
import java.util.*;
import java.io.*;
import java.lang.System.*;
import java.lang.*;

class Example {
public static void main(String[] args) {
    Scanner input = new Scanner(System.in);
    System.out.println("Enter text");
    while (input.hasNextLine()) {

2023-01-25 19:43:55,135 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A: Your text contains two tabs. Replace one by a newline and the other by " " before executing my program. Input as follows: import java.util.*; import java.io.*; import java.lang.System.*; import java.lang.*; class Example { public static void main(String[] args) {   Scanner input = new Scanner(System.in);   System.out.println("Enter text");   while (input.hasNextLine()) {
2023-01-25 19:43:55,136 - __main__ - INFO - 96 - <module>() - Final prediction for document 175: {'total': 'A: Your text contains two tabs. Replace one by a newline and the other by " " before executing my program. Input as follows: import java.util.*; import java.io.*; import java.lang.System.*; import java.lang.*; class Example { public static void main(String[] args) {   Scanner input = new Scanner(System.in);   System.out.println("Enter text");   while (input.hasNextLine()) {'}
2023-01-25 19:43:55,138 - __main__ - INFO - 92 - <module>() - Predicting document 176...
2023-01-25 19:44:02,160 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BONJOUR
Date of Receipt: 24-09-2019 11:55:00
Address of Company: KL
Total: RM4.34

Key: Value
Company Name: JALAN JAYA
Date of Receipt: 22-08-2019 20:36:00
Address of Company: JLN JAYA
Total: RM3.40

Key: Value
Company Name: GURUJI (KUALA LUMPUR)
Date of Receipt: 07-10-2019 17:37:00
Address of Company: TUNGEG
2023-01-25 19:44:02,162 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:02,163 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:02,163 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BONJOUR

2023-01-25 19:44:02,164 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BONJOUR
2023-01-25 19:44:02,165 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:02,165 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  24-09-2019 11:55:00

2023-01-25 19:44:02,165 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24-09-2019 11:55:00
2023-01-25 19:44:02,166 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:02,166 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KL

2023-01-25 19:44:02,167 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KL
2023-01-25 19:44:02,167 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:02,167 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM4.34

Key: Value
Company Name: JALAN JAYA
Date of Receipt: 22-08-2019 20:36:00
Address of Company: JLN JAYA

2023-01-25 19:44:02,168 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM4.34 Key: Value Company Name: JALAN JAYA Date of Receipt: 22-08-2019 20:36:00 Address of Company: JLN JAYA
2023-01-25 19:44:02,168 - __main__ - INFO - 96 - <module>() - Final prediction for document 176: {'company': 'BONJOUR', 'date': '24-09-2019 11:55:00', 'address': 'KL', 'total': 'RM4.34 Key: Value Company Name: JALAN JAYA Date of Receipt: 22-08-2019 20:36:00 Address of Company: JLN JAYA'}
2023-01-25 19:44:02,171 - __main__ - INFO - 92 - <module>() - Predicting document 177...
2023-01-25 19:44:03,790 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:44:03,791 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:03,792 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:03,792 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:03,793 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:03,793 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:03,794 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:03,795 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:03,795 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:03,796 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:03,796 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:03,797 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:03,797 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:44:03,798 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:03,798 - __main__ - INFO - 96 - <module>() - Final prediction for document 177: {}
2023-01-25 19:44:03,800 - __main__ - INFO - 92 - <module>() - Predicting document 178...
2023-01-25 19:44:11,013 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KENNETH ROYAL CONSULTANTS SDN BHD
Date of Receipt: 19-02-2018 14:47:38
Address of Company: KUALA LUMPUR
Amount: 0.01
TOTAL:
GST PAYABLE:
0.01
TOTAL (INCLUSIVE OF GST):
SELLER INVOICE
GST: -
OPEN TICKET
No. : 186242
Date : 19-02-2018 14:19:38
Check Number : 186242
PAYOR : KENNETH ROYAL
2023-01-25 19:44:11,015 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:11,016 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:11,017 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KENNETH ROYAL CONSULTANTS SDN BHD

2023-01-25 19:44:11,017 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KENNETH ROYAL CONSULTANTS SDN BHD
2023-01-25 19:44:11,018 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:11,018 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19-02-2018 14:47:38

2023-01-25 19:44:11,019 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19-02-2018 14:47:38
2023-01-25 19:44:11,020 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:11,020 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KUALA LUMPUR
Amount: 0.01

2023-01-25 19:44:11,021 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KUALA LUMPUR Amount: 0.01
2023-01-25 19:44:11,021 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:11,022 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
GST PAYABLE:
0.01
TOTAL (INCLUSIVE OF GST):
SELLER INVOICE
GST: -
OPEN TICKET
No. : 186242
Date : 19-02-2018 14:19:38
Check Number : 186242
PAYOR : KENNETH ROYAL
2023-01-25 19:44:11,022 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GST PAYABLE: 0.01 TOTAL (INCLUSIVE OF GST): SELLER INVOICE GST: - OPEN TICKET No. : 186242 Date : 19-02-2018 14:19:38 Check Number : 186242 PAYOR : KENNETH ROYAL
2023-01-25 19:44:11,023 - __main__ - INFO - 96 - <module>() - Final prediction for document 178: {'company': 'KENNETH ROYAL CONSULTANTS SDN BHD', 'date': '19-02-2018 14:47:38', 'address': 'KUALA LUMPUR Amount: 0.01', 'total': 'GST PAYABLE: 0.01 TOTAL (INCLUSIVE OF GST): SELLER INVOICE GST: - OPEN TICKET No. : 186242 Date : 19-02-2018 14:19:38 Check Number : 186242 PAYOR : KENNETH ROYAL'}
2023-01-25 19:44:11,026 - __main__ - INFO - 92 - <module>() - Predicting document 179...
2023-01-25 19:44:18,020 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 21-03-18
Address of Company: KL
Total:
Refunded: FALSE

Write a SQL query to return all the documents where there is a Refunded set to FALSE (the value of this field is FALSE). Remember that there can be more than one document and that the date of receipt will be a sub-field of the Total field.

To return the documents:
1. Find the total length of the documents using
the "Total" field.
2. Calculate the length of each document using the
"Length" field.
3. The
2023-01-25 19:44:18,022 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:18,023 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:18,024 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:18,024 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:18,024 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:18,024 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21-03-18

2023-01-25 19:44:18,025 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21-03-18
2023-01-25 19:44:18,025 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:18,025 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KL

2023-01-25 19:44:18,026 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KL
2023-01-25 19:44:18,026 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:18,026 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Refunded: FALSE

Write a SQL query to return all the documents where there is a Refunded set to FALSE (the value of this field is FALSE). Remember that there can be more than one document and that the date of receipt will be a sub-field of the Total field.

To return the documents:
1. Find the total length of the documents using
the "Total" field.
2. Calculate the length of each document using the
"Length" field.
3. The
2023-01-25 19:44:18,026 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Refunded: FALSE Write a SQL query to return all the documents where there is a Refunded set to FALSE (the value of this field is FALSE). Remember that there can be more than one document and that the date of receipt will be a sub-field of the Total field. To return the documents: 1. Find the total length of the documents using the "Total" field. 2. Calculate the length of each document using the "Length" field. 3. The
2023-01-25 19:44:18,027 - __main__ - INFO - 96 - <module>() - Final prediction for document 179: {'date': '21-03-18', 'address': 'KL', 'total': 'Refunded: FALSE Write a SQL query to return all the documents where there is a Refunded set to FALSE (the value of this field is FALSE). Remember that there can be more than one document and that the date of receipt will be a sub-field of the Total field. To return the documents: 1. Find the total length of the documents using the "Total" field. 2. Calculate the length of each document using the "Length" field. 3. The'}
2023-01-25 19:44:18,031 - __main__ - INFO - 92 - <module>() - Predicting document 180...
2023-01-25 19:44:21,081 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC Co.
Date of Receipt: 2016-12-01 00:00:00.0
Address of Company:
Total: 15.95
2023-01-25 19:44:21,082 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:21,083 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:21,083 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC Co.

2023-01-25 19:44:21,083 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Co.
2023-01-25 19:44:21,084 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:21,084 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2016-12-01 00:00:00.0

2023-01-25 19:44:21,084 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2016-12-01 00:00:00.0
2023-01-25 19:44:21,084 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:21,085 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:21,085 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:21,085 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:21,086 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15.95
2023-01-25 19:44:21,086 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15.95
2023-01-25 19:44:21,086 - __main__ - INFO - 96 - <module>() - Final prediction for document 180: {'company': 'ABC Co.', 'date': '2016-12-01 00:00:00.0', 'total': '15.95'}
2023-01-25 19:44:21,088 - __main__ - INFO - 92 - <module>() - Predicting document 181...
2023-01-25 19:44:28,275 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

The input document is in XHTML format, but there is no XHTML Schema available at this time. To process the input document into an RDBMS you can use a HTML parser for Perl, Python, or C++. Alternately, you can use a C-based HTML parser, like gnuhtml, but it may not be compatible with all database software. Finally, use JavaScript to extract the raw text from the file as a series of strings and then use the XPath processor to parse it.

Keywords

XHTML,
2023-01-25 19:44:28,276 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:28,276 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:28,276 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:28,277 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:28,277 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:28,277 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:28,278 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:28,278 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:28,279 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:28,279 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:28,279 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:28,280 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

The input document is in XHTML format, but there is no XHTML Schema available at this time. To process the input document into an RDBMS you can use a HTML parser for Perl, Python, or C++. Alternately, you can use a C-based HTML parser, like gnuhtml, but it may not be compatible with all database software. Finally, use JavaScript to extract the raw text from the file as a series of strings and then use the XPath processor to parse it.

Keywords

XHTML,
2023-01-25 19:44:28,280 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The input document is in XHTML format, but there is no XHTML Schema available at this time. To process the input document into an RDBMS you can use a HTML parser for Perl, Python, or C++. Alternately, you can use a C-based HTML parser, like gnuhtml, but it may not be compatible with all database software. Finally, use JavaScript to extract the raw text from the file as a series of strings and then use the XPath processor to parse it. Keywords XHTML,
2023-01-25 19:44:28,280 - __main__ - INFO - 96 - <module>() - Final prediction for document 181: {'total': 'The input document is in XHTML format, but there is no XHTML Schema available at this time. To process the input document into an RDBMS you can use a HTML parser for Perl, Python, or C++. Alternately, you can use a C-based HTML parser, like gnuhtml, but it may not be compatible with all database software. Finally, use JavaScript to extract the raw text from the file as a series of strings and then use the XPath processor to parse it. Keywords XHTML,'}
2023-01-25 19:44:28,282 - __main__ - INFO - 92 - <module>() - Predicting document 182...
2023-01-25 19:44:35,300 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Bintang Asli SDN BHD
Date of Receipt: 2013-10-12
Address of Company: 1000131-K Jalan Sepadu C 25/C Shah Alam Selangor Malaysia
Total: 89.26

Example 4: Tax Invoice Format 2.docx

Tier 1

Tax Invoice

Company

Address

Bintang Asli SDN BHD

1000131-K

Jalan Sepadu C 25/C, Shah Alam

Selangor, Malaysia

Customer

Date

2023-01-25 19:44:35,302 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:35,302 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:35,303 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bintang Asli SDN BHD

2023-01-25 19:44:35,303 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bintang Asli SDN BHD
2023-01-25 19:44:35,303 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:35,304 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2013-10-12

2023-01-25 19:44:35,304 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2013-10-12
2023-01-25 19:44:35,304 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:35,304 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1000131-K Jalan Sepadu C 25/C Shah Alam Selangor Malaysia

2023-01-25 19:44:35,305 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1000131-K Jalan Sepadu C 25/C Shah Alam Selangor Malaysia
2023-01-25 19:44:35,305 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:35,305 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  89.26

Example 4: Tax Invoice Format 2.docx

Tier 1

Tax Invoice

Company

Address

Bintang Asli SDN BHD

1000131-K

Jalan Sepadu C 25/C, Shah Alam

Selangor, Malaysia

Customer

Date

2023-01-25 19:44:35,305 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 89.26 Example 4: Tax Invoice Format 2.docx Tier 1 Tax Invoice Company Address Bintang Asli SDN BHD 1000131-K Jalan Sepadu C 25/C, Shah Alam Selangor, Malaysia Customer Date
2023-01-25 19:44:35,306 - __main__ - INFO - 96 - <module>() - Final prediction for document 182: {'company': 'Bintang Asli SDN BHD', 'date': '2013-10-12', 'address': '1000131-K Jalan Sepadu C 25/C Shah Alam Selangor Malaysia', 'total': '89.26 Example 4: Tax Invoice Format 2.docx Tier 1 Tax Invoice Company Address Bintang Asli SDN BHD 1000131-K Jalan Sepadu C 25/C, Shah Alam Selangor, Malaysia Customer Date'}
2023-01-25 19:44:35,307 - __main__ - INFO - 92 - <module>() - Predicting document 183...
2023-01-25 19:44:42,941 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BIG
Date of Receipt: 16/02/2018
Address of Company: No.2, 5th Floor, Jalan Hang Lekir,
Malaysia, 55100 Kuala Lumpur, Kuala Lumpur.
Total: $13,300.00

To be more efficient in your work, try to add keys to each value that you will be extracting. You can do this by copying the first line of the example file and paste it at the end of the file. For example, you can take the key "Date of Receipt" and add it on the end
2023-01-25 19:44:42,943 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:42,943 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:42,944 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BIG

2023-01-25 19:44:42,944 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BIG
2023-01-25 19:44:42,944 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:42,944 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  16/02/2018

2023-01-25 19:44:42,945 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 16/02/2018
2023-01-25 19:44:42,945 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:42,945 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  No.2, 5th Floor, Jalan Hang Lekir,
Malaysia, 55100 Kuala Lumpur, Kuala Lumpur.

2023-01-25 19:44:42,945 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: No.2, 5th Floor, Jalan Hang Lekir, Malaysia, 55100 Kuala Lumpur, Kuala Lumpur.
2023-01-25 19:44:42,945 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:42,946 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $13,300.00

To be more efficient in your work, try to add keys to each value that you will be extracting. You can do this by copying the first line of the example file and paste it at the end of the file. For example, you can take the key "Date of Receipt" and add it on the end
2023-01-25 19:44:42,946 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $13,300.00 To be more efficient in your work, try to add keys to each value that you will be extracting. You can do this by copying the first line of the example file and paste it at the end of the file. For example, you can take the key "Date of Receipt" and add it on the end
2023-01-25 19:44:42,947 - __main__ - INFO - 96 - <module>() - Final prediction for document 183: {'company': 'BIG', 'date': '16/02/2018', 'address': 'No.2, 5th Floor, Jalan Hang Lekir, Malaysia, 55100 Kuala Lumpur, Kuala Lumpur.', 'total': '$13,300.00 To be more efficient in your work, try to add keys to each value that you will be extracting. You can do this by copying the first line of the example file and paste it at the end of the file. For example, you can take the key "Date of Receipt" and add it on the end'}
2023-01-25 19:44:42,949 - __main__ - INFO - 92 - <module>() - Predicting document 184...
2023-01-25 19:44:49,871 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  CompanyName
Date of Receipt: Date
Address of Company: Address
Total: TotalValue
|stop key|: #N/A

I need to insert a record for every key/value pairs in every row.
CompanyName
Date of Receipt
Address of Company
Total

How to insert a record for each key/value pair in each row. I'm new to SSIS. Please help me with your suggestions. I can't use the "Execute SQL Task" to insert records in the database.

A:

Your question is little confusing. Do you want to insert all
2023-01-25 19:44:49,871 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:49,871 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CompanyName

2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CompanyName
2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date

2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date
2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address

2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address
2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:49,872 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TotalValue
|stop key|: #N/A

I need to insert a record for every key/value pairs in every row.
CompanyName
Date of Receipt
Address of Company
Total

How to insert a record for each key/value pair in each row. I'm new to SSIS. Please help me with your suggestions. I can't use the "Execute SQL Task" to insert records in the database.

A:

Your question is little confusing. Do you want to insert all
2023-01-25 19:44:49,873 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TotalValue |stop key|: #N/A I need to insert a record for every key/value pairs in every row. CompanyName Date of Receipt Address of Company Total How to insert a record for each key/value pair in each row. I'm new to SSIS. Please help me with your suggestions. I can't use the "Execute SQL Task" to insert records in the database. A: Your question is little confusing. Do you want to insert all
2023-01-25 19:44:49,873 - __main__ - INFO - 96 - <module>() - Final prediction for document 184: {'company': 'CompanyName', 'date': 'Date', 'address': 'Address', 'total': 'TotalValue |stop key|: #N/A I need to insert a record for every key/value pairs in every row. CompanyName Date of Receipt Address of Company Total How to insert a record for each key/value pair in each row. I\'m new to SSIS. Please help me with your suggestions. I can\'t use the "Execute SQL Task" to insert records in the database. A: Your question is little confusing. Do you want to insert all'}
2023-01-25 19:44:49,874 - __main__ - INFO - 92 - <module>() - Predicting document 185...
2023-01-25 19:44:57,370 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Use Java to determine if the "Total" in the document is a whole number. This means that it is possible to represent it with one integer variable. Your code must do one of the following:

Determine if the Total value can be represented by one integer value

If the Total can be represented by one integer, extract the first digit of that integer

If the total can not be represented by one integer, put "ERROR" in the value variable

The output should be:

2023-01-25 19:44:57,370 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:57,372 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Use Java to determine if the "Total" in the document is a whole number. This means that it is possible to represent it with one integer variable. Your code must do one of the following:

Determine if the Total value can be represented by one integer value

If the Total can be represented by one integer, extract the first digit of that integer

If the total can not be represented by one integer, put "ERROR" in the value variable

The output should be:

2023-01-25 19:44:57,372 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Use Java to determine if the "Total" in the document is a whole number. This means that it is possible to represent it with one integer variable. Your code must do one of the following: Determine if the Total value can be represented by one integer value If the Total can be represented by one integer, extract the first digit of that integer If the total can not be represented by one integer, put "ERROR" in the value variable The output should be:
2023-01-25 19:44:57,372 - __main__ - INFO - 96 - <module>() - Final prediction for document 185: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Use Java to determine if the "Total" in the document is a whole number. This means that it is possible to represent it with one integer variable. Your code must do one of the following: Determine if the Total value can be represented by one integer value If the Total can be represented by one integer, extract the first digit of that integer If the total can not be represented by one integer, put "ERROR" in the value variable The output should be:'}
2023-01-25 19:44:57,372 - __main__ - INFO - 92 - <module>() - Predicting document 186...
2023-01-25 19:45:08,065 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document: Company Name here
Date of Receipt: dd/mm/yy
Address of Company: Addr of co here
Total: Total amount here
|stop key|: Stop key (here is set to null, you can change it to any word)

Once extracted, copy and paste the data in the table below.
2023-01-25 19:45:08,067 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:08,068 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:08,068 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: Company Name here

2023-01-25 19:45:08,069 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name here
2023-01-25 19:45:08,069 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:08,069 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  dd/mm/yy

2023-01-25 19:45:08,070 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: dd/mm/yy
2023-01-25 19:45:08,070 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:08,070 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Addr of co here

2023-01-25 19:45:08,070 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Addr of co here
2023-01-25 19:45:08,071 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:08,071 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total amount here
|stop key|: Stop key (here is set to null, you can change it to any word)

Once extracted, copy and paste the data in the table below.
2023-01-25 19:45:08,071 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total amount here |stop key|: Stop key (here is set to null, you can change it to any word) Once extracted, copy and paste the data in the table below.
2023-01-25 19:45:08,071 - __main__ - INFO - 96 - <module>() - Final prediction for document 186: {'company': 'Company Name here', 'date': 'dd/mm/yy', 'address': 'Addr of co here', 'total': 'Total amount here |stop key|: Stop key (here is set to null, you can change it to any word) Once extracted, copy and paste the data in the table below.'}
2023-01-25 19:45:08,074 - __main__ - INFO - 92 - <module>() - Predicting document 187...
2023-01-25 19:45:09,504 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:45:09,505 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:09,505 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:09,505 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:09,505 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:09,505 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:09,505 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:09,505 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:09,505 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:09,506 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:09,506 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:09,506 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:09,506 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:45:09,506 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:09,506 - __main__ - INFO - 96 - <module>() - Final prediction for document 187: {}
2023-01-25 19:45:09,507 - __main__ - INFO - 92 - <module>() - Predicting document 188...
2023-01-25 19:45:16,449 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: 02/04/2017
Address of Company: 2 & 2A, JALAN KASUARINA 1/KS 7,
BANDAR BOTANIK,
41200 KLANG, SELANGOR

Output:
VOUCHER
Company Name: N/A
Amount(RM):26.90

Output:
GST SUMMARY
Company Name: N/A
Amount(RM):27.00

A:

You can use something like this:
//Get value from the first key
var text =
2023-01-25 19:45:16,450 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:16,450 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:16,450 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:45:16,450 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:45:16,450 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:16,450 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02/04/2017

2023-01-25 19:45:16,450 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02/04/2017
2023-01-25 19:45:16,451 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:16,451 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2 & 2A, JALAN KASUARINA 1/KS 7,
BANDAR BOTANIK,
41200 KLANG, SELANGOR

Output:
VOUCHER
Company Name: N/A
Amount(RM):26.90

Output:
GST SUMMARY
Company Name: N/A
Amount(RM):27.00

A:

You can use something like this:
//Get value from the first key
var text =
2023-01-25 19:45:16,451 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2 & 2A, JALAN KASUARINA 1/KS 7, BANDAR BOTANIK, 41200 KLANG, SELANGOR Output: VOUCHER Company Name: N/A Amount(RM):26.90 Output: GST SUMMARY Company Name: N/A Amount(RM):27.00 A: You can use something like this: //Get value from the first key var text =
2023-01-25 19:45:16,451 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:16,451 - __main__ - INFO - 96 - <module>() - Final prediction for document 188: {'company': 'N/A', 'date': '02/04/2017', 'address': '2 & 2A, JALAN KASUARINA 1/KS 7, BANDAR BOTANIK, 41200 KLANG, SELANGOR Output: VOUCHER Company Name: N/A Amount(RM):26.90 Output: GST SUMMARY Company Name: N/A Amount(RM):27.00 A: You can use something like this: //Get value from the first key var text ='}
2023-01-25 19:45:16,452 - __main__ - INFO - 92 - <module>() - Predicting document 189...
2023-01-25 19:45:23,364 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  S-TOUCH
Date of Receipt: 07/03/2017
Address of Company: MULTIPURPOSE HOSPITAL, M.C NO. 2, GURGAON, SANGAR, UTTARAKHAND - 211002
Total: 12.34

Key: Value
Company Name: S-TOUCH
Date of Receipt: 01/03/2017
Address of Company: SINGH CHAND, SIRIIND, UTTARAKHAND-121028
Total: 25.34

3.

Print data.
Output
2023-01-25 19:45:23,365 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:23,365 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:23,366 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S-TOUCH

2023-01-25 19:45:23,366 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S-TOUCH
2023-01-25 19:45:23,367 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:23,367 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  07/03/2017

2023-01-25 19:45:23,367 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 07/03/2017
2023-01-25 19:45:23,367 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:23,368 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MULTIPURPOSE HOSPITAL, M.C NO. 2, GURGAON, SANGAR, UTTARAKHAND - 211002

2023-01-25 19:45:23,368 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MULTIPURPOSE HOSPITAL, M.C NO. 2, GURGAON, SANGAR, UTTARAKHAND - 211002
2023-01-25 19:45:23,368 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:23,369 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12.34

Key: Value
Company Name: S-TOUCH
Date of Receipt: 01/03/2017
Address of Company: SINGH CHAND, SIRIIND, UTTARAKHAND-121028

2023-01-25 19:45:23,369 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12.34 Key: Value Company Name: S-TOUCH Date of Receipt: 01/03/2017 Address of Company: SINGH CHAND, SIRIIND, UTTARAKHAND-121028
2023-01-25 19:45:23,369 - __main__ - INFO - 96 - <module>() - Final prediction for document 189: {'company': 'S-TOUCH', 'date': '07/03/2017', 'address': 'MULTIPURPOSE HOSPITAL, M.C NO. 2, GURGAON, SANGAR, UTTARAKHAND - 211002', 'total': '12.34 Key: Value Company Name: S-TOUCH Date of Receipt: 01/03/2017 Address of Company: SINGH CHAND, SIRIIND, UTTARAKHAND-121028'}
2023-01-25 19:45:23,371 - __main__ - INFO - 92 - <module>() - Predicting document 190...
2023-01-25 19:45:30,222 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  *********************************************

:

Date of Receipt: 07/06/2018

Address of Company: Jalan Permas 10/5, Bandar Baru Permas Jaya,
81750 JOHOR BAHRU, JOHOR

Total: RM15.00

07/06/2018

18:19:47

Extract the date field in the above field and then convert it into yyyy-mm-dd format. Then find the difference between the two dates in years.

You can also try to find the difference in days by converting the
2023-01-25 19:45:30,223 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:30,223 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:30,224 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  *********************************************

:


2023-01-25 19:45:30,224 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ********************************************* :
2023-01-25 19:45:30,224 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:30,225 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  07/06/2018


2023-01-25 19:45:30,225 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 07/06/2018
2023-01-25 19:45:30,225 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:30,226 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Permas 10/5, Bandar Baru Permas Jaya,
81750 JOHOR BAHRU, JOHOR


2023-01-25 19:45:30,226 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Permas 10/5, Bandar Baru Permas Jaya, 81750 JOHOR BAHRU, JOHOR
2023-01-25 19:45:30,226 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:30,226 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM15.00

07/06/2018

18:19:47

Extract the date field in the above field and then convert it into yyyy-mm-dd format. Then find the difference between the two dates in years.

You can also try to find the difference in days by converting the
2023-01-25 19:45:30,227 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM15.00 07/06/2018 18:19:47 Extract the date field in the above field and then convert it into yyyy-mm-dd format. Then find the difference between the two dates in years. You can also try to find the difference in days by converting the
2023-01-25 19:45:30,227 - __main__ - INFO - 96 - <module>() - Final prediction for document 190: {'company': '********************************************* :', 'date': '07/06/2018', 'address': 'Jalan Permas 10/5, Bandar Baru Permas Jaya, 81750 JOHOR BAHRU, JOHOR', 'total': 'RM15.00 07/06/2018 18:19:47 Extract the date field in the above field and then convert it into yyyy-mm-dd format. Then find the difference between the two dates in years. You can also try to find the difference in days by converting the'}
2023-01-25 19:45:30,229 - __main__ - INFO - 92 - <module>() - Predicting document 191...
2023-01-25 19:45:37,099 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  XXX
Date of Receipt: 13/12/2018
Address of Company: XXX
Total: 9.60

The code above will return:
The company name is XXX
The date of receipt is 13/12/2018
The address of the company is XXX
The total is 9.60

However, I would like to return a value with more precision such as "9.600" which excludes the decimal point. How can I do that?
The code:
    public class Main {

    public static void main(String[] args) throws FileNotFoundException, IOException {

2023-01-25 19:45:37,099 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:37,100 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:37,100 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XXX

2023-01-25 19:45:37,100 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XXX
2023-01-25 19:45:37,100 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:37,101 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13/12/2018

2023-01-25 19:45:37,101 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13/12/2018
2023-01-25 19:45:37,101 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:37,102 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XXX

2023-01-25 19:45:37,102 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XXX
2023-01-25 19:45:37,102 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:37,102 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9.60

The code above will return:
The company name is XXX
The date of receipt is 13/12/2018
The address of the company is XXX
The total is 9.60

However, I would like to return a value with more precision such as "9.600" which excludes the decimal point. How can I do that?
The code:
    public class Main {

    public static void main(String[] args) throws FileNotFoundException, IOException {

2023-01-25 19:45:37,103 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9.60 The code above will return: The company name is XXX The date of receipt is 13/12/2018 The address of the company is XXX The total is 9.60 However, I would like to return a value with more precision such as "9.600" which excludes the decimal point. How can I do that? The code:   public class Main {   public static void main(String[] args) throws FileNotFoundException, IOException {
2023-01-25 19:45:37,103 - __main__ - INFO - 96 - <module>() - Final prediction for document 191: {'company': 'XXX', 'date': '13/12/2018', 'address': 'XXX', 'total': '9.60 The code above will return: The company name is XXX The date of receipt is 13/12/2018 The address of the company is XXX The total is 9.60 However, I would like to return a value with more precision such as "9.600" which excludes the decimal point. How can I do that? The code:   public class Main {   public static void main(String[] args) throws FileNotFoundException, IOException {'}
2023-01-25 19:45:37,105 - __main__ - INFO - 92 - <module>() - Predicting document 192...
2023-01-25 19:45:44,731 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Tiger Beer
Date of Receipt: 19/10/16
Address of Company: 561781-1817
Total:
GST Summary:
Amount (RM): 19.40
Tax (RM): 1.80
Remarks:
Name of Invoice:

Key: Value
Company Name: Tiger Beer
Date of Receipt: 19/10/16
Address of Company: 561781-1817
Total:
GST Summary:
Amount (RM): 19.40
Tax (RM): 1.80
Remarks:
Name of Invoice:

Extract "
2023-01-25 19:45:44,733 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:44,733 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:44,734 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Tiger Beer

2023-01-25 19:45:44,734 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tiger Beer
2023-01-25 19:45:44,734 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:44,735 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19/10/16

2023-01-25 19:45:44,735 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19/10/16
2023-01-25 19:45:44,735 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:44,735 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  561781-1817

2023-01-25 19:45:44,736 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 561781-1817
2023-01-25 19:45:44,736 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:44,736 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
GST Summary:
Amount (RM): 19.40
Tax (RM): 1.80
Remarks:
Name of Invoice:

Key: Value
Company Name: Tiger Beer
Date of Receipt: 19/10/16
Address of Company: 561781-1817

2023-01-25 19:45:44,736 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GST Summary: Amount (RM): 19.40 Tax (RM): 1.80 Remarks: Name of Invoice: Key: Value Company Name: Tiger Beer Date of Receipt: 19/10/16 Address of Company: 561781-1817
2023-01-25 19:45:44,737 - __main__ - INFO - 96 - <module>() - Final prediction for document 192: {'company': 'Tiger Beer', 'date': '19/10/16', 'address': '561781-1817', 'total': 'GST Summary: Amount (RM): 19.40 Tax (RM): 1.80 Remarks: Name of Invoice: Key: Value Company Name: Tiger Beer Date of Receipt: 19/10/16 Address of Company: 561781-1817'}
2023-01-25 19:45:44,738 - __main__ - INFO - 92 - <module>() - Predicting document 193...
2023-01-25 19:45:47,300 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  PETRON
Date of Receipt: 01/02/2018
Address of Company:
Total:

Key:
Use 3000 PETRON MILES

2023-01-25 19:45:47,300 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:47,300 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:47,300 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PETRON

2023-01-25 19:45:47,301 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PETRON
2023-01-25 19:45:47,301 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:47,301 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/02/2018

2023-01-25 19:45:47,301 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/02/2018
2023-01-25 19:45:47,301 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:47,301 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:47,301 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:47,301 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:47,302 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Key:
Use 3000 PETRON MILES

2023-01-25 19:45:47,302 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Key: Use 3000 PETRON MILES
2023-01-25 19:45:47,302 - __main__ - INFO - 96 - <module>() - Final prediction for document 193: {'company': 'PETRON', 'date': '01/02/2018', 'total': 'Key: Use 3000 PETRON MILES'}
2023-01-25 19:45:47,303 - __main__ - INFO - 92 - <module>() - Predicting document 194...
2023-01-25 19:45:54,228 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  JALAN ANGSA
Date of Receipt: 29/11/2011
Address of Company: BANK SALES OFFICE PARK TAMAN, LIGHTING SAVINGS & LOAN COMPANY LTD., MALAYSIAN LINK SCREENS CENTRE, TAMAN BERKELEY
Total: 2811

A:

Since your file has this structure:
<tr><td><a name="Company_Name"></a>Company Name</td><td>JALAN ANGSA
<tr><td><a name="Date_of_Receipt
2023-01-25 19:45:54,229 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:54,229 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:54,230 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN ANGSA

2023-01-25 19:45:54,230 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN ANGSA
2023-01-25 19:45:54,230 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:54,231 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  29/11/2011

2023-01-25 19:45:54,231 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 29/11/2011
2023-01-25 19:45:54,231 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:54,231 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BANK SALES OFFICE PARK TAMAN, LIGHTING SAVINGS & LOAN COMPANY LTD., MALAYSIAN LINK SCREENS CENTRE, TAMAN BERKELEY

2023-01-25 19:45:54,232 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BANK SALES OFFICE PARK TAMAN, LIGHTING SAVINGS & LOAN COMPANY LTD., MALAYSIAN LINK SCREENS CENTRE, TAMAN BERKELEY
2023-01-25 19:45:54,232 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:54,232 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2811

A:

Since your file has this structure:
<tr><td><a name="Company_Name"></a>Company Name</td><td>JALAN ANGSA
<tr><td><a name="Date_of_Receipt
2023-01-25 19:45:54,232 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2811 A: Since your file has this structure: <tr><td><a name="Company_Name"></a>Company Name</td><td>JALAN ANGSA <tr><td><a name="Date_of_Receipt
2023-01-25 19:45:54,233 - __main__ - INFO - 96 - <module>() - Final prediction for document 194: {'company': 'JALAN ANGSA', 'date': '29/11/2011', 'address': 'BANK SALES OFFICE PARK TAMAN, LIGHTING SAVINGS & LOAN COMPANY LTD., MALAYSIAN LINK SCREENS CENTRE, TAMAN BERKELEY', 'total': '2811 A: Since your file has this structure: <tr><td><a name="Company_Name"></a>Company Name</td><td>JALAN ANGSA <tr><td><a name="Date_of_Receipt'}
2023-01-25 19:45:54,234 - __main__ - INFO - 92 - <module>() - Predicting document 195...
2023-01-25 19:45:55,863 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:45:55,863 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:55,863 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:55,864 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:55,864 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:55,864 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:55,864 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:55,864 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:55,865 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:55,865 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:55,865 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:55,865 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:55,865 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:45:55,865 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:55,865 - __main__ - INFO - 96 - <module>() - Final prediction for document 195: {}
2023-01-25 19:45:55,866 - __main__ - INFO - 92 - <module>() - Predicting document 196...
2023-01-25 19:46:02,226 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  NIL
Address of Company: NIL
Date of Receipt: NIL
Total: NIL

Click the button labeled “Run Test” to generate the desired HTML output.

Use Xpath to find all  elements

You can use Xpath to obtain all <th> values:
//tr/th[@class='item-price']/text()

This will return:
150.00
800.00

Use Xpath to check for each item in the store with a price greater than or equal to $1,000
Use an if statement in a loop to output
2023-01-25 19:46:02,226 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:02,227 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:02,227 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NIL
Address of Company: NIL

2023-01-25 19:46:02,228 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NIL Address of Company: NIL
2023-01-25 19:46:02,228 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:02,228 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NIL
Total: NIL

Click the button labeled “Run Test” to generate the desired HTML output.

Use Xpath to find all  elements

You can use Xpath to obtain all <th> values:
//tr/th[@class='item-price']/text()

This will return:
150.00
800.00

Use Xpath to check for each item in the store with a price greater than or equal to $1,000
Use an if statement in a loop to output
2023-01-25 19:46:02,229 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NIL Total: NIL Click the button labeled “Run Test” to generate the desired HTML output. Use Xpath to find all elements You can use Xpath to obtain all <th> values: //tr/th[@class='item-price']/text() This will return: 150.00 800.00 Use Xpath to check for each item in the store with a price greater than or equal to $1,000 Use an if statement in a loop to output
2023-01-25 19:46:02,229 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:02,230 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NIL
Date of Receipt: NIL

2023-01-25 19:46:02,230 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NIL Date of Receipt: NIL
2023-01-25 19:46:02,230 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:02,231 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NIL

Click the button labeled “Run Test” to generate the desired HTML output.

Use Xpath to find all  elements

You can use Xpath to obtain all <th> values:
//tr/th[@class='item-price']/text()

This will return:
150.00
800.00

Use Xpath to check for each item in the store with a price greater than or equal to $1,000
Use an if statement in a loop to output
2023-01-25 19:46:02,231 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NIL Click the button labeled “Run Test” to generate the desired HTML output. Use Xpath to find all elements You can use Xpath to obtain all <th> values: //tr/th[@class='item-price']/text() This will return: 150.00 800.00 Use Xpath to check for each item in the store with a price greater than or equal to $1,000 Use an if statement in a loop to output
2023-01-25 19:46:02,231 - __main__ - INFO - 96 - <module>() - Final prediction for document 196: {'company': 'NIL Address of Company: NIL', 'date': "NIL Total: NIL Click the button labeled “Run Test” to generate the desired HTML output. Use Xpath to find all elements You can use Xpath to obtain all <th> values: //tr/th[@class='item-price']/text() This will return: 150.00 800.00 Use Xpath to check for each item in the store with a price greater than or equal to $1,000 Use an if statement in a loop to output", 'address': 'NIL Date of Receipt: NIL', 'total': "NIL Click the button labeled “Run Test” to generate the desired HTML output. Use Xpath to find all elements You can use Xpath to obtain all <th> values: //tr/th[@class='item-price']/text() This will return: 150.00 800.00 Use Xpath to check for each item in the store with a price greater than or equal to $1,000 Use an if statement in a loop to output"}
2023-01-25 19:46:02,233 - __main__ - INFO - 92 - <module>() - Predicting document 197...
2023-01-25 19:46:09,671 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  2
Date of Receipt: 4
Address of Company:
Total: RM10,000
Gardenia Bakeries (KL) SDN BHD
Sdn Bhd
S/N: 139386 X
S/N:
Lot 3, Jalan Pelabur 23/1, 4300
4S
S/N: 139386 X
S/N:
Jalan Pelabur 23/1,
40300
Shah Alam, Selangor
Phone: +603-55423228
GST ID: 000381399040
Tax Invoice
2023-01-25 19:46:09,672 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:09,672 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:09,672 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2

2023-01-25 19:46:09,673 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2
2023-01-25 19:46:09,673 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:09,673 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4

2023-01-25 19:46:09,673 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4
2023-01-25 19:46:09,673 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:09,674 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:09,674 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:09,674 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:09,674 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM10,000
Gardenia Bakeries (KL) SDN BHD
Sdn Bhd
S/N: 139386 X
S/N:
Lot 3, Jalan Pelabur 23/1, 4300
4S
S/N: 139386 X
S/N:
Jalan Pelabur 23/1,
40300
Shah Alam, Selangor
Phone: +603-55423228
GST ID: 000381399040
Tax Invoice
2023-01-25 19:46:09,674 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM10,000 Gardenia Bakeries (KL) SDN BHD Sdn Bhd S/N: 139386 X S/N: Lot 3, Jalan Pelabur 23/1, 4300 4S S/N: 139386 X S/N: Jalan Pelabur 23/1, 40300 Shah Alam, Selangor Phone: +603-55423228 GST ID: 000381399040 Tax Invoice
2023-01-25 19:46:09,674 - __main__ - INFO - 96 - <module>() - Final prediction for document 197: {'company': '2', 'date': '4', 'total': 'RM10,000 Gardenia Bakeries (KL) SDN BHD Sdn Bhd S/N: 139386 X S/N: Lot 3, Jalan Pelabur 23/1, 4300 4S S/N: 139386 X S/N: Jalan Pelabur 23/1, 40300 Shah Alam, Selangor Phone: +603-55423228 GST ID: 000381399040 Tax Invoice'}
2023-01-25 19:46:09,676 - __main__ - INFO - 92 - <module>() - Predicting document 198...
2023-01-25 19:46:12,803 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date of Receipt: DATE OF RECEIPT
Address of Company: COMPANY ADDRESS
Total: TOTAL AMOUNT PAID
2023-01-25 19:46:12,804 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:12,805 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:12,805 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME

2023-01-25 19:46:12,806 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME
2023-01-25 19:46:12,806 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:12,806 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DATE OF RECEIPT

2023-01-25 19:46:12,806 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DATE OF RECEIPT
2023-01-25 19:46:12,807 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:12,807 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY ADDRESS

2023-01-25 19:46:12,807 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY ADDRESS
2023-01-25 19:46:12,807 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:12,808 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TOTAL AMOUNT PAID
2023-01-25 19:46:12,808 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL AMOUNT PAID
2023-01-25 19:46:12,808 - __main__ - INFO - 96 - <module>() - Final prediction for document 198: {'company': 'COMPANY NAME', 'date': 'DATE OF RECEIPT', 'address': 'COMPANY ADDRESS', 'total': 'TOTAL AMOUNT PAID'}
2023-01-25 19:46:12,810 - __main__ - INFO - 92 - <module>() - Predicting document 199...
2023-01-25 19:46:14,317 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:46:14,318 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:14,318 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:14,318 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:14,318 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:14,319 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:14,319 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:14,319 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:14,319 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:14,319 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:14,319 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:14,320 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:14,320 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:46:14,320 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:14,320 - __main__ - INFO - 96 - <module>() - Final prediction for document 199: {}
2023-01-25 19:46:14,321 - __main__ - INFO - 92 - <module>() - Predicting document 200...
2023-01-25 19:46:15,955 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:

Address of Company:

Total:

2023-01-25 19:46:15,955 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:15,955 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:15,955 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:46:15,955 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:15,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:15,956 - __main__ - INFO - 96 - <module>() - Final prediction for document 200: {}
2023-01-25 19:46:15,957 - __main__ - INFO - 92 - <module>() - Predicting document 201...
2023-01-25 19:46:17,890 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SITRA
Date of Receipt: 20180219
Address of Company:
Total:
2023-01-25 19:46:17,890 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:17,891 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:17,891 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SITRA

2023-01-25 19:46:17,892 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SITRA
2023-01-25 19:46:17,892 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:17,893 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20180219

2023-01-25 19:46:17,893 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20180219
2023-01-25 19:46:17,893 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:17,894 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:17,894 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:17,894 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:17,894 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:46:17,895 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:17,895 - __main__ - INFO - 96 - <module>() - Final prediction for document 201: {'company': 'SITRA', 'date': '20180219'}
2023-01-25 19:46:17,897 - __main__ - INFO - 92 - <module>() - Predicting document 202...
2023-01-25 19:46:24,762 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

If the value is null then copy and paste the text from the PDF.

Output:

[1,] "CompanyName" "2018/05/31" "Company Address" "61.99" "Total"
[2,] "CompanyName" "2018/06/01" "Company Address" "65.70" "Total"

Thank you.

A:

You could do that with a combination of regular expressions and table lookups:
read.table(text =
    g
2023-01-25 19:46:24,762 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:24,762 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:24,763 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:24,763 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:24,763 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:24,763 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:24,763 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:24,763 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:24,764 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:24,764 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:24,764 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:24,764 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

If the value is null then copy and paste the text from the PDF.

Output:

[1,] "CompanyName" "2018/05/31" "Company Address" "61.99" "Total"
[2,] "CompanyName" "2018/06/01" "Company Address" "65.70" "Total"

Thank you.

A:

You could do that with a combination of regular expressions and table lookups:
read.table(text =
    g
2023-01-25 19:46:24,764 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: If the value is null then copy and paste the text from the PDF. Output: [1,] "CompanyName" "2018/05/31" "Company Address" "61.99" "Total" [2,] "CompanyName" "2018/06/01" "Company Address" "65.70" "Total" Thank you. A: You could do that with a combination of regular expressions and table lookups: read.table(text =   g
2023-01-25 19:46:24,764 - __main__ - INFO - 96 - <module>() - Final prediction for document 202: {'total': 'If the value is null then copy and paste the text from the PDF. Output: [1,] "CompanyName" "2018/05/31" "Company Address" "61.99" "Total" [2,] "CompanyName" "2018/06/01" "Company Address" "65.70" "Total" Thank you. A: You could do that with a combination of regular expressions and table lookups: read.table(text =   g'}
2023-01-25 19:46:24,765 - __main__ - INFO - 92 - <module>() - Predicting document 203...
2023-01-25 19:46:27,597 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SAMSUNG ELECTRONICS SDN. BHD.
Date of Receipt: 26-02-2018
Address of Company: 42-46, JLN SULTAN AZLAN
Total: RM7.42
2023-01-25 19:46:27,598 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:27,598 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:27,599 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SAMSUNG ELECTRONICS SDN. BHD.

2023-01-25 19:46:27,599 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SAMSUNG ELECTRONICS SDN. BHD.
2023-01-25 19:46:27,600 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:27,601 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  26-02-2018

2023-01-25 19:46:27,601 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 26-02-2018
2023-01-25 19:46:27,601 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:27,602 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  42-46, JLN SULTAN AZLAN

2023-01-25 19:46:27,602 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 42-46, JLN SULTAN AZLAN
2023-01-25 19:46:27,602 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:27,602 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM7.42
2023-01-25 19:46:27,603 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM7.42
2023-01-25 19:46:27,603 - __main__ - INFO - 96 - <module>() - Final prediction for document 203: {'company': 'SAMSUNG ELECTRONICS SDN. BHD.', 'date': '26-02-2018', 'address': '42-46, JLN SULTAN AZLAN', 'total': 'RM7.42'}
2023-01-25 19:46:27,605 - __main__ - INFO - 92 - <module>() - Predicting document 204...
2023-01-25 19:46:35,065 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU STATIONERY
Date of Receipt: 05/04/2017
Address of Company: 4-1 Jalan Sanyu, Taman Sanyu II, U13/12, Kuala Lumpur
Total: 3.3000

What is the name of the company that sold you the goods?

SANYU STATIONERY SHOP
NO. 31G&33G, JALAN SETIA INDAH X ,U13/X
40170 SETIA ALAM
MOBILE /WHATSAPPS : +6012-918 7937
2023-01-25 19:46:35,066 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:35,066 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:35,066 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU STATIONERY

2023-01-25 19:46:35,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU STATIONERY
2023-01-25 19:46:35,067 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:35,067 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  05/04/2017

2023-01-25 19:46:35,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05/04/2017
2023-01-25 19:46:35,068 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:35,068 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4-1 Jalan Sanyu, Taman Sanyu II, U13/12, Kuala Lumpur

2023-01-25 19:46:35,068 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4-1 Jalan Sanyu, Taman Sanyu II, U13/12, Kuala Lumpur
2023-01-25 19:46:35,069 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:35,069 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3.3000

What is the name of the company that sold you the goods?

SANYU STATIONERY SHOP
NO. 31G&33G, JALAN SETIA INDAH X ,U13/X
40170 SETIA ALAM
MOBILE /WHATSAPPS : +6012-918 7937
2023-01-25 19:46:35,069 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3.3000 What is the name of the company that sold you the goods? SANYU STATIONERY SHOP NO. 31G&33G, JALAN SETIA INDAH X ,U13/X 40170 SETIA ALAM MOBILE /WHATSAPPS : +6012-918 7937
2023-01-25 19:46:35,069 - __main__ - INFO - 96 - <module>() - Final prediction for document 204: {'company': 'SANYU STATIONERY', 'date': '05/04/2017', 'address': '4-1 Jalan Sanyu, Taman Sanyu II, U13/12, Kuala Lumpur', 'total': '3.3000 What is the name of the company that sold you the goods? SANYU STATIONERY SHOP NO. 31G&33G, JALAN SETIA INDAH X ,U13/X 40170 SETIA ALAM MOBILE /WHATSAPPS : +6012-918 7937'}
2023-01-25 19:46:35,071 - __main__ - INFO - 92 - <module>() - Predicting document 205...
2023-01-25 19:46:41,585 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  'Platinum Racking SDN BHD (PLAT MART)'
Date of Receipt: 22/04/2018
Address of Company: Jalan Lumpur - 77000 Alor Setar, Kedah
Total: 23.00

I have used the above code successfully to extract the data using the values given above. If you run the code then you can see that the data extracted matches what is shown below. The line below the data (and other lines) are "hidden" or collapsed (I think) when you use the text editor as shown in the image below. You can use your
2023-01-25 19:46:41,585 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:41,585 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:41,585 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  'Platinum Racking SDN BHD (PLAT MART)'

2023-01-25 19:46:41,585 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Platinum Racking SDN BHD (PLAT MART)
2023-01-25 19:46:41,585 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:41,586 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22/04/2018

2023-01-25 19:46:41,586 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22/04/2018
2023-01-25 19:46:41,586 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:41,586 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Lumpur - 77000 Alor Setar, Kedah

2023-01-25 19:46:41,586 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Lumpur - 77000 Alor Setar, Kedah
2023-01-25 19:46:41,586 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:41,586 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23.00

I have used the above code successfully to extract the data using the values given above. If you run the code then you can see that the data extracted matches what is shown below. The line below the data (and other lines) are "hidden" or collapsed (I think) when you use the text editor as shown in the image below. You can use your
2023-01-25 19:46:41,586 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23.00 I have used the above code successfully to extract the data using the values given above. If you run the code then you can see that the data extracted matches what is shown below. The line below the data (and other lines) are "hidden" or collapsed (I think) when you use the text editor as shown in the image below. You can use your
2023-01-25 19:46:41,586 - __main__ - INFO - 96 - <module>() - Final prediction for document 205: {'company': 'Platinum Racking SDN BHD (PLAT MART)', 'date': '22/04/2018', 'address': 'Jalan Lumpur - 77000 Alor Setar, Kedah', 'total': '23.00 I have used the above code successfully to extract the data using the values given above. If you run the code then you can see that the data extracted matches what is shown below. The line below the data (and other lines) are "hidden" or collapsed (I think) when you use the text editor as shown in the image below. You can use your'}
2023-01-25 19:46:41,587 - __main__ - INFO - 92 - <module>() - Predicting document 206...
2023-01-25 19:46:49,177 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
date of receipt:
Address of Company:
total:

Question
Create an invoice object.

Answer
  public Invoice( String theCompanyName, Date theDate, Address theAddress, int theTotal ) {
    companyName = theCompanyName;
    date = theDate;
    address = theAddress;
    total = theTotal;
    }

Create an invoice object.

answer
public Invoice( String theCompanyName, Date theDate, Address theAddress, int theTotal ) {
    this.companyName = theCompanyName;
    this.
2023-01-25 19:46:49,178 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:49,179 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:49,179 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:49,179 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:49,179 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:49,180 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:49,180 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:49,180 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:49,181 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:49,181 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:49,181 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:49,181 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Question
Create an invoice object.

Answer
  public Invoice( String theCompanyName, Date theDate, Address theAddress, int theTotal ) {
    companyName = theCompanyName;
    date = theDate;
    address = theAddress;
    total = theTotal;
    }

Create an invoice object.

answer
public Invoice( String theCompanyName, Date theDate, Address theAddress, int theTotal ) {
    this.companyName = theCompanyName;
    this.
2023-01-25 19:46:49,182 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Question Create an invoice object. Answer  public Invoice( String theCompanyName, Date theDate, Address theAddress, int theTotal ) {   companyName = theCompanyName;   date = theDate;   address = theAddress;   total = theTotal;   } Create an invoice object. answer public Invoice( String theCompanyName, Date theDate, Address theAddress, int theTotal ) {   this.companyName = theCompanyName;   this.
2023-01-25 19:46:49,182 - __main__ - INFO - 96 - <module>() - Final prediction for document 206: {'total': 'Question Create an invoice object. Answer  public Invoice( String theCompanyName, Date theDate, Address theAddress, int theTotal ) {   companyName = theCompanyName;   date = theDate;   address = theAddress;   total = theTotal;   } Create an invoice object. answer public Invoice( String theCompanyName, Date theDate, Address theAddress, int theTotal ) {   this.companyName = theCompanyName;   this.'}
2023-01-25 19:46:49,184 - __main__ - INFO - 92 - <module>() - Predicting document 207...
2023-01-25 19:46:51,447 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  A
Date of Receipt: 06/10/2017
Address of Company: A
Total: 33.84
2023-01-25 19:46:51,447 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:51,447 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:51,448 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A

2023-01-25 19:46:51,448 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A
2023-01-25 19:46:51,448 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:51,449 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  06/10/2017

2023-01-25 19:46:51,449 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 06/10/2017
2023-01-25 19:46:51,449 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:51,449 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A

2023-01-25 19:46:51,450 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A
2023-01-25 19:46:51,450 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:51,450 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  33.84
2023-01-25 19:46:51,450 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 33.84
2023-01-25 19:46:51,451 - __main__ - INFO - 96 - <module>() - Final prediction for document 207: {'company': 'A', 'date': '06/10/2017', 'address': 'A', 'total': '33.84'}
2023-01-25 19:46:51,453 - __main__ - INFO - 92 - <module>() - Predicting document 208...
2023-01-25 19:46:57,205 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <cname>
Date of Receipt: <receipt date>
Address of Company: <addr>
Total: <net>
The number between |stop key| and <|stop key|> are your columns.

Example:

Key: Value
Company Name: M&M
Date of Receipt: 2013-11-29
Address of Company: 123 main street
Total: 150.00
2023-01-25 19:46:57,206 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:57,206 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:57,206 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <cname>

2023-01-25 19:46:57,206 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <cname>
2023-01-25 19:46:57,206 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:57,206 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <receipt date>

2023-01-25 19:46:57,206 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <receipt date>
2023-01-25 19:46:57,206 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:57,207 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <addr>

2023-01-25 19:46:57,207 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <addr>
2023-01-25 19:46:57,207 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:57,207 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <net>
The number between |stop key| and <|stop key|> are your columns.

Example:

Key: Value
Company Name: M&M
Date of Receipt: 2013-11-29
Address of Company: 123 main street

2023-01-25 19:46:57,207 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <net> The number between |stop key| and <|stop key|> are your columns. Example: Key: Value Company Name: M&M Date of Receipt: 2013-11-29 Address of Company: 123 main street
2023-01-25 19:46:57,207 - __main__ - INFO - 96 - <module>() - Final prediction for document 208: {'company': '<cname>', 'date': '<receipt date>', 'address': '<addr>', 'total': '<net> The number between |stop key| and <|stop key|> are your columns. Example: Key: Value Company Name: M&M Date of Receipt: 2013-11-29 Address of Company: 123 main street'}
2023-01-25 19:46:57,208 - __main__ - INFO - 92 - <module>() - Predicting document 209...
2023-01-25 19:47:05,076 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Super 7 (RM)
Date of Receipt: 02-09-2018
Address of Company: 1-Utama, KL
Total: RM2.90
|stop key|

Now that you've got your list of keys and values, you can begin the analysis!

Using the "key/value" data, you can determine which shops and products are most popular, and whether they are selling items for cheap, expensive, or at the same price.

Step 2: Select an API

There are a number of APIs to choose from. You'll use Python and the API of choice will
2023-01-25 19:47:05,077 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:05,077 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:05,077 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Super 7 (RM)

2023-01-25 19:47:05,077 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Super 7 (RM)
2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02-09-2018

2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02-09-2018
2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1-Utama, KL

2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1-Utama, KL
2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM2.90
|stop key|

Now that you've got your list of keys and values, you can begin the analysis!

Using the "key/value" data, you can determine which shops and products are most popular, and whether they are selling items for cheap, expensive, or at the same price.

Step 2: Select an API

There are a number of APIs to choose from. You'll use Python and the API of choice will
2023-01-25 19:47:05,078 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM2.90 |stop key| Now that you've got your list of keys and values, you can begin the analysis! Using the "key/value" data, you can determine which shops and products are most popular, and whether they are selling items for cheap, expensive, or at the same price. Step 2: Select an API There are a number of APIs to choose from. You'll use Python and the API of choice will
2023-01-25 19:47:05,078 - __main__ - INFO - 96 - <module>() - Final prediction for document 209: {'company': 'Super 7 (RM)', 'date': '02-09-2018', 'address': '1-Utama, KL', 'total': 'RM2.90 |stop key| Now that you\'ve got your list of keys and values, you can begin the analysis! Using the "key/value" data, you can determine which shops and products are most popular, and whether they are selling items for cheap, expensive, or at the same price. Step 2: Select an API There are a number of APIs to choose from. You\'ll use Python and the API of choice will'}
2023-01-25 19:47:05,080 - __main__ - INFO - 92 - <module>() - Predicting document 210...
2023-01-25 19:47:06,999 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ***********
Date of Receipt: 21/03/2018
Address of Company: ***********
Total: 45.00
2023-01-25 19:47:07,000 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:07,000 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:07,000 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ***********

2023-01-25 19:47:07,001 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ***********
2023-01-25 19:47:07,001 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:07,001 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/03/2018

2023-01-25 19:47:07,001 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/03/2018
2023-01-25 19:47:07,001 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:07,002 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ***********

2023-01-25 19:47:07,002 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ***********
2023-01-25 19:47:07,002 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:07,002 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  45.00
2023-01-25 19:47:07,003 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 45.00
2023-01-25 19:47:07,003 - __main__ - INFO - 96 - <module>() - Final prediction for document 210: {'company': '***********', 'date': '21/03/2018', 'address': '***********', 'total': '45.00'}
2023-01-25 19:47:07,004 - __main__ - INFO - 92 - <module>() - Predicting document 211...
2023-01-25 19:47:09,698 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
2023-01-25 19:47:09,698 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:09,698 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:09,699 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:47:09,699 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:47:09,699 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:09,700 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:47:09,700 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:47:09,700 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:09,700 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:47:09,701 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:47:09,701 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:09,701 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:47:09,701 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:47:09,701 - __main__ - INFO - 96 - <module>() - Final prediction for document 211: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:47:09,703 - __main__ - INFO - 92 - <module>() - Predicting document 212...
2023-01-25 19:47:17,359 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

I've tried using the following code but all of them end up blank. I think that there might be an issue with my regex but I am not too sure what it is. I'm using Java to parse the document.
public static void main(String[] args) throws IOException, URISyntaxException, InterruptedException, SAXException {
        String htmlData = "";
        File root = new File("C:/Users/Admin/Desktop/test.html");
        Buf
2023-01-25 19:47:17,360 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:17,361 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:17,361 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:47:17,362 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:47:17,362 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:17,362 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:47:17,362 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:47:17,363 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:17,363 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:47:17,363 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:47:17,363 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:17,364 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

I've tried using the following code but all of them end up blank. I think that there might be an issue with my regex but I am not too sure what it is. I'm using Java to parse the document.
public static void main(String[] args) throws IOException, URISyntaxException, InterruptedException, SAXException {
        String htmlData = "";
        File root = new File("C:/Users/Admin/Desktop/test.html");
        Buf
2023-01-25 19:47:17,364 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total I've tried using the following code but all of them end up blank. I think that there might be an issue with my regex but I am not too sure what it is. I'm using Java to parse the document. public static void main(String[] args) throws IOException, URISyntaxException, InterruptedException, SAXException {     String htmlData = "";     File root = new File("C:/Users/Admin/Desktop/test.html");     Buf
2023-01-25 19:47:17,364 - __main__ - INFO - 96 - <module>() - Final prediction for document 212: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total I\'ve tried using the following code but all of them end up blank. I think that there might be an issue with my regex but I am not too sure what it is. I\'m using Java to parse the document. public static void main(String[] args) throws IOException, URISyntaxException, InterruptedException, SAXException {     String htmlData = "";     File root = new File("C:/Users/Admin/Desktop/test.html");     Buf'}
2023-01-25 19:47:17,366 - __main__ - INFO - 92 - <module>() - Predicting document 213...
2023-01-25 19:47:19,499 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:47:19,500 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:19,500 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:19,500 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:19,501 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:19,501 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:19,501 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:19,501 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:19,501 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:19,502 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:19,502 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:19,502 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:19,502 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:47:19,502 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:19,503 - __main__ - INFO - 96 - <module>() - Final prediction for document 213: {}
2023-01-25 19:47:19,504 - __main__ - INFO - 92 - <module>() - Predicting document 214...
2023-01-25 19:47:27,517 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Aeon Tamang Maluri
Date of Receipt: 14th January 2019
Address of Company: JLN Jabatan Taman Maluri
Total: 59.00

Input all the data, save the file as "CompanyName_date.txt" in your local drive.

Create a function to get the last row from file and use "str_split" function to retrieve all the words.

I have tried to get the data from this webpage, but the data that I need to get isn't listed on the page. It is inside a table. The title of the table is "Transaction
2023-01-25 19:47:27,519 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:27,520 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:27,520 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Aeon Tamang Maluri

2023-01-25 19:47:27,521 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Aeon Tamang Maluri
2023-01-25 19:47:27,521 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:27,522 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14th January 2019

2023-01-25 19:47:27,522 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14th January 2019
2023-01-25 19:47:27,522 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:27,523 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JLN Jabatan Taman Maluri

2023-01-25 19:47:27,523 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JLN Jabatan Taman Maluri
2023-01-25 19:47:27,524 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:27,524 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  59.00

Input all the data, save the file as "CompanyName_date.txt" in your local drive.

Create a function to get the last row from file and use "str_split" function to retrieve all the words.

I have tried to get the data from this webpage, but the data that I need to get isn't listed on the page. It is inside a table. The title of the table is "Transaction
2023-01-25 19:47:27,524 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 59.00 Input all the data, save the file as "CompanyName_date.txt" in your local drive. Create a function to get the last row from file and use "str_split" function to retrieve all the words. I have tried to get the data from this webpage, but the data that I need to get isn't listed on the page. It is inside a table. The title of the table is "Transaction
2023-01-25 19:47:27,525 - __main__ - INFO - 96 - <module>() - Final prediction for document 214: {'company': 'Aeon Tamang Maluri', 'date': '14th January 2019', 'address': 'JLN Jabatan Taman Maluri', 'total': '59.00 Input all the data, save the file as "CompanyName_date.txt" in your local drive. Create a function to get the last row from file and use "str_split" function to retrieve all the words. I have tried to get the data from this webpage, but the data that I need to get isn\'t listed on the page. It is inside a table. The title of the table is "Transaction'}
2023-01-25 19:47:27,529 - __main__ - INFO - 92 - <module>() - Predicting document 215...
2023-01-25 19:47:34,618 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 06/04/2018
Address of Company:
Total: RM 100.00

The above extract needs to be updated with an appropriate date.

Step 3:

Insert the value of key 'CASHIER' and 'ZERO' in their respective columns.

For all the rows in the table that are missing the values in the key-value pairs that you extract from the document, set the value to 'NULL'.

The result should be as below.

Company Name Date of Receipt Address of Company Total CASHIER ZERO

Step 4
2023-01-25 19:47:34,619 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:34,620 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:34,620 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:34,621 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:34,621 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:34,622 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  06/04/2018

2023-01-25 19:47:34,622 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 06/04/2018
2023-01-25 19:47:34,623 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:34,623 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:34,624 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:34,625 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:34,625 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 100.00

The above extract needs to be updated with an appropriate date.

Step 3:

Insert the value of key 'CASHIER' and 'ZERO' in their respective columns.

For all the rows in the table that are missing the values in the key-value pairs that you extract from the document, set the value to 'NULL'.

The result should be as below.

Company Name Date of Receipt Address of Company Total CASHIER ZERO

Step 4
2023-01-25 19:47:34,626 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 100.00 The above extract needs to be updated with an appropriate date. Step 3: Insert the value of key 'CASHIER' and 'ZERO' in their respective columns. For all the rows in the table that are missing the values in the key-value pairs that you extract from the document, set the value to 'NULL'. The result should be as below. Company Name Date of Receipt Address of Company Total CASHIER ZERO Step 4
2023-01-25 19:47:34,627 - __main__ - INFO - 96 - <module>() - Final prediction for document 215: {'date': '06/04/2018', 'total': "RM 100.00 The above extract needs to be updated with an appropriate date. Step 3: Insert the value of key 'CASHIER' and 'ZERO' in their respective columns. For all the rows in the table that are missing the values in the key-value pairs that you extract from the document, set the value to 'NULL'. The result should be as below. Company Name Date of Receipt Address of Company Total CASHIER ZERO Step 4"}
2023-01-25 19:47:34,630 - __main__ - INFO - 92 - <module>() - Predicting document 216...
2023-01-25 19:47:36,097 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:47:36,098 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:36,099 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:36,099 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:36,100 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:36,100 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:36,101 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:36,101 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:36,102 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:36,102 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:36,103 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:36,104 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:36,104 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:47:36,104 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:36,105 - __main__ - INFO - 96 - <module>() - Final prediction for document 216: {}
2023-01-25 19:47:36,108 - __main__ - INFO - 92 - <module>() - Predicting document 217...
2023-01-25 19:47:38,421 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:47:38,422 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:38,422 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:38,423 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:38,424 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:38,425 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:38,425 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:38,426 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:38,426 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:38,427 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:38,427 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:38,428 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:38,428 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:47:38,428 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:38,429 - __main__ - INFO - 96 - <module>() - Final prediction for document 217: {}
2023-01-25 19:47:38,431 - __main__ - INFO - 92 - <module>() - Predicting document 218...
2023-01-25 19:47:40,307 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:47:40,309 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:40,310 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:40,311 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:40,311 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:40,312 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:40,312 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:40,313 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:40,313 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:40,314 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:40,314 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:40,314 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:40,315 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:47:40,317 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:40,318 - __main__ - INFO - 96 - <module>() - Final prediction for document 218: {}
2023-01-25 19:47:40,320 - __main__ - INFO - 92 - <module>() - Predicting document 219...
2023-01-25 19:47:47,807 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name as it is written on the receipt
Date of Receipt: This can be found on the last page of the receipt
Address of Company: Street name and number and City and Postal code
Total: Value in the last row of the receipt

Recommendation

Incomplete receipts should not be used for this exercise.
Make sure you can use the value from the last row of the receipt, because it contains the total amount.
You can try to find the value from the receipt using a key-value pair. It could be the order number, the product number, the store name, etc...

2023-01-25 19:47:47,808 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:47,808 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name as it is written on the receipt

2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name as it is written on the receipt
2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  This can be found on the last page of the receipt

2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: This can be found on the last page of the receipt
2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Street name and number and City and Postal code

2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Street name and number and City and Postal code
2023-01-25 19:47:47,809 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:47,811 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Value in the last row of the receipt

Recommendation

Incomplete receipts should not be used for this exercise.
Make sure you can use the value from the last row of the receipt, because it contains the total amount.
You can try to find the value from the receipt using a key-value pair. It could be the order number, the product number, the store name, etc...

2023-01-25 19:47:47,811 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Value in the last row of the receipt Recommendation Incomplete receipts should not be used for this exercise. Make sure you can use the value from the last row of the receipt, because it contains the total amount. You can try to find the value from the receipt using a key-value pair. It could be the order number, the product number, the store name, etc...
2023-01-25 19:47:47,811 - __main__ - INFO - 96 - <module>() - Final prediction for document 219: {'company': 'Company Name as it is written on the receipt', 'date': 'This can be found on the last page of the receipt', 'address': 'Street name and number and City and Postal code', 'total': 'Value in the last row of the receipt Recommendation Incomplete receipts should not be used for this exercise. Make sure you can use the value from the last row of the receipt, because it contains the total amount. You can try to find the value from the receipt using a key-value pair. It could be the order number, the product number, the store name, etc...'}
2023-01-25 19:47:47,814 - __main__ - INFO - 92 - <module>() - Predicting document 220...
2023-01-25 19:47:55,429 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  'Tesco'
Date of Receipt: 13 May 18
Address of Company: 3, Fetter Lane
Total: 2

Key: Value
Company Name: 'Costa'
Date of Receipt: 26 May 18
Address of Company: 5, The Parade, Eastbourne
Total: 5

Key: Value
Company Name: 'Waitrose'
Date of Receipt: 31 May 18
Address of Company: 1, Guildford Rd
Total: 1

Key: Value
Company Name: 'Sainsbury's'
Date of Receipt: 31 May 18

2023-01-25 19:47:55,429 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:55,429 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:55,430 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  'Tesco'

2023-01-25 19:47:55,430 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tesco
2023-01-25 19:47:55,430 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:55,430 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13 May 18

2023-01-25 19:47:55,430 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13 May 18
2023-01-25 19:47:55,430 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:55,431 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3, Fetter Lane

2023-01-25 19:47:55,431 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3, Fetter Lane
2023-01-25 19:47:55,431 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:55,431 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2

Key: Value
Company Name: 'Costa'
Date of Receipt: 26 May 18
Address of Company: 5, The Parade, Eastbourne

2023-01-25 19:47:55,431 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2 Key: Value Company Name: 'Costa' Date of Receipt: 26 May 18 Address of Company: 5, The Parade, Eastbourne
2023-01-25 19:47:55,431 - __main__ - INFO - 96 - <module>() - Final prediction for document 220: {'company': 'Tesco', 'date': '13 May 18', 'address': '3, Fetter Lane', 'total': "2 Key: Value Company Name: 'Costa' Date of Receipt: 26 May 18 Address of Company: 5, The Parade, Eastbourne"}
2023-01-25 19:47:55,432 - __main__ - INFO - 92 - <module>() - Predicting document 221...
2023-01-25 19:47:59,277 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <COMPANY NAME>
Date of Receipt: <DATE OF RECEIPT>
Address of Company: <ADDRESS OF COMPANY>
Total: <TOTAL INVOICE>

If you want to extract only a single value from a multi-value field, use the value extracted above.
2023-01-25 19:47:59,277 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:59,277 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:59,278 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <COMPANY NAME>

2023-01-25 19:47:59,278 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <COMPANY NAME>
2023-01-25 19:47:59,278 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:59,278 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <DATE OF RECEIPT>

2023-01-25 19:47:59,279 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <DATE OF RECEIPT>
2023-01-25 19:47:59,279 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:59,279 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <ADDRESS OF COMPANY>

2023-01-25 19:47:59,279 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <ADDRESS OF COMPANY>
2023-01-25 19:47:59,280 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:59,280 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <TOTAL INVOICE>

If you want to extract only a single value from a multi-value field, use the value extracted above.
2023-01-25 19:47:59,280 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <TOTAL INVOICE> If you want to extract only a single value from a multi-value field, use the value extracted above.
2023-01-25 19:47:59,280 - __main__ - INFO - 96 - <module>() - Final prediction for document 221: {'company': '<COMPANY NAME>', 'date': '<DATE OF RECEIPT>', 'address': '<ADDRESS OF COMPANY>', 'total': '<TOTAL INVOICE> If you want to extract only a single value from a multi-value field, use the value extracted above.'}
2023-01-25 19:47:59,282 - __main__ - INFO - 92 - <module>() - Predicting document 222...
2023-01-25 19:48:07,129 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  NULL
Date of Receipt: NULL
Address of Company: NULL
Total: NULL

The above example data will give you the following result:
Company Name     : Company A
Date of Receipt   : 11/06/2018
Address of Company: 1 Jalan Permas 10, Bandar Baru Permas Jaya,
Total: RM28.20, GST Incl, Cst Inc, GST: RM1.80.

How to build the above query

Step 1: Extract the data from HTML to an object.
Note: this is just an example, yours will be
2023-01-25 19:48:07,131 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:07,132 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:07,133 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NULL

2023-01-25 19:48:07,133 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NULL
2023-01-25 19:48:07,133 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:07,133 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NULL

2023-01-25 19:48:07,134 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NULL
2023-01-25 19:48:07,134 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:07,134 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NULL

2023-01-25 19:48:07,134 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NULL
2023-01-25 19:48:07,135 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:07,135 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NULL

The above example data will give you the following result:
Company Name     : Company A
Date of Receipt   : 11/06/2018
Address of Company: 1 Jalan Permas 10, Bandar Baru Permas Jaya,

2023-01-25 19:48:07,135 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NULL The above example data will give you the following result: Company Name   : Company A Date of Receipt  : 11/06/2018 Address of Company: 1 Jalan Permas 10, Bandar Baru Permas Jaya,
2023-01-25 19:48:07,135 - __main__ - INFO - 96 - <module>() - Final prediction for document 222: {'total': 'NULL The above example data will give you the following result: Company Name   : Company A Date of Receipt  : 11/06/2018 Address of Company: 1 Jalan Permas 10, Bandar Baru Permas Jaya,'}
2023-01-25 19:48:07,137 - __main__ - INFO - 92 - <module>() - Predicting document 223...
2023-01-25 19:48:09,167 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Adjustment Note
"<|stop key|>"
2023-01-25 19:48:09,167 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:09,168 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:09,168 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:09,169 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:09,169 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:09,169 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:09,170 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:09,170 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:09,171 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:09,171 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:09,171 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:09,171 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Adjustment Note
"<|stop key|>"
2023-01-25 19:48:09,172 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Adjustment Note "<|stop key|>"
2023-01-25 19:48:09,172 - __main__ - INFO - 96 - <module>() - Final prediction for document 223: {'total': 'Adjustment Note "<|stop key|>"'}
2023-01-25 19:48:09,173 - __main__ - INFO - 92 - <module>() - Predicting document 224...
2023-01-25 19:48:16,404 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
date of receipt:
address of company:
total:

Please extract as much information as you can, to the extent that you can obtain and understand. (The system will discard the document after successful extraction)

Then enter the below data into the appropriate boxes below and click the "Submit" button.
Note: It will be helpful if you put the above document to "Preview" mode by clicking on the "Preview" button, and take a careful look at the result. Then, you can check the accuracy of your answer and proceed to submit the document to the online application program.

Please click the
2023-01-25 19:48:16,407 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:16,407 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:16,408 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:16,408 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:16,409 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:16,409 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:16,409 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:16,410 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:16,410 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:16,410 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:16,410 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:16,411 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Please extract as much information as you can, to the extent that you can obtain and understand. (The system will discard the document after successful extraction)

Then enter the below data into the appropriate boxes below and click the "Submit" button.
Note: It will be helpful if you put the above document to "Preview" mode by clicking on the "Preview" button, and take a careful look at the result. Then, you can check the accuracy of your answer and proceed to submit the document to the online application program.

Please click the
2023-01-25 19:48:16,411 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Please extract as much information as you can, to the extent that you can obtain and understand. (The system will discard the document after successful extraction) Then enter the below data into the appropriate boxes below and click the "Submit" button. Note: It will be helpful if you put the above document to "Preview" mode by clicking on the "Preview" button, and take a careful look at the result. Then, you can check the accuracy of your answer and proceed to submit the document to the online application program. Please click the
2023-01-25 19:48:16,411 - __main__ - INFO - 96 - <module>() - Final prediction for document 224: {'total': 'Please extract as much information as you can, to the extent that you can obtain and understand. (The system will discard the document after successful extraction) Then enter the below data into the appropriate boxes below and click the "Submit" button. Note: It will be helpful if you put the above document to "Preview" mode by clicking on the "Preview" button, and take a careful look at the result. Then, you can check the accuracy of your answer and proceed to submit the document to the online application program. Please click the'}
2023-01-25 19:48:16,416 - __main__ - INFO - 92 - <module>() - Predicting document 225...
2023-01-25 19:48:19,355 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
:<|stop key|>:
2023-01-25 19:48:19,356 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:19,356 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:19,356 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:19,357 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:19,357 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:19,357 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:19,357 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:19,358 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:19,358 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:19,358 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:19,359 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:19,359 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
:<|stop key|>:
2023-01-25 19:48:19,359 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: :<|stop key|>:
2023-01-25 19:48:19,359 - __main__ - INFO - 96 - <module>() - Final prediction for document 225: {'total': ':<|stop key|>:'}
2023-01-25 19:48:19,361 - __main__ - INFO - 92 - <module>() - Predicting document 226...
2023-01-25 19:48:27,410 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Nutrafruit"
Date of Receipt: 27/05/2018
Address of Company: Kajang
Total: 955.00

Input the data above into the document below.

Key: Value
Company Name: "H & S"
Date of Receipt: 17/04/2018
Address of Company: Kajang
Total: 663.00

Input the data above into the document below.

Key: Value
Company Name: "L&T Agro Berhad"
Date of Receipt: 18/05/2018
Address of Company:
2023-01-25 19:48:27,412 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:27,412 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:27,412 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Nutrafruit"

2023-01-25 19:48:27,413 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Nutrafruit
2023-01-25 19:48:27,413 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:27,413 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27/05/2018

2023-01-25 19:48:27,414 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27/05/2018
2023-01-25 19:48:27,414 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:27,414 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kajang

2023-01-25 19:48:27,414 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kajang
2023-01-25 19:48:27,415 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:27,415 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  955.00

Input the data above into the document below.

Key: Value
Company Name: "H & S"
Date of Receipt: 17/04/2018
Address of Company: Kajang

2023-01-25 19:48:27,415 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 955.00 Input the data above into the document below. Key: Value Company Name: "H & S" Date of Receipt: 17/04/2018 Address of Company: Kajang
2023-01-25 19:48:27,415 - __main__ - INFO - 96 - <module>() - Final prediction for document 226: {'company': 'Nutrafruit', 'date': '27/05/2018', 'address': 'Kajang', 'total': '955.00 Input the data above into the document below. Key: Value Company Name: "H & S" Date of Receipt: 17/04/2018 Address of Company: Kajang'}
2023-01-25 19:48:27,417 - __main__ - INFO - 92 - <module>() - Predicting document 227...
2023-01-25 19:48:29,505 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 30/12/2016
Address of Company:
Total:
2023-01-25 19:48:29,505 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:29,506 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:29,506 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:29,506 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:29,507 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:29,507 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30/12/2016

2023-01-25 19:48:29,507 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30/12/2016
2023-01-25 19:48:29,508 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:29,508 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:29,508 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:29,509 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:29,509 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:48:29,509 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:29,509 - __main__ - INFO - 96 - <module>() - Final prediction for document 227: {'date': '30/12/2016'}
2023-01-25 19:48:29,510 - __main__ - INFO - 92 - <module>() - Predicting document 228...
2023-01-25 19:48:36,990 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Stop key is not found in the document above. It's default value will be used as the end of the document.

The following template can be used to output the above template by clicking on the "Save Template" button to save the template.

This document uses the same template, just add the input.

To generate a document, add the template in the template box.

Save the document.

To print the document, select the document in the templates folder and click "Print Template" button.

You are limited to one template per transaction for a given file name, i.
2023-01-25 19:48:36,992 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:36,992 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:36,993 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Stop key is not found in the document above. It's default value will be used as the end of the document.

The following template can be used to output the above template by clicking on the "Save Template" button to save the template.

This document uses the same template, just add the input.

To generate a document, add the template in the template box.

Save the document.

To print the document, select the document in the templates folder and click "Print Template" button.

You are limited to one template per transaction for a given file name, i.
2023-01-25 19:48:36,993 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Stop key is not found in the document above. It's default value will be used as the end of the document. The following template can be used to output the above template by clicking on the "Save Template" button to save the template. This document uses the same template, just add the input. To generate a document, add the template in the template box. Save the document. To print the document, select the document in the templates folder and click "Print Template" button. You are limited to one template per transaction for a given file name, i.
2023-01-25 19:48:36,993 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:36,994 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:36,994 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:36,994 - __main__ - INFO - 96 - <module>() - Final prediction for document 228: {'company': 'Stop key is not found in the document above. It\'s default value will be used as the end of the document. The following template can be used to output the above template by clicking on the "Save Template" button to save the template. This document uses the same template, just add the input. To generate a document, add the template in the template box. Save the document. To print the document, select the document in the templates folder and click "Print Template" button. You are limited to one template per transaction for a given file name, i.'}
2023-01-25 19:48:36,997 - __main__ - INFO - 92 - <module>() - Predicting document 229...
2023-01-25 19:48:44,401 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Dashboard:
Enterprise Search:
Search Documents using:
Documents from the search results will be displayed in this page. For example, if the user searched documents on "JOHN" keyword, the documents are displayed as below.
Click the

1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
1.9
1.10
1.11
1.12
1.13
1.14
1.15
1.16
1.17
1.18
1
2023-01-25 19:48:44,402 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:44,402 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:44,403 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Dashboard:
Enterprise Search:
Search Documents using:
Documents from the search results will be displayed in this page. For example, if the user searched documents on "JOHN" keyword, the documents are displayed as below.
Click the

1.1
1.2
1.3
1.4
1.5
1.6
1.7
1.8
1.9
1.10
1.11
1.12
1.13
1.14
1.15
1.16
1.17
1.18
1
2023-01-25 19:48:44,403 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Dashboard: Enterprise Search: Search Documents using: Documents from the search results will be displayed in this page. For example, if the user searched documents on "JOHN" keyword, the documents are displayed as below. Click the 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.10 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1
2023-01-25 19:48:44,403 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:44,403 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:44,404 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:44,404 - __main__ - INFO - 96 - <module>() - Final prediction for document 229: {'company': 'Dashboard: Enterprise Search: Search Documents using: Documents from the search results will be displayed in this page. For example, if the user searched documents on "JOHN" keyword, the documents are displayed as below. Click the 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.10 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1'}
2023-01-25 19:48:44,406 - __main__ - INFO - 92 - <module>() - Predicting document 230...
2023-01-25 19:48:52,227 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  MCDONALD’S
Date of Receipt: 26/05/2018
Address of Company: 9 Jalan SS21/39, 47500 Petaling Jaya
Total: 32.25
Tax Incl GST: 32.25
<?xml version="1.0"?>
<document>
<Company Name="MCDONALD'S">
<Date of Receipt="26/05/2018">
<Address of Company="9 Jalan SS21/39, 47500 Petaling Jaya">
<Total><<|stop key|>></Total>
<Tax
2023-01-25 19:48:52,228 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:52,229 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:52,229 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MCDONALD’S

2023-01-25 19:48:52,229 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MCDONALD’S
2023-01-25 19:48:52,230 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:52,230 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  26/05/2018

2023-01-25 19:48:52,230 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 26/05/2018
2023-01-25 19:48:52,230 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:52,231 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9 Jalan SS21/39, 47500 Petaling Jaya

2023-01-25 19:48:52,231 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9 Jalan SS21/39, 47500 Petaling Jaya
2023-01-25 19:48:52,231 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:52,232 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  32.25
Tax Incl GST: 32.25
<?xml version="1.0"?>
<document>
<Company Name="MCDONALD'S">
<Date of Receipt="26/05/2018">
<Address of Company="9 Jalan SS21/39, 47500 Petaling Jaya">
<Total><<|stop key|>></Total>
<Tax
2023-01-25 19:48:52,232 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 32.25 Tax Incl GST: 32.25 <?xml version="1.0"?> <document> <Company Name="MCDONALD'S"> <Date of Receipt="26/05/2018"> <Address of Company="9 Jalan SS21/39, 47500 Petaling Jaya"> <Total><<|stop key|>></Total> <Tax
2023-01-25 19:48:52,232 - __main__ - INFO - 96 - <module>() - Final prediction for document 230: {'company': 'MCDONALD’S', 'date': '26/05/2018', 'address': '9 Jalan SS21/39, 47500 Petaling Jaya', 'total': '32.25 Tax Incl GST: 32.25 <?xml version="1.0"?> <document> <Company Name="MCDONALD\'S"> <Date of Receipt="26/05/2018"> <Address of Company="9 Jalan SS21/39, 47500 Petaling Jaya"> <Total><<|stop key|>></Total> <Tax'}
2023-01-25 19:48:52,234 - __main__ - INFO - 92 - <module>() - Predicting document 231...
2023-01-25 19:48:59,860 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KUEHNE & NAGEL SDN BHD
Date of Receipt: 12 MAR 2018 08:01AM
Address of Company: PT 17, TANjung Tengah
Total:
14.05
Rounding:
0.00
Tax:
1.20
Ref no: 00600736645031911
Goods sold are not returnable. TQ

You can see that the fields to be extracted are all in <|quote|>.
To get the information you want, you can do something like

For my project at work, I am doing this
2023-01-25 19:48:59,861 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:59,861 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:59,862 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KUEHNE & NAGEL SDN BHD

2023-01-25 19:48:59,862 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KUEHNE & NAGEL SDN BHD
2023-01-25 19:48:59,862 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:59,863 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12 MAR 2018 08:01AM

2023-01-25 19:48:59,863 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12 MAR 2018 08:01AM
2023-01-25 19:48:59,863 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:59,864 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PT 17, TANjung Tengah

2023-01-25 19:48:59,864 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PT 17, TANjung Tengah
2023-01-25 19:48:59,864 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:59,864 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
14.05
Rounding:
0.00
Tax:
1.20
Ref no: 00600736645031911
Goods sold are not returnable. TQ

You can see that the fields to be extracted are all in <|quote|>.
To get the information you want, you can do something like

For my project at work, I am doing this
2023-01-25 19:48:59,865 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14.05 Rounding: 0.00 Tax: 1.20 Ref no: 00600736645031911 Goods sold are not returnable. TQ You can see that the fields to be extracted are all in <|quote|>. To get the information you want, you can do something like For my project at work, I am doing this
2023-01-25 19:48:59,865 - __main__ - INFO - 96 - <module>() - Final prediction for document 231: {'company': 'KUEHNE & NAGEL SDN BHD', 'date': '12 MAR 2018 08:01AM', 'address': 'PT 17, TANjung Tengah', 'total': '14.05 Rounding: 0.00 Tax: 1.20 Ref no: 00600736645031911 Goods sold are not returnable. TQ You can see that the fields to be extracted are all in <|quote|>. To get the information you want, you can do something like For my project at work, I am doing this'}
2023-01-25 19:48:59,867 - __main__ - INFO - 92 - <module>() - Predicting document 232...
2023-01-25 19:49:07,656 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  A
Date of Receipt:
Address of Company: 0001
Total: 42.25
Tax-invoice/Adjustment Note: 2.13

The input above is an XML file with a structure that reflects that of a GST invoice

Output (Printable Document):
This is the tax invoice generated by the java program

The tax invoice is now on its way to GSTIN-2C - GST return centre

It should be noted that GSTIN2C works on "first-in-first-out" basis. In other words, your invoices will not be processed in the
2023-01-25 19:49:07,657 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:07,658 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:07,658 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A

2023-01-25 19:49:07,659 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A
2023-01-25 19:49:07,659 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:07,659 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:07,660 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:07,660 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:07,660 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0001

2023-01-25 19:49:07,661 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0001
2023-01-25 19:49:07,661 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:07,661 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  42.25
Tax-invoice/Adjustment Note: 2.13

The input above is an XML file with a structure that reflects that of a GST invoice

Output (Printable Document):
This is the tax invoice generated by the java program

The tax invoice is now on its way to GSTIN-2C - GST return centre

It should be noted that GSTIN2C works on "first-in-first-out" basis. In other words, your invoices will not be processed in the
2023-01-25 19:49:07,661 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 42.25 Tax-invoice/Adjustment Note: 2.13 The input above is an XML file with a structure that reflects that of a GST invoice Output (Printable Document): This is the tax invoice generated by the java program The tax invoice is now on its way to GSTIN-2C - GST return centre It should be noted that GSTIN2C works on "first-in-first-out" basis. In other words, your invoices will not be processed in the
2023-01-25 19:49:07,662 - __main__ - INFO - 96 - <module>() - Final prediction for document 232: {'company': 'A', 'address': '0001', 'total': '42.25 Tax-invoice/Adjustment Note: 2.13 The input above is an XML file with a structure that reflects that of a GST invoice Output (Printable Document): This is the tax invoice generated by the java program The tax invoice is now on its way to GSTIN-2C - GST return centre It should be noted that GSTIN2C works on "first-in-first-out" basis. In other words, your invoices will not be processed in the'}
2023-01-25 19:49:07,663 - __main__ - INFO - 92 - <module>() - Predicting document 233...
2023-01-25 19:49:14,898 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 29/03/2018
Address of Company:
Total: 3070.00

If you would like to print this form:

Click "File > Print", then click the "Page Setup" tab.

Click the "Page Setup" button, and then under "Paper Size" click the "Landscape" tab. Then click the "OK" button.

Click the "Printer" tab, and then in the "Scale" drop-down list, select "Custom".

For the number of copies, enter: 3 copies

Click "Print"
2023-01-25 19:49:14,899 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:14,900 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:14,900 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:14,900 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:14,900 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:14,901 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  29/03/2018

2023-01-25 19:49:14,901 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 29/03/2018
2023-01-25 19:49:14,901 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:14,902 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:14,902 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:14,902 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:14,902 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3070.00

If you would like to print this form:

Click "File > Print", then click the "Page Setup" tab.

Click the "Page Setup" button, and then under "Paper Size" click the "Landscape" tab. Then click the "OK" button.

Click the "Printer" tab, and then in the "Scale" drop-down list, select "Custom".

For the number of copies, enter: 3 copies

Click "Print"
2023-01-25 19:49:14,903 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3070.00 If you would like to print this form: Click "File > Print", then click the "Page Setup" tab. Click the "Page Setup" button, and then under "Paper Size" click the "Landscape" tab. Then click the "OK" button. Click the "Printer" tab, and then in the "Scale" drop-down list, select "Custom". For the number of copies, enter: 3 copies Click "Print"
2023-01-25 19:49:14,903 - __main__ - INFO - 96 - <module>() - Final prediction for document 233: {'date': '29/03/2018', 'total': '3070.00 If you would like to print this form: Click "File > Print", then click the "Page Setup" tab. Click the "Page Setup" button, and then under "Paper Size" click the "Landscape" tab. Then click the "OK" button. Click the "Printer" tab, and then in the "Scale" drop-down list, select "Custom". For the number of copies, enter: 3 copies Click "Print"'}
2023-01-25 19:49:14,905 - __main__ - INFO - 92 - <module>() - Predicting document 234...
2023-01-25 19:49:17,094 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 25-SEP-18
Address of Company: null
Total: 3.10
2023-01-25 19:49:17,094 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:17,095 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:17,096 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:49:17,096 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:49:17,097 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:17,097 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25-SEP-18

2023-01-25 19:49:17,097 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25-SEP-18
2023-01-25 19:49:17,098 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:17,098 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:49:17,098 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:49:17,099 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:17,099 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3.10
2023-01-25 19:49:17,099 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3.10
2023-01-25 19:49:17,099 - __main__ - INFO - 96 - <module>() - Final prediction for document 234: {'date': '25-SEP-18', 'total': '3.10'}
2023-01-25 19:49:17,101 - __main__ - INFO - 92 - <module>() - Predicting document 235...
2023-01-25 19:49:21,195 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Note:
You can check if the information provided above is correct or not? Just enter the information into the input box below and click the "I'm good!" button.
2023-01-25 19:49:21,198 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:21,199 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:21,200 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:21,201 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:21,201 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:21,202 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:21,202 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:21,203 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:21,203 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:21,204 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:21,204 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:21,205 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Note:
You can check if the information provided above is correct or not? Just enter the information into the input box below and click the "I'm good!" button.
2023-01-25 19:49:21,205 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Note: You can check if the information provided above is correct or not? Just enter the information into the input box below and click the "I'm good!" button.
2023-01-25 19:49:21,206 - __main__ - INFO - 96 - <module>() - Final prediction for document 235: {'total': 'Note: You can check if the information provided above is correct or not? Just enter the information into the input box below and click the "I\'m good!" button.'}
2023-01-25 19:49:21,216 - __main__ - INFO - 92 - <module>() - Predicting document 236...
2023-01-25 19:49:28,140 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC Co. Ltd.
Date of Receipt: 22 May 2018
Address of Company: ABC Bldg, Sasang, Kota Bharu, Kelantan
Total: RM83.00
The key-value pair above should match the data in the table below.

Key: Value
Company Name: ABC Co. Ltd.
Date of Receipt: 22 May 2018
Address of Company: ABC Bldg, Sasang, Kota Bharu, Kelantan
Total: RM83.00
The key-value pair above should match the data in the table below
2023-01-25 19:49:28,141 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:28,142 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:28,143 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC Co. Ltd.

2023-01-25 19:49:28,143 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Co. Ltd.
2023-01-25 19:49:28,143 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:28,144 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22 May 2018

2023-01-25 19:49:28,144 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22 May 2018
2023-01-25 19:49:28,145 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:28,145 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC Bldg, Sasang, Kota Bharu, Kelantan

2023-01-25 19:49:28,146 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Bldg, Sasang, Kota Bharu, Kelantan
2023-01-25 19:49:28,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:28,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM83.00
The key-value pair above should match the data in the table below.

Key: Value
Company Name: ABC Co. Ltd.
Date of Receipt: 22 May 2018
Address of Company: ABC Bldg, Sasang, Kota Bharu, Kelantan

2023-01-25 19:49:28,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM83.00 The key-value pair above should match the data in the table below. Key: Value Company Name: ABC Co. Ltd. Date of Receipt: 22 May 2018 Address of Company: ABC Bldg, Sasang, Kota Bharu, Kelantan
2023-01-25 19:49:28,148 - __main__ - INFO - 96 - <module>() - Final prediction for document 236: {'company': 'ABC Co. Ltd.', 'date': '22 May 2018', 'address': 'ABC Bldg, Sasang, Kota Bharu, Kelantan', 'total': 'RM83.00 The key-value pair above should match the data in the table below. Key: Value Company Name: ABC Co. Ltd. Date of Receipt: 22 May 2018 Address of Company: ABC Bldg, Sasang, Kota Bharu, Kelantan'}
2023-01-25 19:49:28,150 - __main__ - INFO - 92 - <module>() - Predicting document 237...
2023-01-25 19:49:32,420 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Use this sample to extract the document key-value pairs in order to send them to the third party application. Use the "Company Name", "Date of Receipt", "Address of Company", and "Total" columns to do so.
2023-01-25 19:49:32,422 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:32,422 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:32,424 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:49:32,424 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:49:32,425 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:32,426 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:49:32,426 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:49:32,426 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:32,427 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:49:32,427 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:49:32,428 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:32,428 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Use this sample to extract the document key-value pairs in order to send them to the third party application. Use the "Company Name", "Date of Receipt", "Address of Company", and "Total" columns to do so.
2023-01-25 19:49:32,429 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Use this sample to extract the document key-value pairs in order to send them to the third party application. Use the "Company Name", "Date of Receipt", "Address of Company", and "Total" columns to do so.
2023-01-25 19:49:32,429 - __main__ - INFO - 96 - <module>() - Final prediction for document 237: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Use this sample to extract the document key-value pairs in order to send them to the third party application. Use the "Company Name", "Date of Receipt", "Address of Company", and "Total" columns to do so.'}
2023-01-25 19:49:32,438 - __main__ - INFO - 92 - <module>() - Predicting document 238...
2023-01-25 19:49:40,148 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <|stop key|>
Date of Receipt: <|stop key|>
Address of Company: <|stop key|>
Total: <|stop key|>

Use the following steps to make the report:

Create a new workbook using the company's document set. You can also use any other excel template with 3 columns.

3.1. Create the three columns. In the first column, paste the following:
=IFERROR(LEFT(SUBSTITUTE(A2,CHAR(10),""),FIND("|",SUBSTITUTE(A2,"|","",
2023-01-25 19:49:40,150 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:40,151 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:40,152 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:49:40,153 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:49:40,153 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:40,154 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:49:40,154 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:49:40,155 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:40,155 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:49:40,156 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:49:40,156 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:40,157 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Use the following steps to make the report:

Create a new workbook using the company's document set. You can also use any other excel template with 3 columns.

3.1. Create the three columns. In the first column, paste the following:
=IFERROR(LEFT(SUBSTITUTE(A2,CHAR(10),""),FIND("|",SUBSTITUTE(A2,"|","",
2023-01-25 19:49:40,157 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Use the following steps to make the report: Create a new workbook using the company's document set. You can also use any other excel template with 3 columns. 3.1. Create the three columns. In the first column, paste the following: =IFERROR(LEFT(SUBSTITUTE(A2,CHAR(10),""),FIND("|",SUBSTITUTE(A2,"|","",
2023-01-25 19:49:40,157 - __main__ - INFO - 96 - <module>() - Final prediction for document 238: {'company': '<|stop key|>', 'date': '<|stop key|>', 'address': '<|stop key|>', 'total': '<|stop key|> Use the following steps to make the report: Create a new workbook using the company\'s document set. You can also use any other excel template with 3 columns. 3.1. Create the three columns. In the first column, paste the following: =IFERROR(LEFT(SUBSTITUTE(A2,CHAR(10),""),FIND("|",SUBSTITUTE(A2,"|","",'}
2023-01-25 19:49:40,162 - __main__ - INFO - 92 - <module>() - Predicting document 239...
2023-01-25 19:49:47,206 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC Corporation
Date of Receipt: 07/03/2017
Address of Company: 638, 7th Floor, ABC Bldg.
Total: 25,200,000
Key: Value
Company Name: XYZ Corporation
Date of Receipt: 07/02/2017
Address of Company: 120, 6th Floor, XYZ Bldg.
Total: 23,000,000
Key: Value
Company Name: GHI Corporation
Date of Receipt: 07/01/2017
Address of Company: 100, 3rd Floor, GHI Bldg.
Total: 32
2023-01-25 19:49:47,206 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:47,206 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:47,206 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC Corporation

2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Corporation
2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  07/03/2017

2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 07/03/2017
2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  638, 7th Floor, ABC Bldg.

2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 638, 7th Floor, ABC Bldg.
2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25,200,000
Key: Value
Company Name: XYZ Corporation
Date of Receipt: 07/02/2017
Address of Company: 120, 6th Floor, XYZ Bldg.

2023-01-25 19:49:47,207 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25,200,000 Key: Value Company Name: XYZ Corporation Date of Receipt: 07/02/2017 Address of Company: 120, 6th Floor, XYZ Bldg.
2023-01-25 19:49:47,208 - __main__ - INFO - 96 - <module>() - Final prediction for document 239: {'company': 'ABC Corporation', 'date': '07/03/2017', 'address': '638, 7th Floor, ABC Bldg.', 'total': '25,200,000 Key: Value Company Name: XYZ Corporation Date of Receipt: 07/02/2017 Address of Company: 120, 6th Floor, XYZ Bldg.'}
2023-01-25 19:49:47,208 - __main__ - INFO - 92 - <module>() - Predicting document 240...
2023-01-25 19:49:50,802 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:49:50,803 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:50,803 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:50,803 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:50,803 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:50,803 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:50,803 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:50,803 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:50,803 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:50,803 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:50,804 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:50,804 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:50,804 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:49:50,804 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:49:50,804 - __main__ - INFO - 96 - <module>() - Final prediction for document 240: {'total': 'Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null".'}
2023-01-25 19:49:50,807 - __main__ - INFO - 92 - <module>() - Predicting document 241...
2023-01-25 19:49:53,379 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SITE No.
Date of Receipt: 03/05/18
Address of Company: SELANGOR
Total: RM96.48
2023-01-25 19:49:53,379 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:53,379 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:53,380 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SITE No.

2023-01-25 19:49:53,380 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SITE No.
2023-01-25 19:49:53,380 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:53,380 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03/05/18

2023-01-25 19:49:53,380 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03/05/18
2023-01-25 19:49:53,380 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:53,380 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SELANGOR

2023-01-25 19:49:53,380 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SELANGOR
2023-01-25 19:49:53,381 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:53,381 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM96.48
2023-01-25 19:49:53,381 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM96.48
2023-01-25 19:49:53,381 - __main__ - INFO - 96 - <module>() - Final prediction for document 241: {'company': 'SITE No.', 'date': '03/05/18', 'address': 'SELANGOR', 'total': 'RM96.48'}
2023-01-25 19:49:53,382 - __main__ - INFO - 92 - <module>() - Predicting document 242...
2023-01-25 19:49:55,967 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: 2018-09-12T00:00:00Z
Address of Company: Jalan PJU5/13, Selangor
Total:
2023-01-25 19:49:55,968 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:55,968 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:55,968 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:49:55,968 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:49:55,969 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:55,969 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-09-12T00:00:00Z

2023-01-25 19:49:55,969 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-09-12T00:00:00Z
2023-01-25 19:49:55,969 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:55,970 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan PJU5/13, Selangor

2023-01-25 19:49:55,970 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan PJU5/13, Selangor
2023-01-25 19:49:55,970 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:55,971 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:49:55,971 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:55,971 - __main__ - INFO - 96 - <module>() - Final prediction for document 242: {'company': 'N/A', 'date': '2018-09-12T00:00:00Z', 'address': 'Jalan PJU5/13, Selangor'}
2023-01-25 19:49:55,973 - __main__ - INFO - 92 - <module>() - Predicting document 243...
2023-01-25 19:49:57,955 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:
Address of Company:
Total:

2023-01-25 19:49:57,956 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:57,956 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:57,957 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:49:57,957 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:57,957 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:57,957 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:57,958 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:57,958 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:57,958 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:57,959 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:57,959 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:57,959 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:57,959 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:57,960 - __main__ - INFO - 96 - <module>() - Final prediction for document 243: {}
2023-01-25 19:49:57,961 - __main__ - INFO - 92 - <module>() - Predicting document 244...
2023-01-25 19:50:01,529 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  McDonalds Singapore LTC (6%) Sdn Bhd
Date of Receipt: 30-04-2018
Address of Company: Level 6, Bangunan Th, Damansara Uptown3
Total: 109.05
2023-01-25 19:50:01,530 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:01,530 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:01,530 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  McDonalds Singapore LTC (6%) Sdn Bhd

2023-01-25 19:50:01,531 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: McDonalds Singapore LTC (6%) Sdn Bhd
2023-01-25 19:50:01,531 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:01,531 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30-04-2018

2023-01-25 19:50:01,531 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30-04-2018
2023-01-25 19:50:01,532 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:01,532 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Level 6, Bangunan Th, Damansara Uptown3

2023-01-25 19:50:01,532 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Level 6, Bangunan Th, Damansara Uptown3
2023-01-25 19:50:01,533 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:01,533 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  109.05
2023-01-25 19:50:01,533 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 109.05
2023-01-25 19:50:01,534 - __main__ - INFO - 96 - <module>() - Final prediction for document 244: {'company': 'McDonalds Singapore LTC (6%) Sdn Bhd', 'date': '30-04-2018', 'address': 'Level 6, Bangunan Th, Damansara Uptown3', 'total': '109.05'}
2023-01-25 19:50:01,535 - __main__ - INFO - 92 - <module>() - Predicting document 245...
2023-01-25 19:50:09,950 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  A Company, Ltd.
Date of Receipt: 12/07/2010
Address of Company: 21/6, Jalan Sungai Abong,
Sembrong, P.P. Batu 7, Kuala Lumpur, Kedah, 56200, Malaysia

Key: Value
Company Name: B Company, Ltd.
Date of Receipt: 05/07/2009
Address of Company: 17/2, Jalan Dato Harun,
Cukai, Seberang Jaya, 45000, Shah Alam, Selangor, Malaysia

Key
2023-01-25 19:50:09,952 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:09,952 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:09,953 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A Company, Ltd.

2023-01-25 19:50:09,954 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A Company, Ltd.
2023-01-25 19:50:09,955 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:09,955 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12/07/2010

2023-01-25 19:50:09,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12/07/2010
2023-01-25 19:50:09,956 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:09,957 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/6, Jalan Sungai Abong,
Sembrong, P.P. Batu 7, Kuala Lumpur, Kedah, 56200, Malaysia

Key: Value
Company Name: B Company, Ltd.
Date of Receipt: 05/07/2009

2023-01-25 19:50:09,957 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/6, Jalan Sungai Abong, Sembrong, P.P. Batu 7, Kuala Lumpur, Kedah, 56200, Malaysia Key: Value Company Name: B Company, Ltd. Date of Receipt: 05/07/2009
2023-01-25 19:50:09,957 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:09,958 - __main__ - INFO - 96 - <module>() - Final prediction for document 245: {'company': 'A Company, Ltd.', 'date': '12/07/2010', 'address': '21/6, Jalan Sungai Abong, Sembrong, P.P. Batu 7, Kuala Lumpur, Kedah, 56200, Malaysia Key: Value Company Name: B Company, Ltd. Date of Receipt: 05/07/2009'}
2023-01-25 19:50:09,961 - __main__ - INFO - 92 - <module>() - Predicting document 246...
2023-01-25 19:50:17,181 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
| stop key |

Sample Input (Line 1):  <|stop key|>
Sample Output: <|stop key|>
I'll be using the C# framework of Microsoft Visual Studio, but it doesn't matter which language you use.
Input (Line 1):  <|stop key|>

A:

Java, 744 bytes
import java.util.*;import java.io.*;int g(String d){int p,c,x=0,
2023-01-25 19:50:17,182 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:17,183 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:17,183 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:50:17,184 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:50:17,185 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:17,186 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:50:17,186 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:50:17,187 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:17,188 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:50:17,188 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:50:17,189 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:17,190 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
| stop key |

Sample Input (Line 1):  <|stop key|>
Sample Output: <|stop key|>
I'll be using the C# framework of Microsoft Visual Studio, but it doesn't matter which language you use.
Input (Line 1):  <|stop key|>

A:

Java, 744 bytes
import java.util.*;import java.io.*;int g(String d){int p,c,x=0,
2023-01-25 19:50:17,190 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total | stop key | Sample Input (Line 1): <|stop key|> Sample Output: <|stop key|> I'll be using the C# framework of Microsoft Visual Studio, but it doesn't matter which language you use. Input (Line 1): <|stop key|> A: Java, 744 bytes import java.util.*;import java.io.*;int g(String d){int p,c,x=0,
2023-01-25 19:50:17,191 - __main__ - INFO - 96 - <module>() - Final prediction for document 246: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': "Total | stop key | Sample Input (Line 1): <|stop key|> Sample Output: <|stop key|> I'll be using the C# framework of Microsoft Visual Studio, but it doesn't matter which language you use. Input (Line 1): <|stop key|> A: Java, 744 bytes import java.util.*;import java.io.*;int g(String d){int p,c,x=0,"}
2023-01-25 19:50:17,193 - __main__ - INFO - 92 - <module>() - Predicting document 247...
2023-01-25 19:50:24,511 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 03-09-18 12:34
Address of Company:
Total: 8
ST. JOHN'S ST.

Input your results as shown above in the "Key: Value" box. This is to ensure that the result is as expected. It's not as hard as it looks.

Your query should have used a proper index on the key (which is the same as the value in the Key: Value). To get the same results as above but without an index run the same code but this time do a result = new StringBuffer().

Using Java 8 in Oracle
2023-01-25 19:50:24,514 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:24,515 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:24,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:24,517 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:24,517 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:24,518 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03-09-18 12:34

2023-01-25 19:50:24,519 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03-09-18 12:34
2023-01-25 19:50:24,519 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:24,520 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:24,520 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:24,521 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:24,521 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8
ST. JOHN'S ST.

Input your results as shown above in the "Key: Value" box. This is to ensure that the result is as expected. It's not as hard as it looks.

Your query should have used a proper index on the key (which is the same as the value in the Key: Value). To get the same results as above but without an index run the same code but this time do a result = new StringBuffer().

Using Java 8 in Oracle
2023-01-25 19:50:24,522 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8 ST. JOHN'S ST. Input your results as shown above in the "Key: Value" box. This is to ensure that the result is as expected. It's not as hard as it looks. Your query should have used a proper index on the key (which is the same as the value in the Key: Value). To get the same results as above but without an index run the same code but this time do a result = new StringBuffer(). Using Java 8 in Oracle
2023-01-25 19:50:24,523 - __main__ - INFO - 96 - <module>() - Final prediction for document 247: {'date': '03-09-18 12:34', 'total': '8 ST. JOHN\'S ST. Input your results as shown above in the "Key: Value" box. This is to ensure that the result is as expected. It\'s not as hard as it looks. Your query should have used a proper index on the key (which is the same as the value in the Key: Value). To get the same results as above but without an index run the same code but this time do a result = new StringBuffer(). Using Java 8 in Oracle'}
2023-01-25 19:50:24,525 - __main__ - INFO - 92 - <module>() - Predicting document 248...
2023-01-25 19:50:32,145 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
|stop key|: <|stop key|>

This can be useful if you need to search within a string to find a string that matches a given pattern, e.g. in

<|start key|>This is a test<|stop key|>

the pattern "This is a test" is a substring of the input string.

To use this, you can enter the expression in the search field of the web search form, e.g.

2023-01-25 19:50:32,146 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:32,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:32,146 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:50:32,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:50:32,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:32,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:50:32,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:50:32,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:32,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:50:32,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:50:32,148 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:32,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
|stop key|: <|stop key|>

This can be useful if you need to search within a string to find a string that matches a given pattern, e.g. in

<|start key|>This is a test<|stop key|>

the pattern "This is a test" is a substring of the input string.

To use this, you can enter the expression in the search field of the web search form, e.g.

2023-01-25 19:50:32,149 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total |stop key|: <|stop key|> This can be useful if you need to search within a string to find a string that matches a given pattern, e.g. in <|start key|>This is a test<|stop key|> the pattern "This is a test" is a substring of the input string. To use this, you can enter the expression in the search field of the web search form, e.g.
2023-01-25 19:50:32,149 - __main__ - INFO - 96 - <module>() - Final prediction for document 248: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total |stop key|: <|stop key|> This can be useful if you need to search within a string to find a string that matches a given pattern, e.g. in <|start key|>This is a test<|stop key|> the pattern "This is a test" is a substring of the input string. To use this, you can enter the expression in the search field of the web search form, e.g.'}
2023-01-25 19:50:32,151 - __main__ - INFO - 92 - <module>() - Predicting document 249...
2023-01-25 19:50:38,331 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <|stop key|>
Date of Receipt: <|stop key|>
Address of Company: <|stop key|>
Total: <|stop key|>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

2023-01-25 19:50:38,332 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:38,332 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:38,333 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:50:38,333 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:50:38,333 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:38,334 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:50:38,334 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:50:38,334 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:38,335 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

2023-01-25 19:50:38,335 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:50:38,335 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:38,336 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

2023-01-25 19:50:38,336 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:50:38,336 - __main__ - INFO - 96 - <module>() - Final prediction for document 249: {'company': '<|stop key|>', 'date': '<|stop key|>', 'address': '<|stop key|>', 'total': '<|stop key|> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null".'}
2023-01-25 19:50:38,338 - __main__ - INFO - 92 - <module>() - Predicting document 250...
2023-01-25 19:50:45,787 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>

Sample answer:

Company Name:  KUNYU
Date of Receipt:  06/12/2017 12:20:35
Address of Company:  Bukit Kepong
Total:  49.99

A:

You can use this:
string str = @"https://i.stack.imgur.com/5oqo9.png";

int indexStart = str.IndexOf("\"") + 1;
int indexStop = str.
2023-01-25 19:50:45,789 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:45,789 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:45,790 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:45,790 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:45,790 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:45,790 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:45,791 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:45,791 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:45,791 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:45,792 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:45,792 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:45,792 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Sample answer:

Company Name:  KUNYU
Date of Receipt:  06/12/2017 12:20:35
Address of Company:  Bukit Kepong

2023-01-25 19:50:45,792 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Sample answer: Company Name: KUNYU Date of Receipt: 06/12/2017 12:20:35 Address of Company: Bukit Kepong
2023-01-25 19:50:45,793 - __main__ - INFO - 96 - <module>() - Final prediction for document 250: {'total': '<|stop key|> Sample answer: Company Name: KUNYU Date of Receipt: 06/12/2017 12:20:35 Address of Company: Bukit Kepong'}
2023-01-25 19:50:45,794 - __main__ - INFO - 92 - <module>() - Predicting document 251...
2023-01-25 19:50:48,222 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date Receipt: 04/08/17
Address of Company: 1-1
Total: TotalAmount
2023-01-25 19:50:48,222 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:48,223 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:48,223 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME
Date Receipt: 04/08/17

2023-01-25 19:50:48,223 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME Date Receipt: 04/08/17
2023-01-25 19:50:48,224 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:48,224 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:48,224 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1-1

2023-01-25 19:50:48,224 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1-1
2023-01-25 19:50:48,224 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:48,225 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TotalAmount
2023-01-25 19:50:48,225 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TotalAmount
2023-01-25 19:50:48,225 - __main__ - INFO - 96 - <module>() - Final prediction for document 251: {'company': 'COMPANY NAME Date Receipt: 04/08/17', 'address': '1-1', 'total': 'TotalAmount'}
2023-01-25 19:50:48,226 - __main__ - INFO - 92 - <module>() - Predicting document 252...
2023-01-25 19:50:53,866 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

The "Total" should match the total in the receipt image. If it doesn't you'll have to fix it in code.

The "Total" field uses the following calculation to add up the total cost of the items:
2023-01-25 19:50:53,868 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:53,869 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:53,869 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:53,870 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:53,870 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:53,871 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:53,872 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:53,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:53,873 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:53,873 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:53,873 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:53,874 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

The "Total" should match the total in the receipt image. If it doesn't you'll have to fix it in code.

The "Total" field uses the following calculation to add up the total cost of the items:
2023-01-25 19:50:53,874 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The "Total" should match the total in the receipt image. If it doesn't you'll have to fix it in code. The "Total" field uses the following calculation to add up the total cost of the items:
2023-01-25 19:50:53,874 - __main__ - INFO - 96 - <module>() - Final prediction for document 252: {'total': 'The "Total" should match the total in the receipt image. If it doesn\'t you\'ll have to fix it in code. The "Total" field uses the following calculation to add up the total cost of the items:'}
2023-01-25 19:50:53,878 - __main__ - INFO - 92 - <module>() - Predicting document 253...
2023-01-25 19:51:01,551 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Company Name>
Date of Receipt: <Date of Receipt>
Address of Company: <Address of Company>
Total: <Total>
If there is a <Company Name> tag in the document, this is the only tag you need to extract to get the data you want.

If your data set contains more than one <Company Name> tag, change the key-value pair to "<Company Name>" instead. For example, if your data set contains the following tag pair:
<Tag Name> <Tag Value>
Company 1: <Company Name>
Company 2: <Company Name
2023-01-25 19:51:01,552 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:01,553 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:01,553 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Company Name>

2023-01-25 19:51:01,554 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Company Name>
2023-01-25 19:51:01,554 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:01,555 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date of Receipt>

2023-01-25 19:51:01,555 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date of Receipt>
2023-01-25 19:51:01,556 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:01,556 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address of Company>

2023-01-25 19:51:01,557 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address of Company>
2023-01-25 19:51:01,558 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:01,558 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>
If there is a <Company Name> tag in the document, this is the only tag you need to extract to get the data you want.

If your data set contains more than one <Company Name> tag, change the key-value pair to "<Company Name>" instead. For example, if your data set contains the following tag pair:
<Tag Name> <Tag Value>
Company 1: <Company Name>
Company 2: <Company Name
2023-01-25 19:51:01,559 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total> If there is a <Company Name> tag in the document, this is the only tag you need to extract to get the data you want. If your data set contains more than one <Company Name> tag, change the key-value pair to "<Company Name>" instead. For example, if your data set contains the following tag pair: <Tag Name> <Tag Value> Company 1: <Company Name> Company 2: <Company Name
2023-01-25 19:51:01,560 - __main__ - INFO - 96 - <module>() - Final prediction for document 253: {'company': '<Company Name>', 'date': '<Date of Receipt>', 'address': '<Address of Company>', 'total': '<Total> If there is a <Company Name> tag in the document, this is the only tag you need to extract to get the data you want. If your data set contains more than one <Company Name> tag, change the key-value pair to "<Company Name>" instead. For example, if your data set contains the following tag pair: <Tag Name> <Tag Value> Company 1: <Company Name> Company 2: <Company Name'}
2023-01-25 19:51:01,563 - __main__ - INFO - 92 - <module>() - Predicting document 254...
2023-01-25 19:51:08,148 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name
Date of Receipt: 29/6/2018
Address of Company: Bandar Mahkota Cheras, 23/9 Jalan Temenggung, 43200 Kuala Lumpur, Malaysia
Total: 46.90
| Stop key |:

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:51:08,150 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:08,150 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:08,151 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name

2023-01-25 19:51:08,151 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name
2023-01-25 19:51:08,151 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:08,151 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  29/6/2018

2023-01-25 19:51:08,152 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 29/6/2018
2023-01-25 19:51:08,152 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:08,152 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bandar Mahkota Cheras, 23/9 Jalan Temenggung, 43200 Kuala Lumpur, Malaysia

2023-01-25 19:51:08,153 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bandar Mahkota Cheras, 23/9 Jalan Temenggung, 43200 Kuala Lumpur, Malaysia
2023-01-25 19:51:08,153 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:08,153 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  46.90
| Stop key |:

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:51:08,153 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 46.90 | Stop key |: Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:51:08,154 - __main__ - INFO - 96 - <module>() - Final prediction for document 254: {'company': 'Company name', 'date': '29/6/2018', 'address': 'Bandar Mahkota Cheras, 23/9 Jalan Temenggung, 43200 Kuala Lumpur, Malaysia', 'total': '46.90 | Stop key |: Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null".'}
2023-01-25 19:51:08,158 - __main__ - INFO - 92 - <module>() - Predicting document 255...
2023-01-25 19:51:17,349 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Suci Alam Jaya Transport
Date of Receipt: 2/4/2018
Address of Company: No 1 Jalan Aman 2 Tamaman Dengkil, Selangor
Total: 270.30
TOTAL SALES (EXCLUDING GST): 255.00
TOTAL GST: 15.30
(GST TOTAL)
ROUNDING: 0.00
TOTAL SALES (INCLUSIVE OF GST): 270.30
CASH: 270.30
CHANGE: 0.00
CUSTOMER ORDER : 2 PYE 921 PLASTER/K
2023-01-25 19:51:17,350 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:17,351 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:17,351 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Suci Alam Jaya Transport

2023-01-25 19:51:17,351 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Suci Alam Jaya Transport
2023-01-25 19:51:17,351 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:17,352 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2/4/2018

2023-01-25 19:51:17,352 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2/4/2018
2023-01-25 19:51:17,352 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:17,353 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  No 1 Jalan Aman 2 Tamaman Dengkil, Selangor

2023-01-25 19:51:17,353 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: No 1 Jalan Aman 2 Tamaman Dengkil, Selangor
2023-01-25 19:51:17,353 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:17,353 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  270.30
TOTAL SALES (EXCLUDING GST): 255.00
TOTAL GST: 15.30
(GST TOTAL)
ROUNDING: 0.00
TOTAL SALES (INCLUSIVE OF GST): 270.30
CASH: 270.30
CHANGE: 0.00
CUSTOMER ORDER : 2 PYE 921 PLASTER/K
2023-01-25 19:51:17,354 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 270.30 TOTAL SALES (EXCLUDING GST): 255.00 TOTAL GST: 15.30 (GST TOTAL) ROUNDING: 0.00 TOTAL SALES (INCLUSIVE OF GST): 270.30 CASH: 270.30 CHANGE: 0.00 CUSTOMER ORDER : 2 PYE 921 PLASTER/K
2023-01-25 19:51:17,354 - __main__ - INFO - 96 - <module>() - Final prediction for document 255: {'company': 'Suci Alam Jaya Transport', 'date': '2/4/2018', 'address': 'No 1 Jalan Aman 2 Tamaman Dengkil, Selangor', 'total': '270.30 TOTAL SALES (EXCLUDING GST): 255.00 TOTAL GST: 15.30 (GST TOTAL) ROUNDING: 0.00 TOTAL SALES (INCLUSIVE OF GST): 270.30 CASH: 270.30 CHANGE: 0.00 CUSTOMER ORDER : 2 PYE 921 PLASTER/K'}
2023-01-25 19:51:17,356 - __main__ - INFO - 92 - <module>() - Predicting document 256...
2023-01-25 19:51:32,652 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BATA
Date of Receipt: 28/04/18
Address of Company: 1-3 The Avenue
Total: <|stop key|>

Create a string using the value, in the same order as you are receiving the values, from the table above, as follows:
"Company Name, Date of Receipt, Address of Company, Total, "<|stop key|>"
for example: "BATA, 28/04/18, 1-3 The Avenue, <|stop key|>

You can write the above string into a temp. text file, or into the "notes
2023-01-25 19:51:32,654 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:32,654 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:32,654 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BATA

2023-01-25 19:51:32,654 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BATA
2023-01-25 19:51:32,654 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:32,655 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  28/04/18

2023-01-25 19:51:32,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28/04/18
2023-01-25 19:51:32,655 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:32,655 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1-3 The Avenue

2023-01-25 19:51:32,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1-3 The Avenue
2023-01-25 19:51:32,655 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:32,655 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Create a string using the value, in the same order as you are receiving the values, from the table above, as follows:
"Company Name, Date of Receipt, Address of Company, Total, "<|stop key|>"
for example: "BATA, 28/04/18, 1-3 The Avenue, <|stop key|>

You can write the above string into a temp. text file, or into the "notes
2023-01-25 19:51:32,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Create a string using the value, in the same order as you are receiving the values, from the table above, as follows: "Company Name, Date of Receipt, Address of Company, Total, "<|stop key|>" for example: "BATA, 28/04/18, 1-3 The Avenue, <|stop key|> You can write the above string into a temp. text file, or into the "notes
2023-01-25 19:51:32,655 - __main__ - INFO - 96 - <module>() - Final prediction for document 256: {'company': 'BATA', 'date': '28/04/18', 'address': '1-3 The Avenue', 'total': '<|stop key|> Create a string using the value, in the same order as you are receiving the values, from the table above, as follows: "Company Name, Date of Receipt, Address of Company, Total, "<|stop key|>" for example: "BATA, 28/04/18, 1-3 The Avenue, <|stop key|> You can write the above string into a temp. text file, or into the "notes'}
2023-01-25 19:51:32,658 - __main__ - INFO - 92 - <module>() - Predicting document 257...
2023-01-25 19:51:47,522 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name as shown on the invoice
Date of Receipt: Date when the buyer accepted the goods
Address of Company: Address where the seller is located
Total: Total amount of sales tax that is computed by multiplying the price of the goods by the tax rate
Tax: Value to which tax rate will be applied
1

Key: Value
Company Name: Company Name as shown on the invoice
Date of Receipt: Date when the buyer accepted the goods
Address of Company: Address where the seller is located
Total: Total amount of sales tax that is computed by multiplying the price of the goods by the tax rate
2023-01-25 19:51:47,522 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:47,523 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:47,523 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name as shown on the invoice

2023-01-25 19:51:47,523 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name as shown on the invoice
2023-01-25 19:51:47,524 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:47,524 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date when the buyer accepted the goods

2023-01-25 19:51:47,524 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date when the buyer accepted the goods
2023-01-25 19:51:47,524 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:47,525 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address where the seller is located

2023-01-25 19:51:47,525 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address where the seller is located
2023-01-25 19:51:47,525 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:47,525 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total amount of sales tax that is computed by multiplying the price of the goods by the tax rate
Tax: Value to which tax rate will be applied
1

Key: Value
Company Name: Company Name as shown on the invoice
Date of Receipt: Date when the buyer accepted the goods
Address of Company: Address where the seller is located

2023-01-25 19:51:47,526 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total amount of sales tax that is computed by multiplying the price of the goods by the tax rate Tax: Value to which tax rate will be applied 1 Key: Value Company Name: Company Name as shown on the invoice Date of Receipt: Date when the buyer accepted the goods Address of Company: Address where the seller is located
2023-01-25 19:51:47,526 - __main__ - INFO - 96 - <module>() - Final prediction for document 257: {'company': 'Company Name as shown on the invoice', 'date': 'Date when the buyer accepted the goods', 'address': 'Address where the seller is located', 'total': 'Total amount of sales tax that is computed by multiplying the price of the goods by the tax rate Tax: Value to which tax rate will be applied 1 Key: Value Company Name: Company Name as shown on the invoice Date of Receipt: Date when the buyer accepted the goods Address of Company: Address where the seller is located'}
2023-01-25 19:51:47,528 - __main__ - INFO - 92 - <module>() - Predicting document 258...
2023-01-25 19:51:50,736 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name
Date of Receipt: Datum naovnog zaprimanja
Address of Company: Adresa poduzeća
Total: Iznos
2023-01-25 19:51:50,739 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:50,740 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:50,741 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name

2023-01-25 19:51:50,741 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name
2023-01-25 19:51:50,742 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:50,742 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Datum naovnog zaprimanja

2023-01-25 19:51:50,743 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Datum naovnog zaprimanja
2023-01-25 19:51:50,743 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:50,744 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Adresa poduzeća

2023-01-25 19:51:50,744 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Adresa poduzeća
2023-01-25 19:51:50,744 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:50,745 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Iznos
2023-01-25 19:51:50,745 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Iznos
2023-01-25 19:51:50,746 - __main__ - INFO - 96 - <module>() - Final prediction for document 258: {'company': 'Company name', 'date': 'Datum naovnog zaprimanja', 'address': 'Adresa poduzeća', 'total': 'Iznos'}
2023-01-25 19:51:50,751 - __main__ - INFO - 92 - <module>() - Predicting document 259...
2023-01-25 19:52:05,394 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Receipt date:
Company Address:
Total:

Output:

{COMPANY NAME}

	{RECEIPT DATE}

	{COMPANY ADDRESS}

	{TOTAL}

{STOP KEY}

Scoring script

Implement the scoring algorithm given in the above question and take the string passed by the input argument and store in a buffer. The buffer has size `size` of 4096.
//
// For each word in buffer, print a message
// print a message with the words
// print a message to show total amount of money

2023-01-25 19:52:05,397 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:05,397 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:05,399 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Receipt date:
Company Address:

2023-01-25 19:52:05,399 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt date: Company Address:
2023-01-25 19:52:05,400 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:05,400 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:05,400 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:05,401 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Output:

{COMPANY NAME}

	{RECEIPT DATE}

	{COMPANY ADDRESS}

	{TOTAL}

{STOP KEY}

Scoring script

Implement the scoring algorithm given in the above question and take the string passed by the input argument and store in a buffer. The buffer has size `size` of 4096.
//
// For each word in buffer, print a message
// print a message with the words
// print a message to show total amount of money

2023-01-25 19:52:05,401 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Output: {COMPANY NAME} 	{RECEIPT DATE} 	{COMPANY ADDRESS} 	{TOTAL} {STOP KEY} Scoring script Implement the scoring algorithm given in the above question and take the string passed by the input argument and store in a buffer. The buffer has size `size` of 4096. // // For each word in buffer, print a message // print a message with the words // print a message to show total amount of money
2023-01-25 19:52:05,402 - __main__ - INFO - 96 - <module>() - Final prediction for document 259: {'company': 'Receipt date: Company Address:', 'total': 'Output: {COMPANY NAME} \t{RECEIPT DATE} \t{COMPANY ADDRESS} \t{TOTAL} {STOP KEY} Scoring script Implement the scoring algorithm given in the above question and take the string passed by the input argument and store in a buffer. The buffer has size `size` of 4096. // // For each word in buffer, print a message // print a message with the words // print a message to show total amount of money'}
2023-01-25 19:52:05,412 - __main__ - INFO - 92 - <module>() - Predicting document 260...
2023-01-25 19:52:17,130 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  FUJIFILM XEROX
Date of Receipt: 01-01-2018
Address of Company: G.
Total: 8.95
Award: 3.55
Voucher: 1.50
Voucher: 1.30
Voucher: 0.75
Voucher: 0.30
Voucher: 0.50
Voucher: 0.60
Voucher: 0.75
Voucher: 0.60
Voucher: 1.30
Voucher: 0.75
Voucher: 0.75
2023-01-25 19:52:17,133 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:17,133 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:17,135 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  FUJIFILM XEROX

2023-01-25 19:52:17,135 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: FUJIFILM XEROX
2023-01-25 19:52:17,136 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:17,137 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01-01-2018

2023-01-25 19:52:17,137 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01-01-2018
2023-01-25 19:52:17,138 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:17,138 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  G.

2023-01-25 19:52:17,139 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: G.
2023-01-25 19:52:17,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:17,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8.95
Award: 3.55
Voucher: 1.50
Voucher: 1.30
Voucher: 0.75
Voucher: 0.30
Voucher: 0.50
Voucher: 0.60
Voucher: 0.75
Voucher: 0.60
Voucher: 1.30
Voucher: 0.75
Voucher: 0.75
2023-01-25 19:52:17,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8.95 Award: 3.55 Voucher: 1.50 Voucher: 1.30 Voucher: 0.75 Voucher: 0.30 Voucher: 0.50 Voucher: 0.60 Voucher: 0.75 Voucher: 0.60 Voucher: 1.30 Voucher: 0.75 Voucher: 0.75
2023-01-25 19:52:17,141 - __main__ - INFO - 96 - <module>() - Final prediction for document 260: {'company': 'FUJIFILM XEROX', 'date': '01-01-2018', 'address': 'G.', 'total': '8.95 Award: 3.55 Voucher: 1.50 Voucher: 1.30 Voucher: 0.75 Voucher: 0.30 Voucher: 0.50 Voucher: 0.60 Voucher: 0.75 Voucher: 0.60 Voucher: 1.30 Voucher: 0.75 Voucher: 0.75'}
2023-01-25 19:52:17,146 - __main__ - INFO - 92 - <module>() - Predicting document 261...
2023-01-25 19:52:26,838 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BAR WANG RICE
Date of Receipt: 26-05-2018
Address of Company: TAMPOI,81200 JOHOR BAHRU,JOHOR
Total: <|stop key|>

Output the Key-Value Pair

Key: Value
Company Name: BAR WANG RICE
Date of Receipt: 26-05-2018
Address of Company: TAMPOI,81200 JOHOR BAHRU,JOHOR
Total: $8.20

The Bar Wang Rice Restaurant is located in Tampoi, Jalan Tamai (
2023-01-25 19:52:26,840 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:26,841 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:26,842 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BAR WANG RICE

2023-01-25 19:52:26,842 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BAR WANG RICE
2023-01-25 19:52:26,842 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:26,843 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  26-05-2018

2023-01-25 19:52:26,843 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 26-05-2018
2023-01-25 19:52:26,843 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:26,843 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TAMPOI,81200 JOHOR BAHRU,JOHOR

2023-01-25 19:52:26,844 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TAMPOI,81200 JOHOR BAHRU,JOHOR
2023-01-25 19:52:26,844 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:26,844 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Output the Key-Value Pair

Key: Value
Company Name: BAR WANG RICE
Date of Receipt: 26-05-2018
Address of Company: TAMPOI,81200 JOHOR BAHRU,JOHOR

2023-01-25 19:52:26,845 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Output the Key-Value Pair Key: Value Company Name: BAR WANG RICE Date of Receipt: 26-05-2018 Address of Company: TAMPOI,81200 JOHOR BAHRU,JOHOR
2023-01-25 19:52:26,845 - __main__ - INFO - 96 - <module>() - Final prediction for document 261: {'company': 'BAR WANG RICE', 'date': '26-05-2018', 'address': 'TAMPOI,81200 JOHOR BAHRU,JOHOR', 'total': '<|stop key|> Output the Key-Value Pair Key: Value Company Name: BAR WANG RICE Date of Receipt: 26-05-2018 Address of Company: TAMPOI,81200 JOHOR BAHRU,JOHOR'}
2023-01-25 19:52:26,848 - __main__ - INFO - 92 - <module>() - Predicting document 262...
2023-01-25 19:52:29,064 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt: 08-03-2018
Address of Company: Seri Kembangan

Total: 190.00

2023-01-25 19:52:29,065 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:29,065 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:29,065 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:52:29,066 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:29,066 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:29,066 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  08-03-2018

2023-01-25 19:52:29,066 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 08-03-2018
2023-01-25 19:52:29,067 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:29,067 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Seri Kembangan


2023-01-25 19:52:29,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Seri Kembangan
2023-01-25 19:52:29,067 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:29,067 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  190.00

2023-01-25 19:52:29,068 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 190.00
2023-01-25 19:52:29,068 - __main__ - INFO - 96 - <module>() - Final prediction for document 262: {'date': '08-03-2018', 'address': 'Seri Kembangan', 'total': '190.00'}
2023-01-25 19:52:29,069 - __main__ - INFO - 92 - <module>() - Predicting document 263...
2023-01-25 19:52:35,484 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
2023-01-25 19:52:35,485 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:35,485 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:35,485 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:35,486 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:35,486 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:35,486 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:35,486 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:35,486 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:35,487 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:35,487 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:35,487 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:35,487 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
2023-01-25 19:52:35,488 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
2023-01-25 19:52:35,488 - __main__ - INFO - 96 - <module>() - Final prediction for document 263: {'total': '||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||'}
2023-01-25 19:52:35,489 - __main__ - INFO - 92 - <module>() - Predicting document 264...
2023-01-25 19:52:37,509 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date
Address of Company: Address of Company
Total: Total
2023-01-25 19:52:37,510 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:37,510 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:37,511 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:52:37,511 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:52:37,511 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:37,512 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date

2023-01-25 19:52:37,512 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date
2023-01-25 19:52:37,513 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:37,513 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:52:37,513 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:52:37,513 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:37,514 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:52:37,514 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:52:37,514 - __main__ - INFO - 96 - <module>() - Final prediction for document 264: {'company': 'Company Name', 'date': 'Date', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:52:37,516 - __main__ - INFO - 92 - <module>() - Predicting document 265...
2023-01-25 19:52:40,629 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU
Date of Receipt: 16-12-2017
Address of Company: Kuala Lumpur
Total: 8.21
2023-01-25 19:52:40,630 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:40,630 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:40,631 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU

2023-01-25 19:52:40,631 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU
2023-01-25 19:52:40,631 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:40,632 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  16-12-2017

2023-01-25 19:52:40,632 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 16-12-2017
2023-01-25 19:52:40,632 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:40,633 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kuala Lumpur

2023-01-25 19:52:40,633 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur
2023-01-25 19:52:40,633 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:40,633 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8.21
2023-01-25 19:52:40,634 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8.21
2023-01-25 19:52:40,634 - __main__ - INFO - 96 - <module>() - Final prediction for document 265: {'company': 'SANYU', 'date': '16-12-2017', 'address': 'Kuala Lumpur', 'total': '8.21'}
2023-01-25 19:52:40,636 - __main__ - INFO - 92 - <module>() - Predicting document 266...
2023-01-25 19:52:43,760 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  P.T. Batteries Sdn. Bhd.
Date of Receipt: 30-01-18
Address of Company: Jalan Subang Angsi, Taman Berkeley
Total: RM2,949,999.00
2023-01-25 19:52:43,761 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:43,761 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:43,762 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  P.T. Batteries Sdn. Bhd.

2023-01-25 19:52:43,762 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: P.T. Batteries Sdn. Bhd.
2023-01-25 19:52:43,762 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:43,762 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30-01-18

2023-01-25 19:52:43,762 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30-01-18
2023-01-25 19:52:43,763 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:43,763 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Subang Angsi, Taman Berkeley

2023-01-25 19:52:43,763 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Subang Angsi, Taman Berkeley
2023-01-25 19:52:43,763 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:43,763 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM2,949,999.00
2023-01-25 19:52:43,763 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM2,949,999.00
2023-01-25 19:52:43,764 - __main__ - INFO - 96 - <module>() - Final prediction for document 266: {'company': 'P.T. Batteries Sdn. Bhd.', 'date': '30-01-18', 'address': 'Jalan Subang Angsi, Taman Berkeley', 'total': 'RM2,949,999.00'}
2023-01-25 19:52:43,765 - __main__ - INFO - 92 - <module>() - Predicting document 267...
2023-01-25 19:52:50,981 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
<<< Stop Key >>>

Sample Output

The total amount:
$8.80

A:

Java (JDK8+), 104 104 102 bytes
f->{String d[]=s.split("\n");int l=d.length,s0=d[0].split("  ");int p,q,r,n;for(p=l-2,q=1,r=1;r;r-=q,q++)for(n=p;p>q
2023-01-25 19:52:50,982 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:50,983 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:50,983 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:50,984 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:50,984 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:50,984 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:50,985 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:50,985 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:50,985 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:50,985 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:50,986 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:50,986 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
<<< Stop Key >>>

Sample Output

The total amount:
$8.80

A:

Java (JDK8+), 104 104 102 bytes
f->{String d[]=s.split("\n");int l=d.length,s0=d[0].split("  ");int p,q,r,n;for(p=l-2,q=1,r=1;r;r-=q,q++)for(n=p;p>q
2023-01-25 19:52:50,986 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <<< Stop Key >>> Sample Output The total amount: $8.80 A: Java (JDK8+), 104 104 102 bytes f->{String d[]=s.split("\n");int l=d.length,s0=d[0].split(" ");int p,q,r,n;for(p=l-2,q=1,r=1;r;r-=q,q++)for(n=p;p>q
2023-01-25 19:52:50,987 - __main__ - INFO - 96 - <module>() - Final prediction for document 267: {'total': '<<< Stop Key >>> Sample Output The total amount: $8.80 A: Java (JDK8+), 104 104 102 bytes f->{String d[]=s.split("\\n");int l=d.length,s0=d[0].split(" ");int p,q,r,n;for(p=l-2,q=1,r=1;r;r-=q,q++)for(n=p;p>q'}
2023-01-25 19:52:50,989 - __main__ - INFO - 92 - <module>() - Predicting document 268...
2023-01-25 19:52:58,295 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  118 MJ MOOKATA HOUSE
Receipt No: REC-00376
Date: 11-06-2018
Total: 717
1X
1X
1X
1X
1X
1X
2X
1X
1X
SET
B - SOUP
HERBAL
CHICKEN
SALTED
EGG DUMPLINGS
THAI
COFFEE
BEER (C)
LUO
HAN GUO
48.00
5.00
5.00
5.00
4.90
16.00

2023-01-25 19:52:58,296 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:58,297 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:58,297 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  118 MJ MOOKATA HOUSE
Receipt No: REC-00376
Date: 11-06-2018

2023-01-25 19:52:58,297 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 118 MJ MOOKATA HOUSE Receipt No: REC-00376 Date: 11-06-2018
2023-01-25 19:52:58,298 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:58,298 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:58,298 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:58,298 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  717
1X
1X
1X
1X
1X
1X
2X
1X
1X
SET
B - SOUP
HERBAL
CHICKEN
SALTED
EGG DUMPLINGS
THAI
COFFEE
BEER (C)
LUO
HAN GUO
48.00
5.00
5.00
5.00
4.90
16.00

2023-01-25 19:52:58,299 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 717 1X 1X 1X 1X 1X 1X 2X 1X 1X SET B - SOUP HERBAL CHICKEN SALTED EGG DUMPLINGS THAI COFFEE BEER (C) LUO HAN GUO 48.00 5.00 5.00 5.00 4.90 16.00
2023-01-25 19:52:58,299 - __main__ - INFO - 96 - <module>() - Final prediction for document 268: {'company': '118 MJ MOOKATA HOUSE Receipt No: REC-00376 Date: 11-06-2018', 'total': '717 1X 1X 1X 1X 1X 1X 2X 1X 1X SET B - SOUP HERBAL CHICKEN SALTED EGG DUMPLINGS THAI COFFEE BEER (C) LUO HAN GUO 48.00 5.00 5.00 5.00 4.90 16.00'}
2023-01-25 19:52:58,301 - __main__ - INFO - 92 - <module>() - Predicting document 269...
2023-01-25 19:53:00,097 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
2023-01-25 19:53:00,099 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:00,100 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:00,101 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:53:00,102 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:53:00,103 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:00,104 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:53:00,104 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:53:00,105 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:00,106 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:53:00,106 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:53:00,107 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:00,108 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:53:00,109 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:53:00,109 - __main__ - INFO - 96 - <module>() - Final prediction for document 269: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:53:00,114 - __main__ - INFO - 92 - <module>() - Predicting document 270...
2023-01-25 19:53:06,751 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "XYZ", "ABC" or "XYZ, ABC"
Date of Receipt: 20/12/2017
Address of Company: "XYZ", "ABC" or "XYZ, ABC"
Total: 24.10

The key-value pairs are separated by two dots ("...")

<||Stop Key|>, Value

Key: Value

Stop Key: "<<||Stop Key|>>", "..."

The stop key is used to end the expression at the end of the document. If there are more than one key-value pairs on the document the value at
2023-01-25 19:53:06,752 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:06,753 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:06,753 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "XYZ", "ABC" or "XYZ, ABC"

2023-01-25 19:53:06,754 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XYZ", "ABC" or "XYZ, ABC
2023-01-25 19:53:06,754 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:06,754 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20/12/2017

2023-01-25 19:53:06,755 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20/12/2017
2023-01-25 19:53:06,755 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:06,755 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "XYZ", "ABC" or "XYZ, ABC"

2023-01-25 19:53:06,755 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XYZ", "ABC" or "XYZ, ABC
2023-01-25 19:53:06,756 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:06,756 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  24.10

The key-value pairs are separated by two dots ("...")

<||Stop Key|>, Value

Key: Value

Stop Key: "<<||Stop Key|>>", "..."

The stop key is used to end the expression at the end of the document. If there are more than one key-value pairs on the document the value at
2023-01-25 19:53:06,756 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24.10 The key-value pairs are separated by two dots ("...") <||Stop Key|>, Value Key: Value Stop Key: "<<||Stop Key|>>", "..." The stop key is used to end the expression at the end of the document. If there are more than one key-value pairs on the document the value at
2023-01-25 19:53:06,756 - __main__ - INFO - 96 - <module>() - Final prediction for document 270: {'company': 'XYZ", "ABC" or "XYZ, ABC', 'date': '20/12/2017', 'address': 'XYZ", "ABC" or "XYZ, ABC', 'total': '24.10 The key-value pairs are separated by two dots ("...") <||Stop Key|>, Value Key: Value Stop Key: "<<||Stop Key|>>", "..." The stop key is used to end the expression at the end of the document. If there are more than one key-value pairs on the document the value at'}
2023-01-25 19:53:06,758 - __main__ - INFO - 92 - <module>() - Predicting document 271...
2023-01-25 19:53:08,198 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:53:08,199 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:08,199 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:08,199 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:08,199 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:08,200 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:08,200 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:08,200 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:08,200 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:08,201 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:08,201 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:08,201 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:08,201 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:53:08,201 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:08,202 - __main__ - INFO - 96 - <module>() - Final prediction for document 271: {}
2023-01-25 19:53:08,203 - __main__ - INFO - 92 - <module>() - Predicting document 272...
2023-01-25 19:53:14,025 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (null)
Date of Receipt: 2018-02-02
Address of Company: Jalan Air Panas, Setapak
Total: 6,88,80

Output:
Company Name: (null)
Date of Receipt: 2018-02-02
Address of Company: Jalan Air Panas, Setapak
Total: 6,88,80

This is one of the most important things. If you are missing any of the key-value pairs the result is wrong.


2023-01-25 19:53:14,026 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:14,026 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:14,026 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (null)

2023-01-25 19:53:14,027 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null)
2023-01-25 19:53:14,027 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:14,027 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-02-02

2023-01-25 19:53:14,028 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-02-02
2023-01-25 19:53:14,028 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:14,028 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Air Panas, Setapak

2023-01-25 19:53:14,028 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Air Panas, Setapak
2023-01-25 19:53:14,029 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:14,029 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  6,88,80

Output:
Company Name: (null)
Date of Receipt: 2018-02-02
Address of Company: Jalan Air Panas, Setapak

2023-01-25 19:53:14,029 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6,88,80 Output: Company Name: (null) Date of Receipt: 2018-02-02 Address of Company: Jalan Air Panas, Setapak
2023-01-25 19:53:14,029 - __main__ - INFO - 96 - <module>() - Final prediction for document 272: {'company': '(null)', 'date': '2018-02-02', 'address': 'Jalan Air Panas, Setapak', 'total': '6,88,80 Output: Company Name: (null) Date of Receipt: 2018-02-02 Address of Company: Jalan Air Panas, Setapak'}
2023-01-25 19:53:14,031 - __main__ - INFO - 92 - <module>() - Predicting document 273...
2023-01-25 19:53:20,872 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  DBS Bank Malaysia Berhad
Date of Receipt: 12 Feb 2019 (Saturday)
Address of Company: 1 Persiaran KL Sentral KL
Total: 150.00

Output
Company Name: DBS Bank Malaysia Berhad
Date of Receipt: 12 Feb 2019 (Saturday)
Address of Company: 1 Persiaran KL Sentral KL
Total: 150.00

How to Use

This example demonstrates how to find a key in a document. The document contains information in "Company Name", "Date of Receipt", "Address of Company" and "Total" key-value pairs
2023-01-25 19:53:20,873 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:20,873 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:20,873 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DBS Bank Malaysia Berhad

2023-01-25 19:53:20,874 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DBS Bank Malaysia Berhad
2023-01-25 19:53:20,874 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:20,875 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12 Feb 2019 (Saturday)

2023-01-25 19:53:20,875 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12 Feb 2019 (Saturday)
2023-01-25 19:53:20,876 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:20,876 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1 Persiaran KL Sentral KL

2023-01-25 19:53:20,876 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1 Persiaran KL Sentral KL
2023-01-25 19:53:20,876 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:20,877 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  150.00

Output
Company Name: DBS Bank Malaysia Berhad
Date of Receipt: 12 Feb 2019 (Saturday)
Address of Company: 1 Persiaran KL Sentral KL

2023-01-25 19:53:20,877 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 150.00 Output Company Name: DBS Bank Malaysia Berhad Date of Receipt: 12 Feb 2019 (Saturday) Address of Company: 1 Persiaran KL Sentral KL
2023-01-25 19:53:20,877 - __main__ - INFO - 96 - <module>() - Final prediction for document 273: {'company': 'DBS Bank Malaysia Berhad', 'date': '12 Feb 2019 (Saturday)', 'address': '1 Persiaran KL Sentral KL', 'total': '150.00 Output Company Name: DBS Bank Malaysia Berhad Date of Receipt: 12 Feb 2019 (Saturday) Address of Company: 1 Persiaran KL Sentral KL'}
2023-01-25 19:53:20,878 - __main__ - INFO - 92 - <module>() - Predicting document 274...
2023-01-25 19:53:27,840 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "MyDin SDN BHD"
Date of Receipt: "03/16/2016 12:31"
Address of Company: "1 Jalan Kebun, Desa Semerah Utara, Subang Jaya, Selangor"
Total: "2.20"

Key: Value
Company Name: "Konsortium Komposit Berhad"
Date of Receipt: "02/16/2016 10:34"
Address of Company: "Lot 10, Wisma Masjid Ampang, Jalan C.M. Thamrin"

2023-01-25 19:53:27,842 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:27,842 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:27,843 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "MyDin SDN BHD"

2023-01-25 19:53:27,843 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MyDin SDN BHD
2023-01-25 19:53:27,843 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:27,843 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "03/16/2016 12:31"

2023-01-25 19:53:27,843 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03/16/2016 12:31
2023-01-25 19:53:27,844 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:27,844 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "1 Jalan Kebun, Desa Semerah Utara, Subang Jaya, Selangor"

2023-01-25 19:53:27,844 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1 Jalan Kebun, Desa Semerah Utara, Subang Jaya, Selangor
2023-01-25 19:53:27,844 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:27,844 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2.20"

Key: Value
Company Name: "Konsortium Komposit Berhad"
Date of Receipt: "02/16/2016 10:34"
Address of Company: "Lot 10, Wisma Masjid Ampang, Jalan C.M. Thamrin"

2023-01-25 19:53:27,845 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2.20" Key: Value Company Name: "Konsortium Komposit Berhad" Date of Receipt: "02/16/2016 10:34" Address of Company: "Lot 10, Wisma Masjid Ampang, Jalan C.M. Thamrin
2023-01-25 19:53:27,845 - __main__ - INFO - 96 - <module>() - Final prediction for document 274: {'company': 'MyDin SDN BHD', 'date': '03/16/2016 12:31', 'address': '1 Jalan Kebun, Desa Semerah Utara, Subang Jaya, Selangor', 'total': '2.20" Key: Value Company Name: "Konsortium Komposit Berhad" Date of Receipt: "02/16/2016 10:34" Address of Company: "Lot 10, Wisma Masjid Ampang, Jalan C.M. Thamrin'}
2023-01-25 19:53:27,849 - __main__ - INFO - 92 - <module>() - Predicting document 275...
2023-01-25 19:53:30,144 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:53:30,145 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:30,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:30,146 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:30,146 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:30,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:30,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:30,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:30,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:30,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:30,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:30,148 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:30,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:53:30,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:30,149 - __main__ - INFO - 96 - <module>() - Final prediction for document 275: {}
2023-01-25 19:53:30,150 - __main__ - INFO - 92 - <module>() - Predicting document 276...
2023-01-25 19:53:34,491 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Address:
Total:

Sample Output
Company Name: Yinma Group Sdn. Bhd. (Yinma Sdn. Bhd.)
(Yinma Group Sdn. Bhd.)
No. 2, Jalan Utara, Bandar Baru Sri Damansara, 47500 Petaling Jaya, Selangor
Total:

Process the output as required.


2023-01-25 19:53:34,493 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:34,493 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:34,494 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Address:

2023-01-25 19:53:34,494 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address:
2023-01-25 19:53:34,494 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:34,495 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:34,495 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:34,495 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Sample Output
Company Name: Yinma Group Sdn. Bhd. (Yinma Sdn. Bhd.)
(Yinma Group Sdn. Bhd.)
No. 2, Jalan Utara, Bandar Baru Sri Damansara, 47500 Petaling Jaya, Selangor

2023-01-25 19:53:34,495 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sample Output Company Name: Yinma Group Sdn. Bhd. (Yinma Sdn. Bhd.) (Yinma Group Sdn. Bhd.) No. 2, Jalan Utara, Bandar Baru Sri Damansara, 47500 Petaling Jaya, Selangor
2023-01-25 19:53:34,496 - __main__ - INFO - 96 - <module>() - Final prediction for document 276: {'company': 'Address:', 'total': 'Sample Output Company Name: Yinma Group Sdn. Bhd. (Yinma Sdn. Bhd.) (Yinma Group Sdn. Bhd.) No. 2, Jalan Utara, Bandar Baru Sri Damansara, 47500 Petaling Jaya, Selangor'}
2023-01-25 19:53:34,498 - __main__ - INFO - 92 - <module>() - Predicting document 277...
2023-01-25 19:53:41,342 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  NONE
Date of Receipt: 07-03-2018 15:34:15
Address of Company: SEKSYEN 9, BANDAR MAHKOTA CHERAS
Total: 4.80

Extract "TOTAL", "<|stop key|>" from the document above.

Key: Value
TOTAL: 4.80

Extract "GST Amount", "<|stop key|>" from the document above.

Key: Value
GST AMOUNT: 0.26

Extract "TAX Amount", "<|stop key|>" from the
2023-01-25 19:53:41,342 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:41,342 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:41,342 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NONE

2023-01-25 19:53:41,342 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NONE
2023-01-25 19:53:41,342 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:41,342 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  07-03-2018 15:34:15

2023-01-25 19:53:41,343 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 07-03-2018 15:34:15
2023-01-25 19:53:41,343 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:41,343 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SEKSYEN 9, BANDAR MAHKOTA CHERAS

2023-01-25 19:53:41,343 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SEKSYEN 9, BANDAR MAHKOTA CHERAS
2023-01-25 19:53:41,343 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:41,343 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4.80

Extract "TOTAL", "<|stop key|>" from the document above.

Key: Value

2023-01-25 19:53:41,343 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4.80 Extract "TOTAL", "<|stop key|>" from the document above. Key: Value
2023-01-25 19:53:41,343 - __main__ - INFO - 96 - <module>() - Final prediction for document 277: {'company': 'NONE', 'date': '07-03-2018 15:34:15', 'address': 'SEKSYEN 9, BANDAR MAHKOTA CHERAS', 'total': '4.80 Extract "TOTAL", "<|stop key|>" from the document above. Key: Value'}
2023-01-25 19:53:41,344 - __main__ - INFO - 92 - <module>() - Predicting document 278...
2023-01-25 19:53:48,771 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TQ Group
Date of Receipt: 22/03/2017
Address of Company: B.H.Jalan Utama
Total: 6.90
Please contact me

You can use the regular expression ^.*\s([^\d]+)(\d+):.*$. To extract the following parameters, see also the documentation of the Regex class:

Match.Groups(1) : the company name.
Match.Groups(2) : the sum amount.

If a company does not have any value above zero you have to adjust the regular expression. Here is an example to match:
2023-01-25 19:53:48,772 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:48,772 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:48,773 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TQ Group

2023-01-25 19:53:48,773 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TQ Group
2023-01-25 19:53:48,773 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:48,774 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22/03/2017

2023-01-25 19:53:48,774 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22/03/2017
2023-01-25 19:53:48,774 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:48,774 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  B.H.Jalan Utama

2023-01-25 19:53:48,775 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: B.H.Jalan Utama
2023-01-25 19:53:48,775 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:48,775 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  6.90
Please contact me

You can use the regular expression ^.*\s([^\d]+)(\d+):.*$. To extract the following parameters, see also the documentation of the Regex class:

Match.Groups(1) : the company name.
Match.Groups(2) : the sum amount.

If a company does not have any value above zero you have to adjust the regular expression. Here is an example to match:
2023-01-25 19:53:48,776 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6.90 Please contact me You can use the regular expression ^.*\s([^\d]+)(\d+):.*$. To extract the following parameters, see also the documentation of the Regex class: Match.Groups(1) : the company name. Match.Groups(2) : the sum amount. If a company does not have any value above zero you have to adjust the regular expression. Here is an example to match:
2023-01-25 19:53:48,776 - __main__ - INFO - 96 - <module>() - Final prediction for document 278: {'company': 'TQ Group', 'date': '22/03/2017', 'address': 'B.H.Jalan Utama', 'total': '6.90 Please contact me You can use the regular expression ^.*\\s([^\\d]+)(\\d+):.*$. To extract the following parameters, see also the documentation of the Regex class: Match.Groups(1) : the company name. Match.Groups(2) : the sum amount. If a company does not have any value above zero you have to adjust the regular expression. Here is an example to match:'}
2023-01-25 19:53:48,778 - __main__ - INFO - 92 - <module>() - Predicting document 279...
2023-01-25 19:53:56,112 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Toa Payoh
Date of Receipt: 01-01-2016
Address of Company: 7-05-2018
Total: $1,000.00
[+] Please type in 'null' if the date is not found.
$500.00

This is an example of using data-driven content

Please fill in the following key-value pairs into the fields
[+]

(Key: Value)

Company

Address

Payment

Date of Payment

Payment Value

Please type in 'null' if the date is not found.


2023-01-25 19:53:56,113 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:56,113 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:56,113 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Toa Payoh

2023-01-25 19:53:56,113 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Toa Payoh
2023-01-25 19:53:56,113 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:56,114 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01-01-2016

2023-01-25 19:53:56,114 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01-01-2016
2023-01-25 19:53:56,114 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:56,114 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7-05-2018

2023-01-25 19:53:56,114 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7-05-2018
2023-01-25 19:53:56,114 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:56,114 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $1,000.00
[+] Please type in 'null' if the date is not found.
$500.00

This is an example of using data-driven content

Please fill in the following key-value pairs into the fields
[+]

(Key: Value)

Company

Address

Payment

Date of Payment

Payment Value

Please type in 'null' if the date is not found.


2023-01-25 19:53:56,114 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $1,000.00 [+] Please type in 'null' if the date is not found. $500.00 This is an example of using data-driven content Please fill in the following key-value pairs into the fields [+] (Key: Value) Company Address Payment Date of Payment Payment Value Please type in 'null' if the date is not found.
2023-01-25 19:53:56,115 - __main__ - INFO - 96 - <module>() - Final prediction for document 279: {'company': 'Toa Payoh', 'date': '01-01-2016', 'address': '7-05-2018', 'total': "$1,000.00 [+] Please type in 'null' if the date is not found. $500.00 This is an example of using data-driven content Please fill in the following key-value pairs into the fields [+] (Key: Value) Company Address Payment Date of Payment Payment Value Please type in 'null' if the date is not found."}
2023-01-25 19:53:56,115 - __main__ - INFO - 92 - <module>() - Predicting document 280...
2023-01-25 19:54:02,809 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The name of the company/group which will be recorded in the form
Date of Receipt: The date of receipt of the form
Address of Company: The address of the company/group
Total: The total number of forms submitted
* <|stop key|>

The document has a list of transactions, for each record, give the total and the list of transactions in a comma-separated format.

For this assignment you need to go to www.cba.gov.my and register to make a claim. After login in, choose "My account". Select the payment method you prefer to pay with
2023-01-25 19:54:02,811 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:02,812 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:02,812 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The name of the company/group which will be recorded in the form

2023-01-25 19:54:02,813 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The name of the company/group which will be recorded in the form
2023-01-25 19:54:02,813 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:02,814 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date of receipt of the form

2023-01-25 19:54:02,815 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date of receipt of the form
2023-01-25 19:54:02,815 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:02,816 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The address of the company/group

2023-01-25 19:54:02,816 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The address of the company/group
2023-01-25 19:54:02,817 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:02,817 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The total number of forms submitted
* <|stop key|>

The document has a list of transactions, for each record, give the total and the list of transactions in a comma-separated format.

For this assignment you need to go to www.cba.gov.my and register to make a claim. After login in, choose "My account". Select the payment method you prefer to pay with
2023-01-25 19:54:02,818 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The total number of forms submitted * <|stop key|> The document has a list of transactions, for each record, give the total and the list of transactions in a comma-separated format. For this assignment you need to go to www.cba.gov.my and register to make a claim. After login in, choose "My account". Select the payment method you prefer to pay with
2023-01-25 19:54:02,819 - __main__ - INFO - 96 - <module>() - Final prediction for document 280: {'company': 'The name of the company/group which will be recorded in the form', 'date': 'The date of receipt of the form', 'address': 'The address of the company/group', 'total': 'The total number of forms submitted * <|stop key|> The document has a list of transactions, for each record, give the total and the list of transactions in a comma-separated format. For this assignment you need to go to www.cba.gov.my and register to make a claim. After login in, choose "My account". Select the payment method you prefer to pay with'}
2023-01-25 19:54:02,822 - __main__ - INFO - 92 - <module>() - Predicting document 281...
2023-01-25 19:54:06,680 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KING'S CONFECTIONERY S/B
Date of Receipt: 20/05/17 13:14
Address of Company: Jalan SS6/3, Kelana Jaya, 47301 Petaling Jaya
Total: 662.48
2023-01-25 19:54:06,681 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:06,681 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:06,681 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KING'S CONFECTIONERY S/B

2023-01-25 19:54:06,682 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KING'S CONFECTIONERY S/B
2023-01-25 19:54:06,682 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:06,682 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20/05/17 13:14

2023-01-25 19:54:06,682 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20/05/17 13:14
2023-01-25 19:54:06,683 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:06,683 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan SS6/3, Kelana Jaya, 47301 Petaling Jaya

2023-01-25 19:54:06,683 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan SS6/3, Kelana Jaya, 47301 Petaling Jaya
2023-01-25 19:54:06,683 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:06,684 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  662.48
2023-01-25 19:54:06,684 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 662.48
2023-01-25 19:54:06,684 - __main__ - INFO - 96 - <module>() - Final prediction for document 281: {'company': "KING'S CONFECTIONERY S/B", 'date': '20/05/17 13:14', 'address': 'Jalan SS6/3, Kelana Jaya, 47301 Petaling Jaya', 'total': '662.48'}
2023-01-25 19:54:06,686 - __main__ - INFO - 92 - <module>() - Predicting document 282...
2023-01-25 19:54:14,273 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  PASARAYA BORONG PINTAR
SDN BHD
BR NO.: (124525-H)
NO 19-G& 19-1& 19-2 JALAN TASIK UTAMA 4,
MEDAN NIAGA TASIK DAMAI
016-5498845,
GST NO.:
30/01/2018 14:48:23
TAX INVOICE
TRN: CR0002815
COUNTER 3
CASHIER: 11
QTY UOM
UNIT AMT EXC. AMT INC.
BORONG
2023-01-25 19:54:14,275 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:14,275 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:14,275 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PASARAYA BORONG PINTAR
SDN BHD
BR NO.: (124525-H)
NO 19-G& 19-1& 19-2 JALAN TASIK UTAMA 4,
MEDAN NIAGA TASIK DAMAI
016-5498845,
GST NO.:
30/01/2018 14:48:23
TAX INVOICE
TRN: CR0002815
COUNTER 3
CASHIER: 11
QTY UOM
UNIT AMT EXC. AMT INC.
BORONG
2023-01-25 19:54:14,275 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PASARAYA BORONG PINTAR SDN BHD BR NO.: (124525-H) NO 19-G& 19-1& 19-2 JALAN TASIK UTAMA 4, MEDAN NIAGA TASIK DAMAI 016-5498845, GST NO.: 30/01/2018 14:48:23 TAX INVOICE TRN: CR0002815 COUNTER 3 CASHIER: 11 QTY UOM UNIT AMT EXC. AMT INC. BORONG
2023-01-25 19:54:14,275 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:14,275 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:14,276 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:14,276 - __main__ - INFO - 96 - <module>() - Final prediction for document 282: {'company': 'PASARAYA BORONG PINTAR SDN BHD BR NO.: (124525-H) NO 19-G& 19-1& 19-2 JALAN TASIK UTAMA 4, MEDAN NIAGA TASIK DAMAI 016-5498845, GST NO.: 30/01/2018 14:48:23 TAX INVOICE TRN: CR0002815 COUNTER 3 CASHIER: 11 QTY UOM UNIT AMT EXC. AMT INC. BORONG'}
2023-01-25 19:54:14,277 - __main__ - INFO - 92 - <module>() - Predicting document 283...
2023-01-25 19:54:16,780 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SCSR
Date of Receipt: 02-18-2018
Address of Company: JALAN BANTING
Total: $283.55
2023-01-25 19:54:16,781 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:16,781 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:16,781 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SCSR

2023-01-25 19:54:16,782 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SCSR
2023-01-25 19:54:16,782 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:16,782 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02-18-2018

2023-01-25 19:54:16,783 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02-18-2018
2023-01-25 19:54:16,783 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:16,783 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN BANTING

2023-01-25 19:54:16,783 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN BANTING
2023-01-25 19:54:16,783 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:16,784 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $283.55
2023-01-25 19:54:16,784 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $283.55
2023-01-25 19:54:16,784 - __main__ - INFO - 96 - <module>() - Final prediction for document 283: {'company': 'SCSR', 'date': '02-18-2018', 'address': 'JALAN BANTING', 'total': '$283.55'}
2023-01-25 19:54:16,786 - __main__ - INFO - 92 - <module>() - Predicting document 284...
2023-01-25 19:54:23,922 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  YAM FRESH
Date of Receipt: 2016-07-31 13:49:29
Address of Company: 52100 Kuala Lumpur
Total: RM7.95

Key: Value
Company Name: <|stop key|>
Date of Receipt: 2016-07-31 13:49:29
Address of Company: 52100 Kuala Lumpur
Total: RM7.95

My code is below but it seems not complete. Can anyone help me to create this query ? Or at least point me in the right direction so I can finish it myself.
2023-01-25 19:54:23,923 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:23,923 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:23,923 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  YAM FRESH

2023-01-25 19:54:23,923 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: YAM FRESH
2023-01-25 19:54:23,923 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:23,923 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2016-07-31 13:49:29

2023-01-25 19:54:23,923 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2016-07-31 13:49:29
2023-01-25 19:54:23,923 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:23,923 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  52100 Kuala Lumpur

2023-01-25 19:54:23,924 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 52100 Kuala Lumpur
2023-01-25 19:54:23,924 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:23,924 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM7.95

Key: Value
Company Name: <|stop key|>
Date of Receipt: 2016-07-31 13:49:29
Address of Company: 52100 Kuala Lumpur

2023-01-25 19:54:23,924 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM7.95 Key: Value Company Name: <|stop key|> Date of Receipt: 2016-07-31 13:49:29 Address of Company: 52100 Kuala Lumpur
2023-01-25 19:54:23,924 - __main__ - INFO - 96 - <module>() - Final prediction for document 284: {'company': 'YAM FRESH', 'date': '2016-07-31 13:49:29', 'address': '52100 Kuala Lumpur', 'total': 'RM7.95 Key: Value Company Name: <|stop key|> Date of Receipt: 2016-07-31 13:49:29 Address of Company: 52100 Kuala Lumpur'}
2023-01-25 19:54:23,925 - __main__ - INFO - 92 - <module>() - Predicting document 285...
2023-01-25 19:54:30,965 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KIMBERLEY
Date of Receipt: 20/08/2015
Address of Company: 2A, 1st Floor
Total: RM1599.88
Key: Value
Company Name: ZUPPA KING
Date of Receipt: 02/09/2015
Address of Company: A1, 2nd Floor
Total: RM2679.52
Key: Value
Company Name: KIMBERLEY
Date of Receipt: 20/08/2015
Address of Company: 2A, 1st Floor
Total: RM1599.88
Key: Value
Company Name:
2023-01-25 19:54:30,966 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:30,967 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:30,967 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KIMBERLEY

2023-01-25 19:54:30,968 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KIMBERLEY
2023-01-25 19:54:30,968 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:30,968 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20/08/2015

2023-01-25 19:54:30,969 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20/08/2015
2023-01-25 19:54:30,969 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:30,969 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2A, 1st Floor

2023-01-25 19:54:30,969 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2A, 1st Floor
2023-01-25 19:54:30,970 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:30,970 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM1599.88
Key: Value
Company Name: ZUPPA KING
Date of Receipt: 02/09/2015
Address of Company: A1, 2nd Floor

2023-01-25 19:54:30,970 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM1599.88 Key: Value Company Name: ZUPPA KING Date of Receipt: 02/09/2015 Address of Company: A1, 2nd Floor
2023-01-25 19:54:30,970 - __main__ - INFO - 96 - <module>() - Final prediction for document 285: {'company': 'KIMBERLEY', 'date': '20/08/2015', 'address': '2A, 1st Floor', 'total': 'RM1599.88 Key: Value Company Name: ZUPPA KING Date of Receipt: 02/09/2015 Address of Company: A1, 2nd Floor'}
2023-01-25 19:54:30,972 - __main__ - INFO - 92 - <module>() - Predicting document 286...
2023-01-25 19:54:37,515 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 27-06-2018 12:15:15
Address of Company:
Total: 2.30
TAX(RM): 0

A:

Since you need all fields in all lines, here is one possible solution that uses the Java programming language. It requires Java 8 or later and the Java SDK.
The below code will output the key/value pairs of all fields in the file to the console.
You can change the output format to whatever you need. See examples below.
import java.nio.file.Files;
import java.nio.file.Paths
2023-01-25 19:54:37,516 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:37,516 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:37,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:54:37,517 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:54:37,517 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:37,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27-06-2018 12:15:15

2023-01-25 19:54:37,517 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27-06-2018 12:15:15
2023-01-25 19:54:37,518 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:37,518 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:54:37,518 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:54:37,518 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:37,518 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2.30
TAX(RM): 0

A:

Since you need all fields in all lines, here is one possible solution that uses the Java programming language. It requires Java 8 or later and the Java SDK.
The below code will output the key/value pairs of all fields in the file to the console.
You can change the output format to whatever you need. See examples below.
import java.nio.file.Files;
import java.nio.file.Paths
2023-01-25 19:54:37,518 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2.30 TAX(RM): 0 A: Since you need all fields in all lines, here is one possible solution that uses the Java programming language. It requires Java 8 or later and the Java SDK. The below code will output the key/value pairs of all fields in the file to the console. You can change the output format to whatever you need. See examples below. import java.nio.file.Files; import java.nio.file.Paths
2023-01-25 19:54:37,519 - __main__ - INFO - 96 - <module>() - Final prediction for document 286: {'date': '27-06-2018 12:15:15', 'total': '2.30 TAX(RM): 0 A: Since you need all fields in all lines, here is one possible solution that uses the Java programming language. It requires Java 8 or later and the Java SDK. The below code will output the key/value pairs of all fields in the file to the console. You can change the output format to whatever you need. See examples below. import java.nio.file.Files; import java.nio.file.Paths'}
2023-01-25 19:54:37,520 - __main__ - INFO - 92 - <module>() - Predicting document 287...
2023-01-25 19:54:41,446 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SOURCE:
Date of Receipt: 25/09/2017
Address of Company: TEL: 03-55423228
Total: RMB 2,000.00
2023-01-25 19:54:41,446 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:41,446 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:41,446 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SOURCE:

2023-01-25 19:54:41,446 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SOURCE:
2023-01-25 19:54:41,446 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:41,447 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25/09/2017

2023-01-25 19:54:41,447 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25/09/2017
2023-01-25 19:54:41,447 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:41,447 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TEL: 03-55423228

2023-01-25 19:54:41,447 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TEL: 03-55423228
2023-01-25 19:54:41,447 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:41,447 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RMB 2,000.00
2023-01-25 19:54:41,448 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RMB 2,000.00
2023-01-25 19:54:41,448 - __main__ - INFO - 96 - <module>() - Final prediction for document 287: {'company': 'SOURCE:', 'date': '25/09/2017', 'address': 'TEL: 03-55423228', 'total': 'RMB 2,000.00'}
2023-01-25 19:54:41,448 - __main__ - INFO - 92 - <module>() - Predicting document 288...
2023-01-25 19:54:48,570 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  *********
Date of Receipt: ********
Address of Company: *********
Total: *********
|<|stop key|>

Total: $10.00
|<|stop key|>

0.40
|<|stop key|>

0.40
|<|stop key|>

0.40
|<|stop key|>

0.40
|<|stop key|>

0.40
|<|stop key|>

0.40
|<|stop key|>

0.40
|<|stop
2023-01-25 19:54:48,572 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:48,572 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:48,573 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  *********

2023-01-25 19:54:48,573 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: *********
2023-01-25 19:54:48,574 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:48,574 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ********

2023-01-25 19:54:48,574 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ********
2023-01-25 19:54:48,575 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:48,575 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  *********

2023-01-25 19:54:48,575 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: *********
2023-01-25 19:54:48,575 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:48,575 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  *********
|<|stop key|>


2023-01-25 19:54:48,576 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ********* |<|stop key|>
2023-01-25 19:54:48,576 - __main__ - INFO - 96 - <module>() - Final prediction for document 288: {'company': '*********', 'date': '********', 'address': '*********', 'total': '********* |<|stop key|>'}
2023-01-25 19:54:48,580 - __main__ - INFO - 92 - <module>() - Predicting document 289...
2023-01-25 19:54:55,532 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The full name of the firm
Date of Receipt: The receipt date of the invoice
Address of Company: The address of the company
Total: The total amount
: The symbol for a comma. Insert a comma only if it is preceded by a number
: The colon. Insert a colon only if it is preceded by a number

Input the name of the firm. Make sure to type it exactly how it is shown in the document.

Example:

1.

2.

3.

4.

INPUT NAME OF FIRM

Company Name: The full name of
2023-01-25 19:54:55,533 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:55,533 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:55,533 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The full name of the firm

2023-01-25 19:54:55,533 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The full name of the firm
2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The receipt date of the invoice

2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The receipt date of the invoice
2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The address of the company

2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The address of the company
2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The total amount
: The symbol for a comma. Insert a comma only if it is preceded by a number
: The colon. Insert a colon only if it is preceded by a number

Input the name of the firm. Make sure to type it exactly how it is shown in the document.

Example:

1.

2.

3.

4.

INPUT NAME OF FIRM

Company Name: The full name of
2023-01-25 19:54:55,534 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The total amount : The symbol for a comma. Insert a comma only if it is preceded by a number : The colon. Insert a colon only if it is preceded by a number Input the name of the firm. Make sure to type it exactly how it is shown in the document. Example: 1. 2. 3. 4. INPUT NAME OF FIRM Company Name: The full name of
2023-01-25 19:54:55,535 - __main__ - INFO - 96 - <module>() - Final prediction for document 289: {'company': 'The full name of the firm', 'date': 'The receipt date of the invoice', 'address': 'The address of the company', 'total': 'The total amount : The symbol for a comma. Insert a comma only if it is preceded by a number : The colon. Insert a colon only if it is preceded by a number Input the name of the firm. Make sure to type it exactly how it is shown in the document. Example: 1. 2. 3. 4. INPUT NAME OF FIRM Company Name: The full name of'}
2023-01-25 19:54:55,540 - __main__ - INFO - 92 - <module>() - Predicting document 290...
2023-01-25 19:55:02,706 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date of Receipt: date of receipt
Address of Company: ADDRESS OF COMPANY
Total: total
Date: <|stop key|>

I can extract the value of a specific key-value pair. But I don't know how to extract the total of all entries in a dictionary.

A:

Assuming your input is a CSV, you can parse the file by specifying the separator as comma and using DictReader.
import csv

data = list(csv.reader(open('data.csv', 'rb'), delimiter='\t'))
# print data
2023-01-25 19:55:02,706 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:02,707 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:02,707 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME

2023-01-25 19:55:02,707 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME
2023-01-25 19:55:02,708 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:02,708 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  date of receipt

2023-01-25 19:55:02,708 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: date of receipt
2023-01-25 19:55:02,708 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:02,709 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ADDRESS OF COMPANY

2023-01-25 19:55:02,709 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ADDRESS OF COMPANY
2023-01-25 19:55:02,709 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:02,709 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  total
Date: <|stop key|>

I can extract the value of a specific key-value pair. But I don't know how to extract the total of all entries in a dictionary.

A:

Assuming your input is a CSV, you can parse the file by specifying the separator as comma and using DictReader.
import csv

data = list(csv.reader(open('data.csv', 'rb'), delimiter='\t'))
# print data
2023-01-25 19:55:02,710 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: total Date: <|stop key|> I can extract the value of a specific key-value pair. But I don't know how to extract the total of all entries in a dictionary. A: Assuming your input is a CSV, you can parse the file by specifying the separator as comma and using DictReader. import csv data = list(csv.reader(open('data.csv', 'rb'), delimiter='\t')) # print data
2023-01-25 19:55:02,710 - __main__ - INFO - 96 - <module>() - Final prediction for document 290: {'company': 'COMPANY NAME', 'date': 'date of receipt', 'address': 'ADDRESS OF COMPANY', 'total': "total Date: <|stop key|> I can extract the value of a specific key-value pair. But I don't know how to extract the total of all entries in a dictionary. A: Assuming your input is a CSV, you can parse the file by specifying the separator as comma and using DictReader. import csv data = list(csv.reader(open('data.csv', 'rb'), delimiter='\\t')) # print data"}
2023-01-25 19:55:02,712 - __main__ - INFO - 92 - <module>() - Predicting document 291...
2023-01-25 19:55:10,418 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: 05-06-2018
Address of Company: 1211, Gombak - Selangor
Total: 20.70
Note: The above value in 'Total' is the sum of (Total(1)+Total(2)+Total(3)+Total(4)) of each ingredient.

Create a new list called 'T1' which will contain a header and a list of words from the string provided in 'T'. If the string 'T' is longer than 3 words, use 2 words. Also you need to use the words 'Total' from the string
2023-01-25 19:55:10,419 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:10,419 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:10,419 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:55:10,419 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:55:10,419 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:10,419 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  05-06-2018

2023-01-25 19:55:10,420 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05-06-2018
2023-01-25 19:55:10,420 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:10,420 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1211, Gombak - Selangor

2023-01-25 19:55:10,420 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1211, Gombak - Selangor
2023-01-25 19:55:10,420 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:10,420 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20.70
Note: The above value in 'Total' is the sum of (Total(1)+Total(2)+Total(3)+Total(4)) of each ingredient.

Create a new list called 'T1' which will contain a header and a list of words from the string provided in 'T'. If the string 'T' is longer than 3 words, use 2 words. Also you need to use the words 'Total' from the string
2023-01-25 19:55:10,420 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20.70 Note: The above value in 'Total' is the sum of (Total(1)+Total(2)+Total(3)+Total(4)) of each ingredient. Create a new list called 'T1' which will contain a header and a list of words from the string provided in 'T'. If the string 'T' is longer than 3 words, use 2 words. Also you need to use the words 'Total' from the string
2023-01-25 19:55:10,420 - __main__ - INFO - 96 - <module>() - Final prediction for document 291: {'company': 'N/A', 'date': '05-06-2018', 'address': '1211, Gombak - Selangor', 'total': "20.70 Note: The above value in 'Total' is the sum of (Total(1)+Total(2)+Total(3)+Total(4)) of each ingredient. Create a new list called 'T1' which will contain a header and a list of words from the string provided in 'T'. If the string 'T' is longer than 3 words, use 2 words. Also you need to use the words 'Total' from the string"}
2023-01-25 19:55:10,421 - __main__ - INFO - 92 - <module>() - Predicting document 292...
2023-01-25 19:55:17,377 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:   Covata Sdn. Bhd.
Date of Receipt:  15-05-2018
Address of Company:  Sekolah Menengah Dato' Sheikh Ahmad, Jalan Dato' Sulaiman, Kuala Lipis, Pahang
Total:  $7.30
1.$5.50
2.$1.80
Net Total: $7.30
Parcel No: OR18050602160288
Parcels received: (date, address and quantity of products).
Quantity:  1
2023-01-25 19:55:17,378 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:17,378 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:17,378 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   Covata Sdn. Bhd.

2023-01-25 19:55:17,378 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Covata Sdn. Bhd.
2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   15-05-2018

2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15-05-2018
2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   Sekolah Menengah Dato' Sheikh Ahmad, Jalan Dato' Sulaiman, Kuala Lipis, Pahang

2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sekolah Menengah Dato' Sheikh Ahmad, Jalan Dato' Sulaiman, Kuala Lipis, Pahang
2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   $7.30
1.$5.50
2.$1.80
Net
2023-01-25 19:55:17,379 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $7.30 1.$5.50 2.$1.80 Net
2023-01-25 19:55:17,380 - __main__ - INFO - 96 - <module>() - Final prediction for document 292: {'company': 'Covata Sdn. Bhd.', 'date': '15-05-2018', 'address': "Sekolah Menengah Dato' Sheikh Ahmad, Jalan Dato' Sulaiman, Kuala Lipis, Pahang", 'total': '$7.30 1.$5.50 2.$1.80 Net'}
2023-01-25 19:55:17,381 - __main__ - INFO - 92 - <module>() - Predicting document 293...
2023-01-25 19:55:24,330 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BAYER LEVERKUSEN
Date of Receipt: 17/05/2018
Address of Company: MALAYSIA
Total: 55.90

Output the above lines into a table, like this:
|Company Name|Date of Receipt|Address of Company|Total|
| BAYER LEVERKUSEN | 17/05/2018    | MALAYSIA         | 55.90|

Input the next three lines of the above document:
"TOTAL :"
" SRVC 5% "
" 5"

Output a table with these three
2023-01-25 19:55:24,331 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:24,332 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:24,332 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BAYER LEVERKUSEN

2023-01-25 19:55:24,332 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BAYER LEVERKUSEN
2023-01-25 19:55:24,333 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:24,333 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17/05/2018

2023-01-25 19:55:24,333 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17/05/2018
2023-01-25 19:55:24,333 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:24,334 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MALAYSIA

2023-01-25 19:55:24,334 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MALAYSIA
2023-01-25 19:55:24,334 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:24,335 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  55.90

Output the above lines into a table, like this:
|Company Name|Date of Receipt|Address of Company|Total|
| BAYER LEVERKUSEN | 17/05/2018    | MALAYSIA         | 55.90|

Input the next three lines of the above document:
"TOTAL :"
" SRVC 5% "
" 5"

Output a table with these three
2023-01-25 19:55:24,335 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 55.90 Output the above lines into a table, like this: |Company Name|Date of Receipt|Address of Company|Total| | BAYER LEVERKUSEN | 17/05/2018  | MALAYSIA     | 55.90| Input the next three lines of the above document: "TOTAL :" " SRVC 5% " " 5" Output a table with these three
2023-01-25 19:55:24,335 - __main__ - INFO - 96 - <module>() - Final prediction for document 293: {'company': 'BAYER LEVERKUSEN', 'date': '17/05/2018', 'address': 'MALAYSIA', 'total': '55.90 Output the above lines into a table, like this: |Company Name|Date of Receipt|Address of Company|Total| | BAYER LEVERKUSEN | 17/05/2018  | MALAYSIA     | 55.90| Input the next three lines of the above document: "TOTAL :" " SRVC 5% " " 5" Output a table with these three'}
2023-01-25 19:55:24,338 - __main__ - INFO - 92 - <module>() - Predicting document 294...
2023-01-25 19:55:32,442 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  'AA PHARMACY'
Date of Receipt: '29-01-2018'
Address of Company: '1188096-W'
Total: '44.94'

Input the values you extracted from the document set above in column "a".

Create a 2D dataframe with a 2D array. In this example we will use an array of 7 rows and 4 columns.

In the formula cell, select the cell in which you want to put the formula, you can see at the beginning of the example, the formula is $A$2 (see green circle). In
2023-01-25 19:55:32,443 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:32,443 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:32,443 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  'AA PHARMACY'

2023-01-25 19:55:32,444 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: AA PHARMACY
2023-01-25 19:55:32,444 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:32,445 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  '29-01-2018'

2023-01-25 19:55:32,445 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 29-01-2018
2023-01-25 19:55:32,446 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:32,446 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  '1188096-W'

2023-01-25 19:55:32,446 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1188096-W
2023-01-25 19:55:32,446 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:32,447 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  '44.94'

Input the values you extracted from the document set above in column "a".

Create a 2D dataframe with a 2D array. In this example we will use an array of 7 rows and 4 columns.

In the formula cell, select the cell in which you want to put the formula, you can see at the beginning of the example, the formula is $A$2 (see green circle). In
2023-01-25 19:55:32,447 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: '44.94' Input the values you extracted from the document set above in column "a". Create a 2D dataframe with a 2D array. In this example we will use an array of 7 rows and 4 columns. In the formula cell, select the cell in which you want to put the formula, you can see at the beginning of the example, the formula is $A$2 (see green circle). In
2023-01-25 19:55:32,447 - __main__ - INFO - 96 - <module>() - Final prediction for document 294: {'company': 'AA PHARMACY', 'date': '29-01-2018', 'address': '1188096-W', 'total': '\'44.94\' Input the values you extracted from the document set above in column "a". Create a 2D dataframe with a 2D array. In this example we will use an array of 7 rows and 4 columns. In the formula cell, select the cell in which you want to put the formula, you can see at the beginning of the example, the formula is $A$2 (see green circle). In'}
2023-01-25 19:55:32,449 - __main__ - INFO - 92 - <module>() - Predicting document 295...
2023-01-25 19:55:35,653 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  0001
Date of Receipt: 17/03/2018
Address of Company: SUCI ALAM JAYA TRANSPORT NO 1
Total: 68.9
2023-01-25 19:55:35,653 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:35,653 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:35,653 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0001

2023-01-25 19:55:35,654 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0001
2023-01-25 19:55:35,654 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:35,654 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17/03/2018

2023-01-25 19:55:35,654 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17/03/2018
2023-01-25 19:55:35,654 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:35,654 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SUCI ALAM JAYA TRANSPORT NO 1

2023-01-25 19:55:35,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SUCI ALAM JAYA TRANSPORT NO 1
2023-01-25 19:55:35,655 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:35,655 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  68.9
2023-01-25 19:55:35,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 68.9
2023-01-25 19:55:35,655 - __main__ - INFO - 96 - <module>() - Final prediction for document 295: {'company': '0001', 'date': '17/03/2018', 'address': 'SUCI ALAM JAYA TRANSPORT NO 1', 'total': '68.9'}
2023-01-25 19:55:35,656 - __main__ - INFO - 92 - <module>() - Predicting document 296...
2023-01-25 19:55:42,758 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
DTR/DTRG
Date of Receipt: 2015-10-16
Address of Company: 8/3 Jalan Kota Sentosa, 61200 Kajang, Selangor
Total: RM4,620.30
<|Stop key|>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: null
DTR/DTR
2023-01-25 19:55:42,759 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:42,760 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:42,760 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null
DTR/DTRG

2023-01-25 19:55:42,761 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null DTR/DTRG
2023-01-25 19:55:42,761 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:42,761 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2015-10-16

2023-01-25 19:55:42,762 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2015-10-16
2023-01-25 19:55:42,762 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:42,762 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8/3 Jalan Kota Sentosa, 61200 Kajang, Selangor

2023-01-25 19:55:42,762 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8/3 Jalan Kota Sentosa, 61200 Kajang, Selangor
2023-01-25 19:55:42,763 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:42,763 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM4,620.30
<|Stop key|>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: null
DTR/DTR
2023-01-25 19:55:42,763 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM4,620.30 <|Stop key|> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: null DTR/DTR
2023-01-25 19:55:42,763 - __main__ - INFO - 96 - <module>() - Final prediction for document 296: {'date': '2015-10-16', 'address': '8/3 Jalan Kota Sentosa, 61200 Kajang, Selangor', 'total': 'RM4,620.30 <|Stop key|> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: null DTR/DTR'}
2023-01-25 19:55:42,765 - __main__ - INFO - 92 - <module>() - Predicting document 297...
2023-01-25 19:55:47,187 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  LIGHTS AND GARDENIA BAKERIES (KL) SDN BHD
Date of Receipt: 02/09/2017
Address of Company: 45100 PJ PJ
Total: 47.60

Add these two values together. The result should be 48.57.


2023-01-25 19:55:47,188 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:47,189 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:47,189 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  LIGHTS AND GARDENIA BAKERIES (KL) SDN BHD

2023-01-25 19:55:47,189 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LIGHTS AND GARDENIA BAKERIES (KL) SDN BHD
2023-01-25 19:55:47,190 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:47,190 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02/09/2017

2023-01-25 19:55:47,190 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02/09/2017
2023-01-25 19:55:47,191 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:47,191 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  45100 PJ PJ

2023-01-25 19:55:47,191 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 45100 PJ PJ
2023-01-25 19:55:47,192 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:47,192 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  47.60

Add these two values together. The result should be 48.57.


2023-01-25 19:55:47,192 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 47.60 Add these two values together. The result should be 48.57.
2023-01-25 19:55:47,193 - __main__ - INFO - 96 - <module>() - Final prediction for document 297: {'company': 'LIGHTS AND GARDENIA BAKERIES (KL) SDN BHD', 'date': '02/09/2017', 'address': '45100 PJ PJ', 'total': '47.60 Add these two values together. The result should be 48.57.'}
2023-01-25 19:55:47,195 - __main__ - INFO - 92 - <module>() - Predicting document 298...
2023-01-25 19:55:54,582 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Kedai Bersih
Date of Receipt: 17/03/2018
Address of Company: 43800 Dengkil
Total: 1342.92
Key: Value
Company Name: Kedai Bersih
Date of Receipt: 18/03/2018
Address of Company: 43800 Dengkil
Total: 708.48
Key: Value
Company Name: Kedai Bersih
Date of Receipt: 19/03/2018
Address of Company: 43800 Dengkil
Total: 1093.92
Key: Value
Company Name: Ked
2023-01-25 19:55:54,584 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:54,584 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:54,585 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kedai Bersih

2023-01-25 19:55:54,585 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kedai Bersih
2023-01-25 19:55:54,585 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:54,585 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17/03/2018

2023-01-25 19:55:54,586 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17/03/2018
2023-01-25 19:55:54,586 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:54,586 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  43800 Dengkil

2023-01-25 19:55:54,587 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 43800 Dengkil
2023-01-25 19:55:54,587 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:54,587 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1342.92
Key: Value
Company Name: Kedai Bersih
Date of Receipt: 18/03/2018
Address of Company: 43800 Dengkil

2023-01-25 19:55:54,587 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1342.92 Key: Value Company Name: Kedai Bersih Date of Receipt: 18/03/2018 Address of Company: 43800 Dengkil
2023-01-25 19:55:54,588 - __main__ - INFO - 96 - <module>() - Final prediction for document 298: {'company': 'Kedai Bersih', 'date': '17/03/2018', 'address': '43800 Dengkil', 'total': '1342.92 Key: Value Company Name: Kedai Bersih Date of Receipt: 18/03/2018 Address of Company: 43800 Dengkil'}
2023-01-25 19:55:54,590 - __main__ - INFO - 92 - <module>() - Predicting document 299...
2023-01-25 19:56:01,612 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Receipt Date
Address of Company: Address of Company
Total: Total

Now that you have the required data, output the data into a table.

Create a table containing the data as shown below:

Table.

Company Name

Date Received

Address

Amount

0.6

24/7

R&G

100.00

1

21/8

JY

30.00

1

23/2

JY

5.00

1
2023-01-25 19:56:01,613 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:01,614 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:01,614 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:56:01,614 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:56:01,614 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:01,615 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Receipt Date

2023-01-25 19:56:01,615 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt Date
2023-01-25 19:56:01,615 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:01,616 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:56:01,616 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:56:01,616 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:01,616 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Now that you have the required data, output the data into a table.

Create a table containing the data as shown below:

Table.

Company Name

Date Received

Address

Amount

0.6

24/7

R&G

100.00

1

21/8

JY

30.00

1

23/2

JY

5.00

1
2023-01-25 19:56:01,617 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Now that you have the required data, output the data into a table. Create a table containing the data as shown below: Table. Company Name Date Received Address Amount 0.6 24/7 R&G 100.00 1 21/8 JY 30.00 1 23/2 JY 5.00 1
2023-01-25 19:56:01,617 - __main__ - INFO - 96 - <module>() - Final prediction for document 299: {'company': 'Company Name', 'date': 'Receipt Date', 'address': 'Address of Company', 'total': 'Total Now that you have the required data, output the data into a table. Create a table containing the data as shown below: Table. Company Name Date Received Address Amount 0.6 24/7 R&G 100.00 1 21/8 JY 30.00 1 23/2 JY 5.00 1'}
2023-01-25 19:56:01,618 - __main__ - INFO - 92 - <module>() - Predicting document 300...
2023-01-25 19:56:08,395 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Address of Company:
Tax Invoice Number:
Date of Receipt:
Date of Debit:

<|> (pipe) will choose the element from the list if the list is not empty.

Note that you will need to manually put in "null" (without the quotes) or some other non-value for any of the above if the corresponding field in the text is blank. For example, if you want to put in some string when the document doesn't have a value you would put in "null" or similar.

Your Output
Company Name: NSTIWOSI WIJ
2023-01-25 19:56:08,396 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:08,396 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:08,397 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Address of Company:
Tax Invoice Number:

2023-01-25 19:56:08,397 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company: Tax Invoice Number:
2023-01-25 19:56:08,397 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:08,398 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date of Debit:

<|> (pipe) will choose the element from the list if the list is not empty.

Note that you will need to manually put in "null" (without the quotes) or some other non-value for any of the above if the corresponding field in the text is blank. For example, if you want to put in some string when the document doesn't have a value you would put in "null" or similar.

Your Output
Company Name: NSTIWOSI WIJ
2023-01-25 19:56:08,398 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Debit: <|> (pipe) will choose the element from the list if the list is not empty. Note that you will need to manually put in "null" (without the quotes) or some other non-value for any of the above if the corresponding field in the text is blank. For example, if you want to put in some string when the document doesn't have a value you would put in "null" or similar. Your Output Company Name: NSTIWOSI WIJ
2023-01-25 19:56:08,398 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:08,398 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Tax Invoice Number:
Date of Receipt:
Date of Debit:

<|> (pipe) will choose the element from the list if the list is not empty.

Note that you will need to manually put in "null" (without the quotes) or some other non-value for any of the above if the corresponding field in the text is blank. For example, if you want to put in some string when the document doesn't have a value you would put in "null" or similar.

Your Output
Company Name: NSTIWOSI WIJ
2023-01-25 19:56:08,398 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tax Invoice Number: Date of Receipt: Date of Debit: <|> (pipe) will choose the element from the list if the list is not empty. Note that you will need to manually put in "null" (without the quotes) or some other non-value for any of the above if the corresponding field in the text is blank. For example, if you want to put in some string when the document doesn't have a value you would put in "null" or similar. Your Output Company Name: NSTIWOSI WIJ
2023-01-25 19:56:08,399 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:08,399 - __main__ - INFO - 96 - <module>() - Final prediction for document 300: {'company': 'Address of Company: Tax Invoice Number:', 'date': 'Date of Debit: <|> (pipe) will choose the element from the list if the list is not empty. Note that you will need to manually put in "null" (without the quotes) or some other non-value for any of the above if the corresponding field in the text is blank. For example, if you want to put in some string when the document doesn\'t have a value you would put in "null" or similar. Your Output Company Name: NSTIWOSI WIJ', 'address': 'Tax Invoice Number: Date of Receipt: Date of Debit: <|> (pipe) will choose the element from the list if the list is not empty. Note that you will need to manually put in "null" (without the quotes) or some other non-value for any of the above if the corresponding field in the text is blank. For example, if you want to put in some string when the document doesn\'t have a value you would put in "null" or similar. Your Output Company Name: NSTIWOSI WIJ'}
2023-01-25 19:56:08,400 - __main__ - INFO - 92 - <module>() - Predicting document 301...
2023-01-25 19:56:14,969 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BANK MONEY EXPRESS (BME) LTD
Date of Receipt: 21/03/2018
Address of Company: TEL: 088-2568300
Total: 8.10
You may add a single line at the bottom of this page. Include your email address and the code with which you sent the sample document above. We will acknowledge receipt of your submission.

Please use the form below to provide us with information about this sample. Feel free to enter any additional comments about this sample here. We will treat this information with the utmost care and confidentiality. Your feedback will help us to improve
2023-01-25 19:56:14,971 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:14,971 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:14,972 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BANK MONEY EXPRESS (BME) LTD

2023-01-25 19:56:14,972 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BANK MONEY EXPRESS (BME) LTD
2023-01-25 19:56:14,973 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:14,973 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/03/2018

2023-01-25 19:56:14,973 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/03/2018
2023-01-25 19:56:14,973 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:14,974 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TEL: 088-2568300

2023-01-25 19:56:14,974 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TEL: 088-2568300
2023-01-25 19:56:14,974 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:14,974 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8.10
You may add a single line at the bottom of this page. Include your email address and the code with which you sent the sample document above. We will acknowledge receipt of your submission.

Please use the form below to provide us with information about this sample. Feel free to enter any additional comments about this sample here. We will treat this information with the utmost care and confidentiality. Your feedback will help us to improve
2023-01-25 19:56:14,975 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8.10 You may add a single line at the bottom of this page. Include your email address and the code with which you sent the sample document above. We will acknowledge receipt of your submission. Please use the form below to provide us with information about this sample. Feel free to enter any additional comments about this sample here. We will treat this information with the utmost care and confidentiality. Your feedback will help us to improve
2023-01-25 19:56:14,975 - __main__ - INFO - 96 - <module>() - Final prediction for document 301: {'company': 'BANK MONEY EXPRESS (BME) LTD', 'date': '21/03/2018', 'address': 'TEL: 088-2568300', 'total': '8.10 You may add a single line at the bottom of this page. Include your email address and the code with which you sent the sample document above. We will acknowledge receipt of your submission. Please use the form below to provide us with information about this sample. Feel free to enter any additional comments about this sample here. We will treat this information with the utmost care and confidentiality. Your feedback will help us to improve'}
2023-01-25 19:56:14,977 - __main__ - INFO - 92 - <module>() - Predicting document 302...
2023-01-25 19:56:17,115 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  CompanyName
Date of Receipt: Date
Address of Company: Address
Total: Total
2023-01-25 19:56:17,115 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:17,116 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:17,116 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CompanyName

2023-01-25 19:56:17,116 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CompanyName
2023-01-25 19:56:17,117 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:17,117 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date

2023-01-25 19:56:17,117 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date
2023-01-25 19:56:17,117 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:17,118 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address

2023-01-25 19:56:17,118 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address
2023-01-25 19:56:17,118 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:17,118 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:56:17,119 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:56:17,119 - __main__ - INFO - 96 - <module>() - Final prediction for document 302: {'company': 'CompanyName', 'date': 'Date', 'address': 'Address', 'total': 'Total'}
2023-01-25 19:56:17,121 - __main__ - INFO - 92 - <module>() - Predicting document 303...
2023-01-25 19:56:23,949 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
1.  <|start key|>
2.  <|stop key|>
3.  <|stop key|>
4.  <|stop key|>

Key: Value

# Example Code Extract

## R

sample_file_name <- "test_key_value_pair.pdf"
doc <- pdf_text(sample_file_name)

# Extract company name
company_name <- stringr::str_extract(doc, "<([^>]*>[^
2023-01-25 19:56:23,950 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:23,950 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:23,950 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:23,950 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:23,951 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:23,951 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:23,951 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:23,951 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:23,951 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:23,952 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:23,952 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:23,952 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
1.  <|start key|>
2.  <|stop key|>
3.  <|stop key|>
4.  <|stop key|>

Key: Value

# Example Code Extract

## R

sample_file_name <- "test_key_value_pair.pdf"
doc <- pdf_text(sample_file_name)

# Extract company name
company_name <- stringr::str_extract(doc, "<([^>]*>[^
2023-01-25 19:56:23,952 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1. <|start key|> 2. <|stop key|> 3. <|stop key|> 4. <|stop key|> Key: Value # Example Code Extract ## R sample_file_name <- "test_key_value_pair.pdf" doc <- pdf_text(sample_file_name) # Extract company name company_name <- stringr::str_extract(doc, "<([^>]*>[^
2023-01-25 19:56:23,953 - __main__ - INFO - 96 - <module>() - Final prediction for document 303: {'total': '1. <|start key|> 2. <|stop key|> 3. <|stop key|> 4. <|stop key|> Key: Value # Example Code Extract ## R sample_file_name <- "test_key_value_pair.pdf" doc <- pdf_text(sample_file_name) # Extract company name company_name <- stringr::str_extract(doc, "<([^>]*>[^'}
2023-01-25 19:56:23,954 - __main__ - INFO - 92 - <module>() - Predicting document 304...
2023-01-25 19:56:25,984 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Company Name"
Date of Receipt: "Date of Receipt"
Address of Company: "Address of Company"
Total: "Total"
2023-01-25 19:56:25,984 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:25,985 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:25,985 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Company Name"

2023-01-25 19:56:25,985 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:56:25,986 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:25,986 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Date of Receipt"

2023-01-25 19:56:25,986 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:56:25,986 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:25,987 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Address of Company"

2023-01-25 19:56:25,987 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:56:25,987 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:25,987 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Total"
2023-01-25 19:56:25,988 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:56:25,988 - __main__ - INFO - 96 - <module>() - Final prediction for document 304: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:56:25,990 - __main__ - INFO - 92 - <module>() - Predicting document 305...
2023-01-25 19:56:33,068 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "ACB PINEAPPLE INC"
Date of Receipt: "2014/01/01"
Address of Company: "KUALA LUMPUR"
Total: "734.50"
Note: The 'stop key' is not mandatory to be a column in the data, but at least one key should exist.

I've started off with the first code snippet (that was provided by Jitendra). Can you please guide me further for the second code? If I don't provide any of the details (company name, date of receipt etc) then I'm getting "System.Runtime
2023-01-25 19:56:33,070 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:33,070 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:33,071 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "ACB PINEAPPLE INC"

2023-01-25 19:56:33,071 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ACB PINEAPPLE INC
2023-01-25 19:56:33,071 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:33,072 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2014/01/01"

2023-01-25 19:56:33,072 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2014/01/01
2023-01-25 19:56:33,072 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:33,072 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "KUALA LUMPUR"

2023-01-25 19:56:33,073 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KUALA LUMPUR
2023-01-25 19:56:33,073 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:33,073 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "734.50"
Note: The 'stop key' is not mandatory to be a column in the data, but at least one key should exist.

I've started off with the first code snippet (that was provided by Jitendra). Can you please guide me further for the second code? If I don't provide any of the details (company name, date of receipt etc) then I'm getting "System.Runtime
2023-01-25 19:56:33,073 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "734.50" Note: The 'stop key' is not mandatory to be a column in the data, but at least one key should exist. I've started off with the first code snippet (that was provided by Jitendra). Can you please guide me further for the second code? If I don't provide any of the details (company name, date of receipt etc) then I'm getting "System.Runtime
2023-01-25 19:56:33,074 - __main__ - INFO - 96 - <module>() - Final prediction for document 305: {'company': 'ACB PINEAPPLE INC', 'date': '2014/01/01', 'address': 'KUALA LUMPUR', 'total': '"734.50" Note: The \'stop key\' is not mandatory to be a column in the data, but at least one key should exist. I\'ve started off with the first code snippet (that was provided by Jitendra). Can you please guide me further for the second code? If I don\'t provide any of the details (company name, date of receipt etc) then I\'m getting "System.Runtime'}
2023-01-25 19:56:33,076 - __main__ - INFO - 92 - <module>() - Predicting document 306...
2023-01-25 19:56:40,138 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Bar Wang Rice
Date of Receipt: 25 Feb 2019
Address of Company: 848 Jalan Tampoi
Total: $15.30

This code gives you another result.

Company Name: Bar Wang Rice
Date of Receipt: 25 Feb 2019
Address of Company: 848 Jalan Tampoi
Total: $15.30

I want to extract value like:

Bar Wang Rice - $15.30

Here is my code which gives you only $15.30 value.
How to get company name as well as get the right output.
2023-01-25 19:56:40,139 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:40,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:40,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bar Wang Rice

2023-01-25 19:56:40,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bar Wang Rice
2023-01-25 19:56:40,140 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:40,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25 Feb 2019

2023-01-25 19:56:40,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25 Feb 2019
2023-01-25 19:56:40,141 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:40,141 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  848 Jalan Tampoi

2023-01-25 19:56:40,141 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 848 Jalan Tampoi
2023-01-25 19:56:40,141 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:40,142 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $15.30

This code gives you another result.

Company Name: Bar Wang Rice
Date of Receipt: 25 Feb 2019
Address of Company: 848 Jalan Tampoi

2023-01-25 19:56:40,142 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $15.30 This code gives you another result. Company Name: Bar Wang Rice Date of Receipt: 25 Feb 2019 Address of Company: 848 Jalan Tampoi
2023-01-25 19:56:40,142 - __main__ - INFO - 96 - <module>() - Final prediction for document 306: {'company': 'Bar Wang Rice', 'date': '25 Feb 2019', 'address': '848 Jalan Tampoi', 'total': '$15.30 This code gives you another result. Company Name: Bar Wang Rice Date of Receipt: 25 Feb 2019 Address of Company: 848 Jalan Tampoi'}
2023-01-25 19:56:40,144 - __main__ - INFO - 92 - <module>() - Predicting document 307...
2023-01-25 19:56:46,953 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Bar Wang Rice
Date of Receipt: 28-JUN-2018
Address of Company: Jalan Tampoi 7/4, Kawasan Perindunistrian Tampoi, 81200, Johor Bahru, Johor
Total: RM10.15

Here you go:

company name: Bar Wang Rice
date of receipt: 27-JUN-2018
address of company: Jalan Tampoi 7/4, Kawasan Perindunistrian Tampoi, 81200, Johor Bahru, Johor
total: RM10.15


2023-01-25 19:56:46,954 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:46,954 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:46,955 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bar Wang Rice

2023-01-25 19:56:46,955 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bar Wang Rice
2023-01-25 19:56:46,955 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:46,955 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  28-JUN-2018

2023-01-25 19:56:46,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28-JUN-2018
2023-01-25 19:56:46,956 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:46,956 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Tampoi 7/4, Kawasan Perindunistrian Tampoi, 81200, Johor Bahru, Johor

2023-01-25 19:56:46,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Tampoi 7/4, Kawasan Perindunistrian Tampoi, 81200, Johor Bahru, Johor
2023-01-25 19:56:46,957 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:46,957 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM10.15

Here you go:

company name: Bar Wang Rice
date of receipt: 27-JUN-2018
address of company: Jalan Tampoi 7/4, Kawasan Perindunistrian Tampoi, 81200, Johor Bahru, Johor

2023-01-25 19:56:46,957 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM10.15 Here you go: company name: Bar Wang Rice date of receipt: 27-JUN-2018 address of company: Jalan Tampoi 7/4, Kawasan Perindunistrian Tampoi, 81200, Johor Bahru, Johor
2023-01-25 19:56:46,957 - __main__ - INFO - 96 - <module>() - Final prediction for document 307: {'company': 'Bar Wang Rice', 'date': '28-JUN-2018', 'address': 'Jalan Tampoi 7/4, Kawasan Perindunistrian Tampoi, 81200, Johor Bahru, Johor', 'total': 'RM10.15 Here you go: company name: Bar Wang Rice date of receipt: 27-JUN-2018 address of company: Jalan Tampoi 7/4, Kawasan Perindunistrian Tampoi, 81200, Johor Bahru, Johor'}
2023-01-25 19:56:46,960 - __main__ - INFO - 92 - <module>() - Predicting document 308...
2023-01-25 19:56:51,087 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KENNETH AYERS
Date of Receipt: 13-04-2018
Address of Company: PO BOX 634
14-40-01 MOUNT DANGER
NSW
A5 B1
P.O BOX 634
NSW
A5 B1
2023-01-25 19:56:51,087 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:51,088 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:51,088 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KENNETH AYERS

2023-01-25 19:56:51,088 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KENNETH AYERS
2023-01-25 19:56:51,089 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:51,089 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13-04-2018

2023-01-25 19:56:51,089 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13-04-2018
2023-01-25 19:56:51,090 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:51,090 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PO BOX 634
14-40-01 MOUNT DANGER
NSW
A5 B1
P.O BOX 634
NSW
A5 B1
2023-01-25 19:56:51,090 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PO BOX 634 14-40-01 MOUNT DANGER NSW A5 B1 P.O BOX 634 NSW A5 B1
2023-01-25 19:56:51,090 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:51,091 - __main__ - INFO - 96 - <module>() - Final prediction for document 308: {'company': 'KENNETH AYERS', 'date': '13-04-2018', 'address': 'PO BOX 634 14-40-01 MOUNT DANGER NSW A5 B1 P.O BOX 634 NSW A5 B1'}
2023-01-25 19:56:51,092 - __main__ - INFO - 92 - <module>() - Predicting document 309...
2023-01-25 19:56:58,453 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Yunus Taka
Date of Receipt: 27-06-2015
Address of Company: Jalan Raya Gepar Penajam Utara, Kedah
Total: 75210.00

Create a new table called "Customers and their invoices". This table must contain the following columns

Customer Name
Customer Number
Vat Number
Invoice Number
Invoice Date

Customer Name: Customer ID of customer who made the invoice
Customer Number: Customer ID of the customer who made the invoice
Vat Number: Customer ID of the customer who made the invoice
In
2023-01-25 19:56:58,455 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:58,455 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:58,455 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Yunus Taka

2023-01-25 19:56:58,456 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Yunus Taka
2023-01-25 19:56:58,456 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:58,456 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27-06-2015

2023-01-25 19:56:58,456 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27-06-2015
2023-01-25 19:56:58,457 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:58,457 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Raya Gepar Penajam Utara, Kedah

2023-01-25 19:56:58,457 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Raya Gepar Penajam Utara, Kedah
2023-01-25 19:56:58,458 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:58,458 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  75210.00

Create a new table called "Customers and their invoices". This table must contain the following columns

Customer Name
Customer Number
Vat Number
Invoice Number
Invoice Date

Customer Name: Customer ID of customer who made the invoice
Customer Number: Customer ID of the customer who made the invoice
Vat Number: Customer ID of the customer who made the invoice
In
2023-01-25 19:56:58,458 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 75210.00 Create a new table called "Customers and their invoices". This table must contain the following columns Customer Name Customer Number Vat Number Invoice Number Invoice Date Customer Name: Customer ID of customer who made the invoice Customer Number: Customer ID of the customer who made the invoice Vat Number: Customer ID of the customer who made the invoice In
2023-01-25 19:56:58,458 - __main__ - INFO - 96 - <module>() - Final prediction for document 309: {'company': 'Yunus Taka', 'date': '27-06-2015', 'address': 'Jalan Raya Gepar Penajam Utara, Kedah', 'total': '75210.00 Create a new table called "Customers and their invoices". This table must contain the following columns Customer Name Customer Number Vat Number Invoice Number Invoice Date Customer Name: Customer ID of customer who made the invoice Customer Number: Customer ID of the customer who made the invoice Vat Number: Customer ID of the customer who made the invoice In'}
2023-01-25 19:56:58,460 - __main__ - INFO - 92 - <module>() - Predicting document 310...
2023-01-25 19:57:01,961 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Kechara
Date of Receipt: 15/05/18 13:06
Address of Company: Block D, Suite, Jalan Unvi, 46200, Petaling Jaya, Selangor
Total: 64.50
2023-01-25 19:57:01,961 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:01,962 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:01,962 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kechara

2023-01-25 19:57:01,962 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kechara
2023-01-25 19:57:01,962 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:01,962 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15/05/18 13:06

2023-01-25 19:57:01,962 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15/05/18 13:06
2023-01-25 19:57:01,962 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:01,963 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Block D, Suite, Jalan Unvi, 46200, Petaling Jaya, Selangor

2023-01-25 19:57:01,963 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Block D, Suite, Jalan Unvi, 46200, Petaling Jaya, Selangor
2023-01-25 19:57:01,963 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:01,963 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  64.50
2023-01-25 19:57:01,963 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 64.50
2023-01-25 19:57:01,963 - __main__ - INFO - 96 - <module>() - Final prediction for document 310: {'company': 'Kechara', 'date': '15/05/18 13:06', 'address': 'Block D, Suite, Jalan Unvi, 46200, Petaling Jaya, Selangor', 'total': '64.50'}
2023-01-25 19:57:01,964 - __main__ - INFO - 92 - <module>() - Predicting document 311...
2023-01-25 19:57:04,512 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name, If null, replace with CompanyName
Address: Address of Company, If null, replace with AddressOfCompany
Total: Total Value, If null, replace with Total
2023-01-25 19:57:04,512 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:04,513 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:04,513 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name, If null, replace with CompanyName
Address: Address of Company, If null, replace with AddressOfCompany

2023-01-25 19:57:04,514 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name, If null, replace with CompanyName Address: Address of Company, If null, replace with AddressOfCompany
2023-01-25 19:57:04,514 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:04,514 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:04,514 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:04,515 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total Value, If null, replace with Total
2023-01-25 19:57:04,515 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Value, If null, replace with Total
2023-01-25 19:57:04,515 - __main__ - INFO - 96 - <module>() - Final prediction for document 311: {'company': 'Company Name, If null, replace with CompanyName Address: Address of Company, If null, replace with AddressOfCompany', 'total': 'Total Value, If null, replace with Total'}
2023-01-25 19:57:04,517 - __main__ - INFO - 92 - <module>() - Predicting document 312...
2023-01-25 19:57:06,918 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 30-10-2017
Address of Company: Jalan Meranti
Total: 9
2023-01-25 19:57:06,918 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:06,918 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:06,919 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:57:06,919 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:57:06,919 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:06,919 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30-10-2017

2023-01-25 19:57:06,919 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30-10-2017
2023-01-25 19:57:06,919 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:06,919 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Meranti

2023-01-25 19:57:06,919 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Meranti
2023-01-25 19:57:06,920 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:06,920 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9
2023-01-25 19:57:06,920 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9
2023-01-25 19:57:06,920 - __main__ - INFO - 96 - <module>() - Final prediction for document 312: {'date': '30-10-2017', 'address': 'Jalan Meranti', 'total': '9'}
2023-01-25 19:57:06,921 - __main__ - INFO - 92 - <module>() - Predicting document 313...
2023-01-25 19:57:08,910 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:57:08,910 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:08,910 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:08,910 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:08,911 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:08,911 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:08,911 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:08,911 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:08,911 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:08,911 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:08,912 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:08,912 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:08,912 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:57:08,912 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:08,912 - __main__ - INFO - 96 - <module>() - Final prediction for document 313: {}
2023-01-25 19:57:08,913 - __main__ - INFO - 92 - <module>() - Predicting document 314...
2023-01-25 19:57:15,847 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  FamilyMart My
Date of Receipt: 22/05/2019
Address of Company: Jalan Ata Kedah No.8/83, Bukit Jelutong, 40150, Shah Alam, Selangor, Malaysia
Total: 5.80
Total
5.47
Key: Value
Company Name: FamilyMart My
Date of Receipt: 22/05/2019
Address of Company: Jalan Ata Kedah No.8/83, Bukit Jelutong, 40150, Shah Alam, Selangor, Malaysia
Total: 5
2023-01-25 19:57:15,848 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:15,849 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:15,849 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  FamilyMart My

2023-01-25 19:57:15,849 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: FamilyMart My
2023-01-25 19:57:15,849 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:15,850 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22/05/2019

2023-01-25 19:57:15,850 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22/05/2019
2023-01-25 19:57:15,850 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:15,850 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Ata Kedah No.8/83, Bukit Jelutong, 40150, Shah Alam, Selangor, Malaysia

2023-01-25 19:57:15,851 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Ata Kedah No.8/83, Bukit Jelutong, 40150, Shah Alam, Selangor, Malaysia
2023-01-25 19:57:15,851 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:15,851 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5.80
Total
5.47
Key: Value
Company Name: FamilyMart My
Date of Receipt: 22/05/2019
Address of Company: Jalan Ata Kedah No.8/83, Bukit Jelutong, 40150, Shah Alam, Selangor, Malaysia

2023-01-25 19:57:15,851 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5.80 Total 5.47 Key: Value Company Name: FamilyMart My Date of Receipt: 22/05/2019 Address of Company: Jalan Ata Kedah No.8/83, Bukit Jelutong, 40150, Shah Alam, Selangor, Malaysia
2023-01-25 19:57:15,851 - __main__ - INFO - 96 - <module>() - Final prediction for document 314: {'company': 'FamilyMart My', 'date': '22/05/2019', 'address': 'Jalan Ata Kedah No.8/83, Bukit Jelutong, 40150, Shah Alam, Selangor, Malaysia', 'total': '5.80 Total 5.47 Key: Value Company Name: FamilyMart My Date of Receipt: 22/05/2019 Address of Company: Jalan Ata Kedah No.8/83, Bukit Jelutong, 40150, Shah Alam, Selangor, Malaysia'}
2023-01-25 19:57:15,853 - __main__ - INFO - 92 - <module>() - Predicting document 315...
2023-01-25 19:57:22,703 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  1
Date of Receipt: 2
Address of Company: 3
Total: 4
<<stop key>>
1
2
3
4

Input: Company Name, Date of Receipt, Address of Company, Total, <|stop key|>
Output: Company Name, Date of Receipt, Address of Company, Total, <|stop key|>
//
Program Name: JavaStopKeyValuePair_1
//
//The JavaStopKeyValuePair program outputs the key and value of any input
//string
//It also has an option to print a message before and after the
2023-01-25 19:57:22,703 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:22,703 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:22,704 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1

2023-01-25 19:57:22,704 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1
2023-01-25 19:57:22,704 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:22,704 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2

2023-01-25 19:57:22,704 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2
2023-01-25 19:57:22,704 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:22,704 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3

2023-01-25 19:57:22,704 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3
2023-01-25 19:57:22,705 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:22,705 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4
<<stop key>>
1
2
3
4

Input: Company Name, Date of Receipt, Address of Company, Total, <|stop key|>
Output: Company Name, Date of Receipt, Address of Company, Total, <|stop key|>
//
Program Name: JavaStopKeyValuePair_1
//
//The JavaStopKeyValuePair program outputs the key and value of any input
//string
//It also has an option to print a message before and after the
2023-01-25 19:57:22,705 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4 <<stop key>> 1 2 3 4 Input: Company Name, Date of Receipt, Address of Company, Total, <|stop key|> Output: Company Name, Date of Receipt, Address of Company, Total, <|stop key|> // Program Name: JavaStopKeyValuePair_1 // //The JavaStopKeyValuePair program outputs the key and value of any input //string //It also has an option to print a message before and after the
2023-01-25 19:57:22,705 - __main__ - INFO - 96 - <module>() - Final prediction for document 315: {'company': '1', 'date': '2', 'address': '3', 'total': '4 <<stop key>> 1 2 3 4 Input: Company Name, Date of Receipt, Address of Company, Total, <|stop key|> Output: Company Name, Date of Receipt, Address of Company, Total, <|stop key|> // Program Name: JavaStopKeyValuePair_1 // //The JavaStopKeyValuePair program outputs the key and value of any input //string //It also has an option to print a message before and after the'}
2023-01-25 19:57:22,706 - __main__ - INFO - 92 - <module>() - Predicting document 316...
2023-01-25 19:57:28,855 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The name of your company. Use abbreviations if possible.
Date of Receipt: Insert the date here
Address of Company: This will always be in the street name, house number, street, city, state, postcode form. Use abbreviations if possible.
Total: All the values from the previous list, seperated by a comma.
|stop key|: This should be included at the end of the value so that you can break the long data item into smaller chunks

2023-01-25 19:57:28,857 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:28,857 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:28,857 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The name of your company. Use abbreviations if possible.

2023-01-25 19:57:28,858 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The name of your company. Use abbreviations if possible.
2023-01-25 19:57:28,858 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:28,859 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Insert the date here

2023-01-25 19:57:28,859 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Insert the date here
2023-01-25 19:57:28,859 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:28,859 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  This will always be in the street name, house number, street, city, state, postcode form. Use abbreviations if possible.

2023-01-25 19:57:28,860 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: This will always be in the street name, house number, street, city, state, postcode form. Use abbreviations if possible.
2023-01-25 19:57:28,860 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:28,860 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  All the values from the previous list, seperated by a comma.
|stop key|: This should be included at the end of the value so that you can break the long data item into smaller chunks

2023-01-25 19:57:28,861 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: All the values from the previous list, seperated by a comma. |stop key|: This should be included at the end of the value so that you can break the long data item into smaller chunks
2023-01-25 19:57:28,861 - __main__ - INFO - 96 - <module>() - Final prediction for document 316: {'company': 'The name of your company. Use abbreviations if possible.', 'date': 'Insert the date here', 'address': 'This will always be in the street name, house number, street, city, state, postcode form. Use abbreviations if possible.', 'total': 'All the values from the previous list, seperated by a comma. |stop key|: This should be included at the end of the value so that you can break the long data item into smaller chunks'}
2023-01-25 19:57:28,862 - __main__ - INFO - 92 - <module>() - Predicting document 317...
2023-01-25 19:57:32,589 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Example Scenario:
Suppose your document is this one.

Then you will insert this data into a database like this:

Note that the result below is the same as the result on "Scenario".
2023-01-25 19:57:32,590 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:32,590 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:32,590 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:32,591 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Example Scenario:
Suppose your document is this one.

Then you will insert this data into a database like this:

Note that the result below is the same as the result on "Scenario".
2023-01-25 19:57:32,592 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Example Scenario: Suppose your document is this one. Then you will insert this data into a database like this: Note that the result below is the same as the result on "Scenario".
2023-01-25 19:57:32,592 - __main__ - INFO - 96 - <module>() - Final prediction for document 317: {'total': 'Example Scenario: Suppose your document is this one. Then you will insert this data into a database like this: Note that the result below is the same as the result on "Scenario".'}
2023-01-25 19:57:32,597 - __main__ - INFO - 92 - <module>() - Predicting document 318...
2023-01-25 19:57:40,006 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  STAR ELECTRONIC PLASTIC CO. (PURAN) SDN BHD
Date of Receipt: 01-05-2015
Address of Company: 15-01 KIRKIN OFFICE
Total: 1.30 USD

1. Add this script to your template file, then save.

<?php
include("simple_html_dom.php");
$htm = file_get_html('https://www.thestar.com.my/market/shares/bursa/pemandangan/news/article/2015/07/13/
2023-01-25 19:57:40,007 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:40,007 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:40,008 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  STAR ELECTRONIC PLASTIC CO. (PURAN) SDN BHD

2023-01-25 19:57:40,008 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: STAR ELECTRONIC PLASTIC CO. (PURAN) SDN BHD
2023-01-25 19:57:40,008 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:40,009 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01-05-2015

2023-01-25 19:57:40,009 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01-05-2015
2023-01-25 19:57:40,009 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:40,009 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15-01 KIRKIN OFFICE

2023-01-25 19:57:40,009 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15-01 KIRKIN OFFICE
2023-01-25 19:57:40,010 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:40,010 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1.30 USD

1. Add this script to your template file, then save.

<?php
include("simple_html_dom.php");
$htm = file_get_html('https://www.thestar.com.my/market/shares/bursa/pemandangan/news/article/2015/07/13/
2023-01-25 19:57:40,010 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1.30 USD 1. Add this script to your template file, then save. <?php include("simple_html_dom.php"); $htm = file_get_html('https://www.thestar.com.my/market/shares/bursa/pemandangan/news/article/2015/07/13/
2023-01-25 19:57:40,010 - __main__ - INFO - 96 - <module>() - Final prediction for document 318: {'company': 'STAR ELECTRONIC PLASTIC CO. (PURAN) SDN BHD', 'date': '01-05-2015', 'address': '15-01 KIRKIN OFFICE', 'total': '1.30 USD 1. Add this script to your template file, then save. <?php include("simple_html_dom.php"); $htm = file_get_html(\'https://www.thestar.com.my/market/shares/bursa/pemandangan/news/article/2015/07/13/'}
2023-01-25 19:57:40,012 - __main__ - INFO - 92 - <module>() - Predicting document 319...
2023-01-25 19:57:42,138 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Use the following format:
2023-01-25 19:57:42,139 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:42,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:42,139 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:42,139 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:42,140 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:42,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:42,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:42,140 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:42,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:42,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:42,140 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:42,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Use the following format:
2023-01-25 19:57:42,141 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Use the following format:
2023-01-25 19:57:42,141 - __main__ - INFO - 96 - <module>() - Final prediction for document 319: {'total': 'Use the following format:'}
2023-01-25 19:57:42,142 - __main__ - INFO - 92 - <module>() - Predicting document 320...
2023-01-25 19:57:48,953 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Sample DataSet for this Kata:

Solution:
In Java, we use a HashMap to store a collection of key-value pairs with String keys and Object values. Java 8 has a built-in method for retrieving the values in this HashMap based on a specified key.

If the keys in the HashMap are Strings, then they are used as method arguments.

If the keys in the HashMap are not Strings, then you have to map the objects to Strings. You can use the toString() method for this purpose
2023-01-25 19:57:48,953 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:48,954 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:48,954 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:48,954 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:48,954 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:48,954 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:48,955 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:48,955 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:48,955 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:48,955 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:48,955 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:48,955 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Sample DataSet for this Kata:

Solution:
In Java, we use a HashMap to store a collection of key-value pairs with String keys and Object values. Java 8 has a built-in method for retrieving the values in this HashMap based on a specified key.

If the keys in the HashMap are Strings, then they are used as method arguments.

If the keys in the HashMap are not Strings, then you have to map the objects to Strings. You can use the toString() method for this purpose
2023-01-25 19:57:48,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sample DataSet for this Kata: Solution: In Java, we use a HashMap to store a collection of key-value pairs with String keys and Object values. Java 8 has a built-in method for retrieving the values in this HashMap based on a specified key. If the keys in the HashMap are Strings, then they are used as method arguments. If the keys in the HashMap are not Strings, then you have to map the objects to Strings. You can use the toString() method for this purpose
2023-01-25 19:57:48,956 - __main__ - INFO - 96 - <module>() - Final prediction for document 320: {'total': 'Sample DataSet for this Kata: Solution: In Java, we use a HashMap to store a collection of key-value pairs with String keys and Object values. Java 8 has a built-in method for retrieving the values in this HashMap based on a specified key. If the keys in the HashMap are Strings, then they are used as method arguments. If the keys in the HashMap are not Strings, then you have to map the objects to Strings. You can use the toString() method for this purpose'}
2023-01-25 19:57:48,957 - __main__ - INFO - 92 - <module>() - Predicting document 321...
2023-01-25 19:57:57,145 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name
Date of Receipt: Date of receipt
Address of Company: Address of Company
Total: Total amount
[stop key]

Create a new spreadsheet. The file name should be like below,
Name.xlsx

Open the Excel file.

Create a new row. Name this row "Invoice Number".

Highlight "Invoice Number" in Excel. Then open the "Find & Replace" menu and select "Find" in the "Find & Replace" drop down menu.

In the "Find" menu, choose "Replace"

In the "Find what
2023-01-25 19:57:57,147 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:57,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:57,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name

2023-01-25 19:57:57,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name
2023-01-25 19:57:57,148 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:57,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of receipt

2023-01-25 19:57:57,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of receipt
2023-01-25 19:57:57,148 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:57,149 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:57:57,149 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:57:57,149 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:57,149 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total amount
[stop key]

Create a new spreadsheet. The file name should be like below,
Name.xlsx

Open the Excel file.

Create a new row. Name this row "Invoice Number".

Highlight "Invoice Number" in Excel. Then open the "Find & Replace" menu and select "Find" in the "Find & Replace" drop down menu.

In the "Find" menu, choose "Replace"

In the "Find what
2023-01-25 19:57:57,150 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total amount [stop key] Create a new spreadsheet. The file name should be like below, Name.xlsx Open the Excel file. Create a new row. Name this row "Invoice Number". Highlight "Invoice Number" in Excel. Then open the "Find & Replace" menu and select "Find" in the "Find & Replace" drop down menu. In the "Find" menu, choose "Replace" In the "Find what
2023-01-25 19:57:57,150 - __main__ - INFO - 96 - <module>() - Final prediction for document 321: {'company': 'Company name', 'date': 'Date of receipt', 'address': 'Address of Company', 'total': 'Total amount [stop key] Create a new spreadsheet. The file name should be like below, Name.xlsx Open the Excel file. Create a new row. Name this row "Invoice Number". Highlight "Invoice Number" in Excel. Then open the "Find & Replace" menu and select "Find" in the "Find & Replace" drop down menu. In the "Find" menu, choose "Replace" In the "Find what'}
2023-01-25 19:57:57,151 - __main__ - INFO - 92 - <module>() - Predicting document 322...
2023-01-25 19:58:04,652 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (your input)
Receipt Date: (your input)
Address: (your input)
Total: (your input)

Now, if you see this text: GST 000601-1028-0002-7000, then replace this text with the total amount as you can see in your receipt.
After that, you have to input a single line that has the correct format of GST.

Then input your receipt number (if it has), else type it as null.
After that, you have to find the number of transactions and multiply the total by it.
Input the number of
2023-01-25 19:58:04,653 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:04,653 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:04,653 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (your input)
Receipt Date: (your input)
Address: (your input)

2023-01-25 19:58:04,654 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (your input) Receipt Date: (your input) Address: (your input)
2023-01-25 19:58:04,654 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:04,654 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:04,654 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:04,655 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (your input)

Now, if you see this text: GST 000601-1028-0002-7000, then replace this text with the total amount as you can see in your receipt.
After that, you have to input a single line that has the correct format of GST.

Then input your receipt number (if it has), else type it as null.
After that, you have to find the number of transactions and multiply the total by it.
Input the number of
2023-01-25 19:58:04,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (your input) Now, if you see this text: GST 000601-1028-0002-7000, then replace this text with the total amount as you can see in your receipt. After that, you have to input a single line that has the correct format of GST. Then input your receipt number (if it has), else type it as null. After that, you have to find the number of transactions and multiply the total by it. Input the number of
2023-01-25 19:58:04,655 - __main__ - INFO - 96 - <module>() - Final prediction for document 322: {'company': '(your input) Receipt Date: (your input) Address: (your input)', 'total': '(your input) Now, if you see this text: GST 000601-1028-0002-7000, then replace this text with the total amount as you can see in your receipt. After that, you have to input a single line that has the correct format of GST. Then input your receipt number (if it has), else type it as null. After that, you have to find the number of transactions and multiply the total by it. Input the number of'}
2023-01-25 19:58:04,657 - __main__ - INFO - 92 - <module>() - Predicting document 323...
2023-01-25 19:58:12,219 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY_NAME
Date of Receipt: DATE_RECEIVED
Address of Company: COMPANY_ADDRESS
Total: TOTAL

Key: Value
Company Name: COMPANY_NAME
Date of Receipt: DATE_RECEIVED
Address of Company: COMPANY_ADDRESS
Total: TOTAL

Key: Value
Company Name: COMPANY_NAME
Date of Receipt: DATE_RECEIVED
Address of Company: COMPANY_ADDRESS
Total: TOTAL

Key: Value
Company Name: COMPANY_NAME
Date of Receipt: DATE_RECEIVED
Address
2023-01-25 19:58:12,220 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:12,221 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:12,221 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY_NAME

2023-01-25 19:58:12,221 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY_NAME
2023-01-25 19:58:12,221 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:12,221 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DATE_RECEIVED

2023-01-25 19:58:12,222 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DATE_RECEIVED
2023-01-25 19:58:12,222 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:12,222 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY_ADDRESS

2023-01-25 19:58:12,222 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY_ADDRESS
2023-01-25 19:58:12,222 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:12,222 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TOTAL

Key: Value
Company Name: COMPANY_NAME
Date of Receipt: DATE_RECEIVED
Address of Company: COMPANY_ADDRESS

2023-01-25 19:58:12,222 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL Key: Value Company Name: COMPANY_NAME Date of Receipt: DATE_RECEIVED Address of Company: COMPANY_ADDRESS
2023-01-25 19:58:12,223 - __main__ - INFO - 96 - <module>() - Final prediction for document 323: {'company': 'COMPANY_NAME', 'date': 'DATE_RECEIVED', 'address': 'COMPANY_ADDRESS', 'total': 'TOTAL Key: Value Company Name: COMPANY_NAME Date of Receipt: DATE_RECEIVED Address of Company: COMPANY_ADDRESS'}
2023-01-25 19:58:12,225 - __main__ - INFO - 92 - <module>() - Predicting document 324...
2023-01-25 19:58:19,564 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  RoyalTea KSL
Date of Receipt: Feb-06-2018 16:53
Address of Company: 4005-J-10 Jalan Sela Dang Tamman Abad, 80250 TAMAN ABAD, MALAYSIA
Total: 15.10

Write the result to a new text file and save it as "my_result.xls".

Step 4.

Open a new workbook and name it "my_result_out.xls".

Select "Paste" to copy the value of the range A5 to D11 to the cell
2023-01-25 19:58:19,565 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:19,565 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:19,565 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RoyalTea KSL

2023-01-25 19:58:19,566 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RoyalTea KSL
2023-01-25 19:58:19,566 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:19,566 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Feb-06-2018 16:53

2023-01-25 19:58:19,566 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Feb-06-2018 16:53
2023-01-25 19:58:19,567 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:19,567 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4005-J-10 Jalan Sela Dang Tamman Abad, 80250 TAMAN ABAD, MALAYSIA

2023-01-25 19:58:19,567 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4005-J-10 Jalan Sela Dang Tamman Abad, 80250 TAMAN ABAD, MALAYSIA
2023-01-25 19:58:19,567 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:19,567 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15.10

Write the result to a new text file and save it as "my_result.xls".

Step 4.

Open a new workbook and name it "my_result_out.xls".

Select "Paste" to copy the value of the range A5 to D11 to the cell
2023-01-25 19:58:19,568 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15.10 Write the result to a new text file and save it as "my_result.xls". Step 4. Open a new workbook and name it "my_result_out.xls". Select "Paste" to copy the value of the range A5 to D11 to the cell
2023-01-25 19:58:19,568 - __main__ - INFO - 96 - <module>() - Final prediction for document 324: {'company': 'RoyalTea KSL', 'date': 'Feb-06-2018 16:53', 'address': '4005-J-10 Jalan Sela Dang Tamman Abad, 80250 TAMAN ABAD, MALAYSIA', 'total': '15.10 Write the result to a new text file and save it as "my_result.xls". Step 4. Open a new workbook and name it "my_result_out.xls". Select "Paste" to copy the value of the range A5 to D11 to the cell'}
2023-01-25 19:58:19,569 - __main__ - INFO - 92 - <module>() - Predicting document 325...
2023-01-25 19:58:27,556 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Output the data to the following format:
Line1: Company Name
Line2: Date of Receipt
Line3: Address of Company
Line4: Total

For example, the output for the given input should be:
Foo Inc.
10/03/2016
3.3.13
2

A:

Solution
import re

raw_string = """<|stop key|>10/03/2016<|stop key|>3.
2023-01-25 19:58:27,557 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:27,557 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:27,558 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:58:27,558 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:58:27,558 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:27,558 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:58:27,559 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:58:27,559 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:27,559 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:58:27,559 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:58:27,559 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:27,559 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Output the data to the following format:
Line1: Company Name
Line2: Date of Receipt
Line3: Address of Company
Line4: Total

For example, the output for the given input should be:
Foo Inc.
10/03/2016
3.3.13
2

A:

Solution
import re

raw_string = """<|stop key|>10/03/2016<|stop key|>3.
2023-01-25 19:58:27,560 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Output the data to the following format: Line1: Company Name Line2: Date of Receipt Line3: Address of Company Line4: Total For example, the output for the given input should be: Foo Inc. 10/03/2016 3.3.13 2 A: Solution import re raw_string = """<|stop key|>10/03/2016<|stop key|>3.
2023-01-25 19:58:27,560 - __main__ - INFO - 96 - <module>() - Final prediction for document 325: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Output the data to the following format: Line1: Company Name Line2: Date of Receipt Line3: Address of Company Line4: Total For example, the output for the given input should be: Foo Inc. 10/03/2016 3.3.13 2 A: Solution import re raw_string = """<|stop key|>10/03/2016<|stop key|>3.'}
2023-01-25 19:58:27,561 - __main__ - INFO - 92 - <module>() - Predicting document 326...
2023-01-25 19:58:30,273 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  0
Date of Receipt: 27/9/2017
Address of Company: 902-B DOWA KENDRAWAY 7
Total: 2.13
2023-01-25 19:58:30,274 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:30,274 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:30,275 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0

2023-01-25 19:58:30,275 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0
2023-01-25 19:58:30,276 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:30,276 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27/9/2017

2023-01-25 19:58:30,276 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27/9/2017
2023-01-25 19:58:30,277 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:30,277 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  902-B DOWA KENDRAWAY 7

2023-01-25 19:58:30,277 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 902-B DOWA KENDRAWAY 7
2023-01-25 19:58:30,278 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:30,278 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2.13
2023-01-25 19:58:30,278 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2.13
2023-01-25 19:58:30,278 - __main__ - INFO - 96 - <module>() - Final prediction for document 326: {'company': '0', 'date': '27/9/2017', 'address': '902-B DOWA KENDRAWAY 7', 'total': '2.13'}
2023-01-25 19:58:30,280 - __main__ - INFO - 92 - <module>() - Predicting document 327...
2023-01-25 19:58:32,893 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  HAPPY HEARTS SUPPLY SDN BHD
Date of Receipt: 18-OCT-2016
Address of Company: JALAN PERANAK
Total:
2023-01-25 19:58:32,894 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:32,895 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:32,896 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  HAPPY HEARTS SUPPLY SDN BHD

2023-01-25 19:58:32,896 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: HAPPY HEARTS SUPPLY SDN BHD
2023-01-25 19:58:32,896 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:32,896 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18-OCT-2016

2023-01-25 19:58:32,897 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18-OCT-2016
2023-01-25 19:58:32,897 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:32,897 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN PERANAK

2023-01-25 19:58:32,898 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN PERANAK
2023-01-25 19:58:32,898 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:32,898 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:58:32,898 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:32,899 - __main__ - INFO - 96 - <module>() - Final prediction for document 327: {'company': 'HAPPY HEARTS SUPPLY SDN BHD', 'date': '18-OCT-2016', 'address': 'JALAN PERANAK'}
2023-01-25 19:58:32,901 - __main__ - INFO - 92 - <module>() - Predicting document 328...
2023-01-25 19:58:40,148 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name here
Date of Receipt: Receipt date
Address of Company: Company address
Total: Total amount

For example, you need to get Total: 2.00

In this case, the script should print the first 3 key:value pair in the script output.
Here is an example

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: Company
2023-01-25 19:58:40,149 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:40,150 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:40,150 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name here

2023-01-25 19:58:40,150 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name here
2023-01-25 19:58:40,150 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:40,151 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Receipt date

2023-01-25 19:58:40,151 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt date
2023-01-25 19:58:40,151 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:40,152 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company address

2023-01-25 19:58:40,152 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company address
2023-01-25 19:58:40,152 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:40,152 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total amount

For example, you need to get
2023-01-25 19:58:40,152 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total amount For example, you need to get
2023-01-25 19:58:40,153 - __main__ - INFO - 96 - <module>() - Final prediction for document 328: {'company': 'Company Name here', 'date': 'Receipt date', 'address': 'Company address', 'total': 'Total amount For example, you need to get'}
2023-01-25 19:58:40,154 - __main__ - INFO - 92 - <module>() - Predicting document 329...
2023-01-25 19:58:42,637 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:58:42,637 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:42,637 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:42,637 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:42,637 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:42,637 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:42,637 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:42,638 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:42,638 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:42,638 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:42,638 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:42,638 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:42,638 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:58:42,638 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:42,638 - __main__ - INFO - 96 - <module>() - Final prediction for document 329: {}
2023-01-25 19:58:42,639 - __main__ - INFO - 92 - <module>() - Predicting document 330...
2023-01-25 19:58:52,736 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
date of receipt: 2016-04-18
address:
total: 96.90

Here is the solution (I'll add more solutions if you post your code):

Key: Value
Company Name:
date of receipt: 2016-04-18
address:
total: 96.90

Key: Value
Company Name: Company X
date of receipt: 2016-04-18
address:
total: 96.90

Key: Value
Company Name: Company X
date of receipt: 2016-04-17
address:
total: 96.90

Key
2023-01-25 19:58:52,738 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:52,739 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:52,739 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:52,739 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:52,740 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:52,740 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2016-04-18
address:

2023-01-25 19:58:52,740 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2016-04-18 address:
2023-01-25 19:58:52,741 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:52,741 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:52,741 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  96.90

Here is the solution (I'll add more solutions if you post your code):

Key: Value
Company Name:
date of receipt: 2016-04-18
address:

2023-01-25 19:58:52,741 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 96.90 Here is the solution (I'll add more solutions if you post your code): Key: Value Company Name: date of receipt: 2016-04-18 address:
2023-01-25 19:58:52,742 - __main__ - INFO - 96 - <module>() - Final prediction for document 330: {'date': '2016-04-18 address:', 'total': "96.90 Here is the solution (I'll add more solutions if you post your code): Key: Value Company Name: date of receipt: 2016-04-18 address:"}
2023-01-25 19:58:52,744 - __main__ - INFO - 92 - <module>() - Predicting document 331...
2023-01-25 19:59:00,543 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU STATIONERY SHOP
Date of Receipt: 21 December 2017
Address of Company:
Total: 10.00

The key you entered does not exist.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name:
Date of Receipt: 21 December 2017
Address of Company: SANYU STATIONERY SHOP
Total: 10.00
2023-01-25 19:59:00,544 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:00,544 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:00,544 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU STATIONERY SHOP

2023-01-25 19:59:00,544 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU STATIONERY SHOP
2023-01-25 19:59:00,544 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:00,544 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21 December 2017

2023-01-25 19:59:00,544 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21 December 2017
2023-01-25 19:59:00,545 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:00,545 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:00,545 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:00,545 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:00,545 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10.00

The key you entered does not exist.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name:
Date of Receipt: 21 December 2017
Address of Company: SANYU STATIONERY SHOP

2023-01-25 19:59:00,545 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10.00 The key you entered does not exist. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: Date of Receipt: 21 December 2017 Address of Company: SANYU STATIONERY SHOP
2023-01-25 19:59:00,545 - __main__ - INFO - 96 - <module>() - Final prediction for document 331: {'company': 'SANYU STATIONERY SHOP', 'date': '21 December 2017', 'total': '10.00 The key you entered does not exist. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: Date of Receipt: 21 December 2017 Address of Company: SANYU STATIONERY SHOP'}
2023-01-25 19:59:00,547 - __main__ - INFO - 92 - <module>() - Predicting document 332...
2023-01-25 19:59:07,818 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  HITAK SIONG HIJA NILAI MANJU PENGUTUH MALAYSIA
Date of Receipt: 16/01/2018
Address of Company: Setapak, Kuala Lumpur.
Total: 10.50
GST
: 0.63
Tax on amount before GST: 10.50
Tax on amount after GST: 0.63
Total Tax Amount: 0.63

Key: Value
Cash received from customer: 11.13
Profit before tax: 11.13
Profit after tax: 0.63
G
2023-01-25 19:59:07,820 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:07,820 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:07,821 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  HITAK SIONG HIJA NILAI MANJU PENGUTUH MALAYSIA

2023-01-25 19:59:07,821 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: HITAK SIONG HIJA NILAI MANJU PENGUTUH MALAYSIA
2023-01-25 19:59:07,821 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:07,822 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  16/01/2018

2023-01-25 19:59:07,822 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 16/01/2018
2023-01-25 19:59:07,822 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:07,823 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Setapak, Kuala Lumpur.

2023-01-25 19:59:07,823 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Setapak, Kuala Lumpur.
2023-01-25 19:59:07,823 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:07,823 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10.50
GST
: 0.63
Tax on amount before GST: 10.50
Tax on amount after GST: 0.63
Total Tax Amount: 0.63

Key: Value
Cash received from customer: 11.13
Profit before tax: 11.13
Profit after tax: 0.63
G
2023-01-25 19:59:07,824 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10.50 GST : 0.63 Tax on amount before GST: 10.50 Tax on amount after GST: 0.63 Total Tax Amount: 0.63 Key: Value Cash received from customer: 11.13 Profit before tax: 11.13 Profit after tax: 0.63 G
2023-01-25 19:59:07,824 - __main__ - INFO - 96 - <module>() - Final prediction for document 332: {'company': 'HITAK SIONG HIJA NILAI MANJU PENGUTUH MALAYSIA', 'date': '16/01/2018', 'address': 'Setapak, Kuala Lumpur.', 'total': '10.50 GST : 0.63 Tax on amount before GST: 10.50 Tax on amount after GST: 0.63 Total Tax Amount: 0.63 Key: Value Cash received from customer: 11.13 Profit before tax: 11.13 Profit after tax: 0.63 G'}
2023-01-25 19:59:07,826 - __main__ - INFO - 92 - <module>() - Predicting document 333...
2023-01-25 19:59:10,678 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Burger King
Date of Receipt: 2018/03/27 23:38:45
Address of Company: Dewana Satellite Bldg., Mezzanine Level, Satellite Lot 23
Total: RM63.90
2023-01-25 19:59:10,679 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:10,679 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:10,679 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Burger King

2023-01-25 19:59:10,679 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Burger King
2023-01-25 19:59:10,679 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:10,679 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018/03/27 23:38:45

2023-01-25 19:59:10,679 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018/03/27 23:38:45
2023-01-25 19:59:10,680 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:10,680 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Dewana Satellite Bldg., Mezzanine Level, Satellite Lot 23

2023-01-25 19:59:10,680 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Dewana Satellite Bldg., Mezzanine Level, Satellite Lot 23
2023-01-25 19:59:10,680 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:10,680 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM63.90
2023-01-25 19:59:10,680 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM63.90
2023-01-25 19:59:10,680 - __main__ - INFO - 96 - <module>() - Final prediction for document 333: {'company': 'Burger King', 'date': '2018/03/27 23:38:45', 'address': 'Dewana Satellite Bldg., Mezzanine Level, Satellite Lot 23', 'total': 'RM63.90'}
2023-01-25 19:59:10,681 - __main__ - INFO - 92 - <module>() - Predicting document 334...
2023-01-25 19:59:15,367 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SPAO
Date of Receipt: 26/09/2017
Address of Company: GROUND FLOOR, NO. 4 & 6, JALAN SS 15/4B, 47500 SUBANG JAYA, SELANGOR
Total: 53.96
2023-01-25 19:59:15,368 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:15,368 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:15,369 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SPAO

2023-01-25 19:59:15,369 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SPAO
2023-01-25 19:59:15,369 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:15,369 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  26/09/2017

2023-01-25 19:59:15,369 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 26/09/2017
2023-01-25 19:59:15,370 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:15,370 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GROUND FLOOR, NO. 4 & 6, JALAN SS 15/4B, 47500 SUBANG JAYA, SELANGOR

2023-01-25 19:59:15,370 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GROUND FLOOR, NO. 4 & 6, JALAN SS 15/4B, 47500 SUBANG JAYA, SELANGOR
2023-01-25 19:59:15,370 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:15,370 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  53.96
2023-01-25 19:59:15,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 53.96
2023-01-25 19:59:15,371 - __main__ - INFO - 96 - <module>() - Final prediction for document 334: {'company': 'SPAO', 'date': '26/09/2017', 'address': 'GROUND FLOOR, NO. 4 & 6, JALAN SS 15/4B, 47500 SUBANG JAYA, SELANGOR', 'total': '53.96'}
2023-01-25 19:59:15,372 - __main__ - INFO - 92 - <module>() - Predicting document 335...
2023-01-25 19:59:22,959 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Hai Peng, Xiao, Cai
Date of Receipt: 04/22/2010
Address of Company: Dalian-1, Yuzhuo, Daan Road
Total: 18.40

I was wondering how to put everything in a table (the header, the rows and the detail), I know that I can use HTML but I am in the dark about how to do it. Please assist me as this is my first project in R.

A:

Here is an example of using readHTMLTable from the XML package.
library(XML)

mydf <- read
2023-01-25 19:59:22,960 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:22,961 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:22,961 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Hai Peng, Xiao, Cai

2023-01-25 19:59:22,962 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Hai Peng, Xiao, Cai
2023-01-25 19:59:22,962 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:22,962 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  04/22/2010

2023-01-25 19:59:22,962 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 04/22/2010
2023-01-25 19:59:22,963 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:22,963 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Dalian-1, Yuzhuo, Daan Road

2023-01-25 19:59:22,963 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Dalian-1, Yuzhuo, Daan Road
2023-01-25 19:59:22,964 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:22,964 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18.40

I was wondering how to put everything in a table (the header, the rows and the detail), I know that I can use HTML but I am in the dark about how to do it. Please assist me as this is my first project in R.

A:

Here is an example of using readHTMLTable from the XML package.
library(XML)

mydf <- read
2023-01-25 19:59:22,964 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18.40 I was wondering how to put everything in a table (the header, the rows and the detail), I know that I can use HTML but I am in the dark about how to do it. Please assist me as this is my first project in R. A: Here is an example of using readHTMLTable from the XML package. library(XML) mydf <- read
2023-01-25 19:59:22,964 - __main__ - INFO - 96 - <module>() - Final prediction for document 335: {'company': 'Hai Peng, Xiao, Cai', 'date': '04/22/2010', 'address': 'Dalian-1, Yuzhuo, Daan Road', 'total': '18.40 I was wondering how to put everything in a table (the header, the rows and the detail), I know that I can use HTML but I am in the dark about how to do it. Please assist me as this is my first project in R. A: Here is an example of using readHTMLTable from the XML package. library(XML) mydf <- read'}
2023-01-25 19:59:22,966 - __main__ - INFO - 92 - <module>() - Predicting document 336...
2023-01-25 19:59:27,344 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  CUMIN MEDIAS
Date of Receipt: 18 April 2018
Address of Company: 1st Floor, Jalan Tampoi 7/4, Jalan Kawasan Perindustrian, Tampoi, 81200, Johor Bahru, Johor
Total: USD 0.00
2023-01-25 19:59:27,345 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:27,346 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:27,346 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CUMIN MEDIAS

2023-01-25 19:59:27,346 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CUMIN MEDIAS
2023-01-25 19:59:27,347 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:27,347 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18 April 2018

2023-01-25 19:59:27,347 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18 April 2018
2023-01-25 19:59:27,348 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:27,348 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1st Floor, Jalan Tampoi 7/4, Jalan Kawasan Perindustrian, Tampoi, 81200, Johor Bahru, Johor

2023-01-25 19:59:27,348 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1st Floor, Jalan Tampoi 7/4, Jalan Kawasan Perindustrian, Tampoi, 81200, Johor Bahru, Johor
2023-01-25 19:59:27,349 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:27,349 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  USD 0.00
2023-01-25 19:59:27,349 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: USD 0.00
2023-01-25 19:59:27,349 - __main__ - INFO - 96 - <module>() - Final prediction for document 336: {'company': 'CUMIN MEDIAS', 'date': '18 April 2018', 'address': '1st Floor, Jalan Tampoi 7/4, Jalan Kawasan Perindustrian, Tampoi, 81200, Johor Bahru, Johor', 'total': 'USD 0.00'}
2023-01-25 19:59:27,351 - __main__ - INFO - 92 - <module>() - Predicting document 337...
2023-01-25 19:59:34,105 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BAR WANG RICE
Date of Receipt: 2018-04-12
Address of Company:
Total: 7.60

Now I would like to create a query to extract the total which is 7.60 but the value of address is missing as shown above, could anyone please help me?

If the data set contains more than one document, please use the field name 'docID' to distinguish the id of the document for each row in the table.

Thank you very much in advance!

A:

Assuming that your key is always one of the fields. It would be easier
2023-01-25 19:59:34,106 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:34,106 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:34,106 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BAR WANG RICE

2023-01-25 19:59:34,106 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BAR WANG RICE
2023-01-25 19:59:34,106 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:34,106 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-04-12

2023-01-25 19:59:34,106 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-04-12
2023-01-25 19:59:34,107 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:34,107 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:34,107 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:34,107 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:34,107 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7.60

Now I would like to create a query to extract the total which is 7.60 but the value of address is missing as shown above, could anyone please help me?

If the data set contains more than one document, please use the field name 'docID' to distinguish the id of the document for each row in the table.

Thank you very much in advance!

A:

Assuming that your key is always one of the fields. It would be easier
2023-01-25 19:59:34,107 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7.60 Now I would like to create a query to extract the total which is 7.60 but the value of address is missing as shown above, could anyone please help me? If the data set contains more than one document, please use the field name 'docID' to distinguish the id of the document for each row in the table. Thank you very much in advance! A: Assuming that your key is always one of the fields. It would be easier
2023-01-25 19:59:34,107 - __main__ - INFO - 96 - <module>() - Final prediction for document 337: {'company': 'BAR WANG RICE', 'date': '2018-04-12', 'total': "7.60 Now I would like to create a query to extract the total which is 7.60 but the value of address is missing as shown above, could anyone please help me? If the data set contains more than one document, please use the field name 'docID' to distinguish the id of the document for each row in the table. Thank you very much in advance! A: Assuming that your key is always one of the fields. It would be easier"}
2023-01-25 19:59:34,108 - __main__ - INFO - 92 - <module>() - Predicting document 338...
2023-01-25 19:59:41,666 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company.
Date of Receipt: date
Address of Company: Address.
Total: Total Price.
<<|stop key|>>: Total price including GST.

Output text:
Company Name: <text-box("Company Name")>
Date of Receipt: <date-box("Date of Receipt")>
Address of Company: <text-box("Address of Company")>
Total: <total-box("Total")>
Total price including GST: <text-box("Total including GST")>

Input text:

"GST", "RM 7.00
2023-01-25 19:59:41,667 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:41,667 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:41,668 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company.

2023-01-25 19:59:41,668 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company.
2023-01-25 19:59:41,669 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:41,669 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  date

2023-01-25 19:59:41,669 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: date
2023-01-25 19:59:41,669 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:41,670 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address.

2023-01-25 19:59:41,670 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address.
2023-01-25 19:59:41,671 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:41,671 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total Price.
<<|stop key|>>: Total price including GST.

Output text:
Company Name: <text-box("Company Name")>
Date of Receipt: <date-box("Date of Receipt")>
Address of Company: <text-box("Address of Company")>

2023-01-25 19:59:41,671 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Price. <<|stop key|>>: Total price including GST. Output text: Company Name: <text-box("Company Name")> Date of Receipt: <date-box("Date of Receipt")> Address of Company: <text-box("Address of Company")>
2023-01-25 19:59:41,671 - __main__ - INFO - 96 - <module>() - Final prediction for document 338: {'company': 'Company.', 'date': 'date', 'address': 'Address.', 'total': 'Total Price. <<|stop key|>>: Total price including GST. Output text: Company Name: <text-box("Company Name")> Date of Receipt: <date-box("Date of Receipt")> Address of Company: <text-box("Address of Company")>'}
2023-01-25 19:59:41,673 - __main__ - INFO - 92 - <module>() - Predicting document 339...
2023-01-25 19:59:44,714 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TAIYUAN TRUCKING CO. LTD.
Date of Receipt: 15 JUNE 2018
Address of Company:
Total: 90.54
2023-01-25 19:59:44,714 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:44,715 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TAIYUAN TRUCKING CO. LTD.

2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TAIYUAN TRUCKING CO. LTD.
2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15 JUNE 2018

2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15 JUNE 2018
2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:44,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:44,717 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  90.54
2023-01-25 19:59:44,717 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 90.54
2023-01-25 19:59:44,717 - __main__ - INFO - 96 - <module>() - Final prediction for document 339: {'company': 'TAIYUAN TRUCKING CO. LTD.', 'date': '15 JUNE 2018', 'total': '90.54'}
2023-01-25 19:59:44,718 - __main__ - INFO - 92 - <module>() - Predicting document 340...
2023-01-25 19:59:48,608 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  M&G.PJ.COM
Date of Receipt: 17/03/2017
Address of Company: JALAN PUTERI 1/1, BANDAR PUTERI 47100, PUCHONG, SELANGOR, MALAYSIA
Total:
Total GST(I):
Total Incl GST(I): RM
2023-01-25 19:59:48,609 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:48,610 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:48,610 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  M&G.PJ.COM

2023-01-25 19:59:48,611 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: M&G.PJ.COM
2023-01-25 19:59:48,611 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:48,611 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17/03/2017

2023-01-25 19:59:48,612 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17/03/2017
2023-01-25 19:59:48,612 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:48,612 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN PUTERI 1/1, BANDAR PUTERI 47100, PUCHONG, SELANGOR, MALAYSIA

2023-01-25 19:59:48,612 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN PUTERI 1/1, BANDAR PUTERI 47100, PUCHONG, SELANGOR, MALAYSIA
2023-01-25 19:59:48,613 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:48,613 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Total GST(I):
Total Incl GST(I): RM
2023-01-25 19:59:48,613 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total GST(I): Total Incl GST(I): RM
2023-01-25 19:59:48,613 - __main__ - INFO - 96 - <module>() - Final prediction for document 340: {'company': 'M&G.PJ.COM', 'date': '17/03/2017', 'address': 'JALAN PUTERI 1/1, BANDAR PUTERI 47100, PUCHONG, SELANGOR, MALAYSIA', 'total': 'Total GST(I): Total Incl GST(I): RM'}
2023-01-25 19:59:48,615 - __main__ - INFO - 92 - <module>() - Predicting document 341...
2023-01-25 19:59:50,795 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Total value is

2023-01-25 19:59:50,796 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:50,796 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:50,796 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:50,797 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:50,797 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:50,797 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:50,797 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:50,798 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:50,798 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:50,798 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:50,798 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:50,799 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Total value is

2023-01-25 19:59:50,799 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total value is
2023-01-25 19:59:50,799 - __main__ - INFO - 96 - <module>() - Final prediction for document 341: {'total': 'Total value is'}
2023-01-25 19:59:50,801 - __main__ - INFO - 92 - <module>() - Predicting document 342...
2023-01-25 19:59:52,971 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: 2018/05/09
Address of Company: JALAN UPPER SUBANG
Total: 65.70
2023-01-25 19:59:52,972 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:52,972 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:52,972 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:59:52,973 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:59:52,973 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:52,974 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018/05/09

2023-01-25 19:59:52,974 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018/05/09
2023-01-25 19:59:52,974 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:52,975 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN UPPER SUBANG

2023-01-25 19:59:52,975 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN UPPER SUBANG
2023-01-25 19:59:52,975 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:52,975 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  65.70
2023-01-25 19:59:52,976 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 65.70
2023-01-25 19:59:52,976 - __main__ - INFO - 96 - <module>() - Final prediction for document 342: {'company': 'N/A', 'date': '2018/05/09', 'address': 'JALAN UPPER SUBANG', 'total': '65.70'}
2023-01-25 19:59:52,978 - __main__ - INFO - 92 - <module>() - Predicting document 343...
2023-01-25 19:59:59,188 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "PASARAYA BORONG PINTAR"
Date of Receipt: <|stop key|>"
Address of Company: "H.NO. 19-1-19-2 JALAN TASIK UTAMA 4, MEDAN NIAGA TASIK DAMAI"
Total: "<|stop key|>"

You will find all the relevant keys in the documents attached, in the "Tax Invoice" and "B2B Receipt" attachments, respectively.

Extract "Company Name", "GSTIN", "<|stop key|>", "Amount", "<|
2023-01-25 19:59:59,189 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:59,189 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:59,190 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "PASARAYA BORONG PINTAR"

2023-01-25 19:59:59,190 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PASARAYA BORONG PINTAR
2023-01-25 19:59:59,190 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:59,190 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>"

2023-01-25 19:59:59,191 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>"
2023-01-25 19:59:59,191 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:59,191 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "H.NO. 19-1-19-2 JALAN TASIK UTAMA 4, MEDAN NIAGA TASIK DAMAI"

2023-01-25 19:59:59,192 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: H.NO. 19-1-19-2 JALAN TASIK UTAMA 4, MEDAN NIAGA TASIK DAMAI
2023-01-25 19:59:59,192 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:59,192 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "<|stop key|>"

You will find all the relevant keys in the documents attached, in the "Tax Invoice" and "B2B Receipt" attachments, respectively.

Extract "Company Name", "GSTIN", "<|stop key|>", "Amount", "<|
2023-01-25 19:59:59,192 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "<|stop key|>" You will find all the relevant keys in the documents attached, in the "Tax Invoice" and "B2B Receipt" attachments, respectively. Extract "Company Name", "GSTIN", "<|stop key|>", "Amount", "<|
2023-01-25 19:59:59,193 - __main__ - INFO - 96 - <module>() - Final prediction for document 343: {'company': 'PASARAYA BORONG PINTAR', 'date': '<|stop key|>"', 'address': 'H.NO. 19-1-19-2 JALAN TASIK UTAMA 4, MEDAN NIAGA TASIK DAMAI', 'total': '"<|stop key|>" You will find all the relevant keys in the documents attached, in the "Tax Invoice" and "B2B Receipt" attachments, respectively. Extract "Company Name", "GSTIN", "<|stop key|>", "Amount", "<|'}
2023-01-25 19:59:59,194 - __main__ - INFO - 92 - <module>() - Predicting document 344...
2023-01-25 20:00:10,444 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Super7
Date of Receipt: 27-01-2018 04:32:13 PM
Address of Company: Pasaraya Borong
Total: 54.75
*STOP KEY*
Total : 54.75
Total : 54.75

If you need assistance in solving an extraction problem feel free to drop a mail to
support@datamanipulation.com

If you have the same data on Excel files you can write a custom rule using the Extract Excel feature that Datamanipulation provides to extract data from an Excel document.
For more information and to download the extract Excel script please visit
2023-01-25 20:00:10,445 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:10,445 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:10,445 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Super7

2023-01-25 20:00:10,445 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Super7
2023-01-25 20:00:10,445 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:10,446 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27-01-2018 04:32:13 PM

2023-01-25 20:00:10,446 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27-01-2018 04:32:13 PM
2023-01-25 20:00:10,446 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:10,446 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Pasaraya Borong

2023-01-25 20:00:10,446 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Pasaraya Borong
2023-01-25 20:00:10,446 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:10,446 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  54.75
*STOP KEY*
Total : 54.75
Total : 54.75

If you need assistance in solving an extraction problem feel free to drop a mail to
support@datamanipulation.com

If you have the same data on Excel files you can write a custom rule using the Extract Excel feature that Datamanipulation provides to extract data from an Excel document.
For more information and to download the extract Excel script please visit
2023-01-25 20:00:10,446 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 54.75 *STOP KEY* Total : 54.75 Total : 54.75 If you need assistance in solving an extraction problem feel free to drop a mail to support@datamanipulation.com If you have the same data on Excel files you can write a custom rule using the Extract Excel feature that Datamanipulation provides to extract data from an Excel document. For more information and to download the extract Excel script please visit
2023-01-25 20:00:10,446 - __main__ - INFO - 96 - <module>() - Final prediction for document 344: {'company': 'Super7', 'date': '27-01-2018 04:32:13 PM', 'address': 'Pasaraya Borong', 'total': '54.75 *STOP KEY* Total : 54.75 Total : 54.75 If you need assistance in solving an extraction problem feel free to drop a mail to support@datamanipulation.com If you have the same data on Excel files you can write a custom rule using the Extract Excel feature that Datamanipulation provides to extract data from an Excel document. For more information and to download the extract Excel script please visit'}
2023-01-25 20:00:10,456 - __main__ - INFO - 92 - <module>() - Predicting document 345...
2023-01-25 20:00:15,569 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Royal Tea
Date of Receipt: 08/03/2018
Address of Company: No. 23, Jalan Sutera Tanjung 8/3,
Taman Sutera Utama
Total: RM10.28
2023-01-25 20:00:15,569 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Royal Tea

2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Royal Tea
2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  08/03/2018

2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 08/03/2018
2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  No. 23, Jalan Sutera Tanjung 8/3,
Taman Sutera Utama

2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: No. 23, Jalan Sutera Tanjung 8/3, Taman Sutera Utama
2023-01-25 20:00:15,570 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:15,571 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM10.28
2023-01-25 20:00:15,571 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM10.28
2023-01-25 20:00:15,571 - __main__ - INFO - 96 - <module>() - Final prediction for document 345: {'company': 'Royal Tea', 'date': '08/03/2018', 'address': 'No. 23, Jalan Sutera Tanjung 8/3, Taman Sutera Utama', 'total': 'RM10.28'}
2023-01-25 20:00:15,572 - __main__ - INFO - 92 - <module>() - Predicting document 346...
2023-01-25 20:00:22,539 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

The first line of the input contains "Company Name", the second "Date of Receipt", the third "Address of Company" and the fourth "Total".
Here is the expected output:
Company Name : The Body Shop
Date of Receipt: 21/03/2017
Address of Company : The Street
Total: $26.25

We will consider all the strings which are in upper case characters and all the strings will be of the length 10 and maximum characters.
Input 1
2023-01-25 20:00:22,540 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:22,540 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:22,540 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 20:00:22,541 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 20:00:22,541 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:22,541 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 20:00:22,541 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 20:00:22,542 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:22,542 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 20:00:22,542 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 20:00:22,543 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:22,543 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

The first line of the input contains "Company Name", the second "Date of Receipt", the third "Address of Company" and the fourth "Total".
Here is the expected output:
Company Name : The Body Shop
Date of Receipt: 21/03/2017
Address of Company : The Street

2023-01-25 20:00:22,543 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total The first line of the input contains "Company Name", the second "Date of Receipt", the third "Address of Company" and the fourth "Total". Here is the expected output: Company Name : The Body Shop Date of Receipt: 21/03/2017 Address of Company : The Street
2023-01-25 20:00:22,544 - __main__ - INFO - 96 - <module>() - Final prediction for document 346: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total The first line of the input contains "Company Name", the second "Date of Receipt", the third "Address of Company" and the fourth "Total". Here is the expected output: Company Name : The Body Shop Date of Receipt: 21/03/2017 Address of Company : The Street'}
2023-01-25 20:00:22,648 - __main__ - INFO - 109 - <module>() - ================== DONE ==================
