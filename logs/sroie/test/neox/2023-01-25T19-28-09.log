2023-01-25 19:28:15,102 - __main__ - INFO - 21 - <module>() - Using version 0.1.0
2023-01-25 19:28:19,411 - __main__ - INFO - 71 - <module>() - Using pipeline LLMPipeline(prompt_variant=NeutralPrompt, model=GPT_NeoX(max_input_tokens=1792, temperature=1, top_p=0.9, top_k=40, presence_penalty=0, frequency_penalty=0), parser=DictParser, shots=False) on test split
2023-01-25 19:28:19,411 - __main__ - INFO - 75 - <module>() - Searching for keys: ['Company Name', 'Date of Receipt', 'Address of Company', 'Total']
2023-01-25 19:28:19,411 - __main__ - INFO - 92 - <module>() - Predicting document 0...
2023-01-25 19:28:26,603 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC
Date of Receipt: 25/01/2018
Address of Company: 123, Jalan A, Kuala Lumpur
Total: 179.25

Use the function below to generate an output like the one above.

Write an SQL Query in Oracle which can retrieve and format the information above.

You can create one. For eg,
SELECT
REPLACE(
'SALESPERSON:
180.00
REF. :
ITEM
QTY
S/PRICE
AMOUNT
TAX
1007
3
63.60
190.80

2023-01-25 19:28:26,606 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:26,606 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:26,611 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC

2023-01-25 19:28:26,612 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC
2023-01-25 19:28:26,612 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:26,614 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25/01/2018

2023-01-25 19:28:26,615 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25/01/2018
2023-01-25 19:28:26,615 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:26,617 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  123, Jalan A, Kuala Lumpur

2023-01-25 19:28:26,618 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 123, Jalan A, Kuala Lumpur
2023-01-25 19:28:26,619 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:26,623 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  179.25

Use the function below to generate an output like the one above.

Write an SQL Query in Oracle which can retrieve and format the information above.

You can create one. For eg,
SELECT
REPLACE(
'SALESPERSON:
180.00
REF. :
ITEM
QTY
S/PRICE
AMOUNT
TAX
1007
3
63.60
190.80

2023-01-25 19:28:26,624 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 179.25 Use the function below to generate an output like the one above. Write an SQL Query in Oracle which can retrieve and format the information above. You can create one. For eg, SELECT REPLACE( 'SALESPERSON: 180.00 REF. : ITEM QTY S/PRICE AMOUNT TAX 1007 3 63.60 190.80
2023-01-25 19:28:26,624 - __main__ - INFO - 96 - <module>() - Final prediction for document 0: {'company': 'ABC', 'date': '25/01/2018', 'address': '123, Jalan A, Kuala Lumpur', 'total': "179.25 Use the function below to generate an output like the one above. Write an SQL Query in Oracle which can retrieve and format the information above. You can create one. For eg, SELECT REPLACE( 'SALESPERSON: 180.00 REF. : ITEM QTY S/PRICE AMOUNT TAX 1007 3 63.60 190.80"}
2023-01-25 19:28:26,626 - __main__ - INFO - 92 - <module>() - Predicting document 1...
2023-01-25 19:28:33,873 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  [data1]
Date of Receipt: [data2]
Address of Company: [data3]
Total: [data4]

Save your text as a file named keyValue.txt with the following:

The key is the value of <|stop key|>

If you are having trouble extracting the data, please check this example:

Save as .csv file and read it with excel.

Note:

The first value is the company name.

The second value is the date of receipt.

The third value is the address of the company.

2023-01-25 19:28:33,875 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:33,875 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:33,876 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  [data1]

2023-01-25 19:28:33,876 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [data1]
2023-01-25 19:28:33,877 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:33,877 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  [data2]

2023-01-25 19:28:33,878 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [data2]
2023-01-25 19:28:33,878 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:33,879 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  [data3]

2023-01-25 19:28:33,879 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [data3]
2023-01-25 19:28:33,880 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:33,880 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  [data4]

Save your text as a file named keyValue.txt with the following:

The key is the value of <|stop key|>

If you are having trouble extracting the data, please check this example:

Save as .csv file and read it with excel.

Note:

The first value is the company name.

The second value is the date of receipt.

The third value is the address of the company.

2023-01-25 19:28:33,881 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [data4] Save your text as a file named keyValue.txt with the following: The key is the value of <|stop key|> If you are having trouble extracting the data, please check this example: Save as .csv file and read it with excel. Note: The first value is the company name. The second value is the date of receipt. The third value is the address of the company.
2023-01-25 19:28:33,881 - __main__ - INFO - 96 - <module>() - Final prediction for document 1: {'company': '[data1]', 'date': '[data2]', 'address': '[data3]', 'total': '[data4] Save your text as a file named keyValue.txt with the following: The key is the value of <|stop key|> If you are having trouble extracting the data, please check this example: Save as .csv file and read it with excel. Note: The first value is the company name. The second value is the date of receipt. The third value is the address of the company.'}
2023-01-25 19:28:33,884 - __main__ - INFO - 92 - <module>() - Predicting document 2...
2023-01-25 19:28:41,334 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  the name of the company
Date of Receipt: Receipt date of the goods
Address of Company: Address of the company that issued the invoice
Total: Total amount for all the lines of the invoice

Sample Input:
Company Name: The TAN CHAY YEE
Date of Receipt:
Address of Company: 81750 MASAI, JOHOR
Total:
Total amount for all the lines of the invoice:

Output:
VISA CARD:
KINGS SAFETY SHOES KWD B05: 193.00
TOTAL INCLUSIVE GST:
2023-01-25 19:28:41,336 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:41,337 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:41,338 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  the name of the company

2023-01-25 19:28:41,338 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: the name of the company
2023-01-25 19:28:41,338 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:41,339 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Receipt date of the goods

2023-01-25 19:28:41,339 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt date of the goods
2023-01-25 19:28:41,339 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:41,340 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of the company that issued the invoice

2023-01-25 19:28:41,340 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of the company that issued the invoice
2023-01-25 19:28:41,341 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:41,341 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total amount for all the lines of the invoice

Sample Input:
Company Name: The TAN CHAY YEE
Date of Receipt:
Address of Company: 81750 MASAI, JOHOR

2023-01-25 19:28:41,341 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total amount for all the lines of the invoice Sample Input: Company Name: The TAN CHAY YEE Date of Receipt: Address of Company: 81750 MASAI, JOHOR
2023-01-25 19:28:41,341 - __main__ - INFO - 96 - <module>() - Final prediction for document 2: {'company': 'the name of the company', 'date': 'Receipt date of the goods', 'address': 'Address of the company that issued the invoice', 'total': 'Total amount for all the lines of the invoice Sample Input: Company Name: The TAN CHAY YEE Date of Receipt: Address of Company: 81750 MASAI, JOHOR'}
2023-01-25 19:28:41,346 - __main__ - INFO - 92 - <module>() - Predicting document 3...
2023-01-25 19:28:43,756 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 27/10/2017
Address of Company:
Total:
Date: 27/10/2017
Place:
2023-01-25 19:28:43,757 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:43,758 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:43,758 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:43,759 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:43,759 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:43,759 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27/10/2017

2023-01-25 19:28:43,760 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27/10/2017
2023-01-25 19:28:43,760 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:43,761 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:43,761 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:43,761 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:43,762 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date: 27/10/2017
Place:
2023-01-25 19:28:43,762 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date: 27/10/2017 Place:
2023-01-25 19:28:43,763 - __main__ - INFO - 96 - <module>() - Final prediction for document 3: {'date': '27/10/2017', 'total': 'Date: 27/10/2017 Place:'}
2023-01-25 19:28:43,766 - __main__ - INFO - 92 - <module>() - Predicting document 4...
2023-01-25 19:28:50,804 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>

Expected output:
Output1:

Output2:

A:

I am not sure if you would like to create a JSON for the output but if you want to create a string array, then you could try the following. Please copy the code and execute it in the editor:
class Program
{
    static void Main(string[] args)
    {
        string doc1 = @"MCDONALD'S
1 M HOT CHOC
TOTAL: ROUND
2023-01-25 19:28:50,806 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:50,806 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:50,807 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:50,808 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:50,808 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:50,809 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:50,810 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:50,811 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:50,811 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:50,813 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:50,813 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:50,814 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Expected output:
Output1:

Output2:

A:

I am not sure if you would like to create a JSON for the output but if you want to create a string array, then you could try the following. Please copy the code and execute it in the editor:
class Program
{
    static void Main(string[] args)
    {
        string doc1 = @"MCDONALD'S
1 M HOT CHOC

2023-01-25 19:28:50,814 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Expected output: Output1: Output2: A: I am not sure if you would like to create a JSON for the output but if you want to create a string array, then you could try the following. Please copy the code and execute it in the editor: class Program {   static void Main(string[] args)   {     string doc1 = @"MCDONALD'S 1 M HOT CHOC
2023-01-25 19:28:50,815 - __main__ - INFO - 96 - <module>() - Final prediction for document 4: {'total': '<|stop key|> Expected output: Output1: Output2: A: I am not sure if you would like to create a JSON for the output but if you want to create a string array, then you could try the following. Please copy the code and execute it in the editor: class Program {   static void Main(string[] args)   {     string doc1 = @"MCDONALD\'S 1 M HOT CHOC'}
2023-01-25 19:28:50,817 - __main__ - INFO - 92 - <module>() - Predicting document 5...
2023-01-25 19:28:53,214 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>
2023-01-25 19:28:53,218 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:28:53,218 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:28:53,220 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:53,220 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:53,221 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:28:53,222 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:53,222 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:53,223 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:28:53,223 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:28:53,223 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:28:53,224 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:28:53,224 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>
2023-01-25 19:28:53,228 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>
2023-01-25 19:28:53,229 - __main__ - INFO - 96 - <module>() - Final prediction for document 5: {'total': '<|stop key|>'}
2023-01-25 19:28:53,232 - __main__ - INFO - 92 - <module>() - Predicting document 6...
2023-01-25 19:29:00,884 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  HANNA HOLDING GROUP
Date of Receipt: 13/12/2017
Address of Company: FELDA JAYA
(Address 1)
(Address 2)
(City)
(State)
(Postcode)
State: JEERA
Tel. no. (03) 877 836 88
(Mobile)
Fax: (03) 877 837 65
Tax Invoice No. (XB-3131)
Tax Code: GST
Total: RM20,430.70
Total for Invoice: RM20,430.70
(including GST)
2023-01-25 19:29:00,886 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:00,886 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:00,887 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  HANNA HOLDING GROUP

2023-01-25 19:29:00,887 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: HANNA HOLDING GROUP
2023-01-25 19:29:00,887 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:00,888 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13/12/2017

2023-01-25 19:29:00,888 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13/12/2017
2023-01-25 19:29:00,888 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:00,889 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  FELDA JAYA
(Address 1)
(Address 2)
(City)
(State)
(Postcode)
State: JEERA
Tel. no. (03) 877 836 88
(Mobile)
Fax: (03) 877 837 65
Tax Invoice No. (XB-3131)
Tax Code: GST

2023-01-25 19:29:00,889 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: FELDA JAYA (Address 1) (Address 2) (City) (State) (Postcode) State: JEERA Tel. no. (03) 877 836 88 (Mobile) Fax: (03) 877 837 65 Tax Invoice No. (XB-3131) Tax Code: GST
2023-01-25 19:29:00,889 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:00,890 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM20,430.70
Total for Invoice: RM20,430.70
(including GST)
2023-01-25 19:29:00,890 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM20,430.70 Total for Invoice: RM20,430.70 (including GST)
2023-01-25 19:29:00,890 - __main__ - INFO - 96 - <module>() - Final prediction for document 6: {'company': 'HANNA HOLDING GROUP', 'date': '13/12/2017', 'address': 'FELDA JAYA (Address 1) (Address 2) (City) (State) (Postcode) State: JEERA Tel. no. (03) 877 836 88 (Mobile) Fax: (03) 877 837 65 Tax Invoice No. (XB-3131) Tax Code: GST', 'total': 'RM20,430.70 Total for Invoice: RM20,430.70 (including GST)'}
2023-01-25 19:29:00,892 - __main__ - INFO - 92 - <module>() - Predicting document 7...
2023-01-25 19:29:03,051 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 180414
Address of Company:
Total:
2023-01-25 19:29:03,053 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:03,053 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:03,054 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:03,054 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:03,055 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:03,055 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  180414

2023-01-25 19:29:03,056 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 180414
2023-01-25 19:29:03,063 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:03,064 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:03,065 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:03,066 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:03,066 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:29:03,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:03,068 - __main__ - INFO - 96 - <module>() - Final prediction for document 7: {'date': '180414'}
2023-01-25 19:29:03,074 - __main__ - INFO - 92 - <module>() - Predicting document 8...
2023-01-25 19:29:07,088 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Address of Company:
City:
State:
Zip Code:
Date Received:
Date Submitted:

You may need to insert the result of this query into a spreadsheet and then export that spreadsheet to a CSV or Excel file if you want to continue.
2023-01-25 19:29:07,089 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:07,089 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:07,089 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:07,090 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:07,090 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:07,090 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:07,091 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
City:
State:
Zip Code:
Date Received:
Date Submitted:

You may need to insert the result of this query into a spreadsheet and then export that spreadsheet to a CSV or Excel file if you want to continue.
2023-01-25 19:29:07,091 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: City: State: Zip Code: Date Received: Date Submitted: You may need to insert the result of this query into a spreadsheet and then export that spreadsheet to a CSV or Excel file if you want to continue.
2023-01-25 19:29:07,091 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:07,092 - __main__ - INFO - 96 - <module>() - Final prediction for document 8: {'address': 'City: State: Zip Code: Date Received: Date Submitted: You may need to insert the result of this query into a spreadsheet and then export that spreadsheet to a CSV or Excel file if you want to continue.'}
2023-01-25 19:29:07,094 - __main__ - INFO - 92 - <module>() - Predicting document 9...
2023-01-25 19:29:14,450 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
6.00
0.00
"<|stop key|>"

Now paste the extracted values into this html page with the key as id and the value as text.
In this script, you have to replace the variable names with the names of the fields in the extract.

/*
Script that will take an html page and the values it contains
and insert those values into a html page.

You can then create a php page that you can run from any
computer that has internet access and put the html page on

2023-01-25 19:29:14,451 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:14,451 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:14,452 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:14,452 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:14,453 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:14,453 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:14,454 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:14,454 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:14,455 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:14,455 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:14,458 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:14,460 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
6.00
0.00
"<|stop key|>"

Now paste the extracted values into this html page with the key as id and the value as text.
In this script, you have to replace the variable names with the names of the fields in the extract.

/*
Script that will take an html page and the values it contains
and insert those values into a html page.

You can then create a php page that you can run from any
computer that has internet access and put the html page on

2023-01-25 19:29:14,461 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6.00 0.00 "<|stop key|>" Now paste the extracted values into this html page with the key as id and the value as text. In this script, you have to replace the variable names with the names of the fields in the extract. /* Script that will take an html page and the values it contains and insert those values into a html page. You can then create a php page that you can run from any computer that has internet access and put the html page on
2023-01-25 19:29:14,465 - __main__ - INFO - 96 - <module>() - Final prediction for document 9: {'total': '6.00 0.00 "<|stop key|>" Now paste the extracted values into this html page with the key as id and the value as text. In this script, you have to replace the variable names with the names of the fields in the extract. /* Script that will take an html page and the values it contains and insert those values into a html page. You can then create a php page that you can run from any computer that has internet access and put the html page on'}
2023-01-25 19:29:14,472 - __main__ - INFO - 92 - <module>() - Predicting document 10...
2023-01-25 19:29:19,005 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (your company name)
Date of Receipt: (your date of receipt)
Address of Company: (your address of company)
Total: (your total)

If you can't find a key-value pair, leave the value blank.

The key & value you type will go in place of "<|stop key|>" in the code below.
2023-01-25 19:29:19,006 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:19,006 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:19,007 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (your company name)

2023-01-25 19:29:19,007 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (your company name)
2023-01-25 19:29:19,008 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:19,008 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (your date of receipt)

2023-01-25 19:29:19,009 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (your date of receipt)
2023-01-25 19:29:19,009 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:19,009 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (your address of company)

2023-01-25 19:29:19,010 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (your address of company)
2023-01-25 19:29:19,010 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:19,010 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (your total)

If you can't find a key-value pair, leave the value blank.

The key & value you type will go in place of "<|stop key|>" in the code below.
2023-01-25 19:29:19,011 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (your total) If you can't find a key-value pair, leave the value blank. The key & value you type will go in place of "<|stop key|>" in the code below.
2023-01-25 19:29:19,011 - __main__ - INFO - 96 - <module>() - Final prediction for document 10: {'company': '(your company name)', 'date': '(your date of receipt)', 'address': '(your address of company)', 'total': '(your total) If you can\'t find a key-value pair, leave the value blank. The key & value you type will go in place of "<|stop key|>" in the code below.'}
2023-01-25 19:29:19,014 - __main__ - INFO - 92 - <module>() - Predicting document 11...
2023-01-25 19:29:26,007 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

If multiple key-value pairs can be extracted from the document, enter them one by one in the table above.

The above example uses the following regular expression: *

You can use the above technique to extract any field you want. You might need to adjust the regular expression to your liking. For example, a list of company names (as in the previous example) might be represented as "CompanyName1", "CompanyName2" etc. You can specify a regular expression that contains all
2023-01-25 19:29:26,009 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:26,010 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:26,011 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:29:26,011 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:29:26,011 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:26,012 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:29:26,012 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:29:26,013 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:26,013 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:29:26,014 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:29:26,014 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:26,015 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

If multiple key-value pairs can be extracted from the document, enter them one by one in the table above.

The above example uses the following regular expression: *

You can use the above technique to extract any field you want. You might need to adjust the regular expression to your liking. For example, a list of company names (as in the previous example) might be represented as "CompanyName1", "CompanyName2" etc. You can specify a regular expression that contains all
2023-01-25 19:29:26,016 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total If multiple key-value pairs can be extracted from the document, enter them one by one in the table above. The above example uses the following regular expression: * You can use the above technique to extract any field you want. You might need to adjust the regular expression to your liking. For example, a list of company names (as in the previous example) might be represented as "CompanyName1", "CompanyName2" etc. You can specify a regular expression that contains all
2023-01-25 19:29:26,018 - __main__ - INFO - 96 - <module>() - Final prediction for document 11: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total If multiple key-value pairs can be extracted from the document, enter them one by one in the table above. The above example uses the following regular expression: * You can use the above technique to extract any field you want. You might need to adjust the regular expression to your liking. For example, a list of company names (as in the previous example) might be represented as "CompanyName1", "CompanyName2" etc. You can specify a regular expression that contains all'}
2023-01-25 19:29:26,022 - __main__ - INFO - 92 - <module>() - Predicting document 12...
2023-01-25 19:29:28,013 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:29:28,014 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:28,015 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:28,015 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:28,016 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:28,017 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:28,018 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:28,019 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:28,020 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:28,021 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:28,022 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:28,023 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:28,024 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:29:28,024 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:28,024 - __main__ - INFO - 96 - <module>() - Final prediction for document 12: {}
2023-01-25 19:29:28,027 - __main__ - INFO - 92 - <module>() - Predicting document 13...
2023-01-25 19:29:29,837 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:29:29,839 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:29,839 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:29,840 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:29,840 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:29,841 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:29,842 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:29,842 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:29,843 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:29,844 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:29,845 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:29,846 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:29,846 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:29:29,847 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:29,847 - __main__ - INFO - 96 - <module>() - Final prediction for document 13: {}
2023-01-25 19:29:29,852 - __main__ - INFO - 92 - <module>() - Predicting document 14...
2023-01-25 19:29:36,645 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "S&B Lighting Pte Ltd"
Date of Receipt: 03/08/2017 12:00:00 AM
Address of Company: 12A, Lorong 3 Toa Payoh, #01-10
Amount: "58"
Tax: "2"

Output result for the above should look something like this:

Company Name: S&B Lighting Pte Ltd
Date of Receipt: 03/08/2017 12:00:00 AM
Address of Company: 12A, Lorong 3 Toa Payoh, #01-10
Amount: "58"
2023-01-25 19:29:36,648 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:36,649 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:36,650 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "S&B Lighting Pte Ltd"

2023-01-25 19:29:36,651 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S&B Lighting Pte Ltd
2023-01-25 19:29:36,651 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:36,652 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03/08/2017 12:00:00 AM

2023-01-25 19:29:36,653 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03/08/2017 12:00:00 AM
2023-01-25 19:29:36,654 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:36,655 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12A, Lorong 3 Toa Payoh, #01-10
Amount: "58"
Tax: "2"

Output result for the above should look something like this:

Company Name: S&B Lighting Pte Ltd
Date of Receipt: 03/08/2017 12:00:00 AM

2023-01-25 19:29:36,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12A, Lorong 3 Toa Payoh, #01-10 Amount: "58" Tax: "2" Output result for the above should look something like this: Company Name: S&B Lighting Pte Ltd Date of Receipt: 03/08/2017 12:00:00 AM
2023-01-25 19:29:36,656 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:36,657 - __main__ - INFO - 96 - <module>() - Final prediction for document 14: {'company': 'S&B Lighting Pte Ltd', 'date': '03/08/2017 12:00:00 AM', 'address': '12A, Lorong 3 Toa Payoh, #01-10 Amount: "58" Tax: "2" Output result for the above should look something like this: Company Name: S&B Lighting Pte Ltd Date of Receipt: 03/08/2017 12:00:00 AM'}
2023-01-25 19:29:36,659 - __main__ - INFO - 92 - <module>() - Predicting document 15...
2023-01-25 19:29:38,956 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  MOMEN
Date of Receipt: 21 Jun 16
Address of Company: Kuala Lumpur
Total: RM2738.20
2023-01-25 19:29:38,958 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:38,959 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:38,960 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MOMEN

2023-01-25 19:29:38,960 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MOMEN
2023-01-25 19:29:38,961 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:38,961 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21 Jun 16

2023-01-25 19:29:38,962 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21 Jun 16
2023-01-25 19:29:38,962 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:38,963 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kuala Lumpur

2023-01-25 19:29:38,964 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur
2023-01-25 19:29:38,966 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:38,968 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM2738.20
2023-01-25 19:29:38,968 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM2738.20
2023-01-25 19:29:38,969 - __main__ - INFO - 96 - <module>() - Final prediction for document 15: {'company': 'MOMEN', 'date': '21 Jun 16', 'address': 'Kuala Lumpur', 'total': 'RM2738.20'}
2023-01-25 19:29:38,974 - __main__ - INFO - 92 - <module>() - Predicting document 16...
2023-01-25 19:29:46,112 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ZONETEL - BERHAD
Billing_Name:
Billing_Address:
Billing_Zip/Postal Code: 91226
Billing_City:
Billing_State: CA
Billing_Country: US
Email: zonetel@gmail.com
Gst/VAT number: 2827651074/08
Duns# Orderer:
Document No.:
Document Date: 12/11/2011
Product Ordered: BTS - RJ6R-F7 (12/11/2011)
Quantity: 12
Unit
2023-01-25 19:29:46,113 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:46,114 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:46,115 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ZONETEL - BERHAD
Billing_Name:
Billing_Address:
Billing_Zip/Postal Code: 91226
Billing_City:
Billing_State: CA
Billing_Country: US
Email: zonetel@gmail.com
Gst/VAT number: 2827651074/08
Duns# Orderer:
Document No.:
Document Date: 12/11/2011
Product Ordered: BTS - RJ6R-F7 (12/11/2011)
Quantity: 12
Unit
2023-01-25 19:29:46,115 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ZONETEL - BERHAD Billing_Name: Billing_Address: Billing_Zip/Postal Code: 91226 Billing_City: Billing_State: CA Billing_Country: US Email: zonetel@gmail.com Gst/VAT number: 2827651074/08 Duns# Orderer: Document No.: Document Date: 12/11/2011 Product Ordered: BTS - RJ6R-F7 (12/11/2011) Quantity: 12 Unit
2023-01-25 19:29:46,116 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:46,116 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:46,117 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:46,118 - __main__ - INFO - 96 - <module>() - Final prediction for document 16: {'company': 'ZONETEL - BERHAD Billing_Name: Billing_Address: Billing_Zip/Postal Code: 91226 Billing_City: Billing_State: CA Billing_Country: US Email: zonetel@gmail.com Gst/VAT number: 2827651074/08 Duns# Orderer: Document No.: Document Date: 12/11/2011 Product Ordered: BTS - RJ6R-F7 (12/11/2011) Quantity: 12 Unit'}
2023-01-25 19:29:46,129 - __main__ - INFO - 92 - <module>() - Predicting document 17...
2023-01-25 19:29:47,665 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:29:47,667 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:47,667 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:47,668 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:47,669 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:47,669 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:47,670 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:47,670 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:47,670 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:47,671 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:47,672 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:47,672 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:47,672 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:29:47,673 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:47,673 - __main__ - INFO - 96 - <module>() - Final prediction for document 17: {}
2023-01-25 19:29:47,680 - __main__ - INFO - 92 - <module>() - Predicting document 18...
2023-01-25 19:29:49,855 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:29:49,856 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:49,857 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:49,858 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:49,858 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:49,858 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:49,859 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:49,859 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:49,859 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:49,860 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:49,860 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:49,860 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:49,861 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:29:49,861 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:49,862 - __main__ - INFO - 96 - <module>() - Final prediction for document 18: {}
2023-01-25 19:29:49,867 - __main__ - INFO - 92 - <module>() - Predicting document 19...
2023-01-25 19:29:57,184 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: <null>
Address of Company: <null>
Total: <null>

If the extract is successfully completed then display the following:
(
For a Company Name of "Coca Cola International".
For a Date of Receipt of 14.09.12
For an Address of Company of "Bangunan Coca Cola Bhd, Ground Floor Suite #1212, Billion Square, Jalan SS 16/3, Petaling Jaya Selangor Darul Ehsan, 51001, Malaysia".
For a Total of RM 6,450
2023-01-25 19:29:57,188 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:57,188 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:57,189 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:29:57,189 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:29:57,190 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:57,190 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <null>

2023-01-25 19:29:57,191 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <null>
2023-01-25 19:29:57,191 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:57,191 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <null>

2023-01-25 19:29:57,192 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <null>
2023-01-25 19:29:57,192 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:57,192 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <null>

If the extract is successfully completed then display the following:
(
For a Company Name of "Coca Cola International".
For a Date of Receipt of 14.09.12
For an Address of Company of "Bangunan Coca Cola Bhd, Ground Floor Suite #1212, Billion Square, Jalan SS 16/3, Petaling Jaya Selangor Darul Ehsan, 51001, Malaysia".
For a Total of RM 6,450
2023-01-25 19:29:57,193 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <null> If the extract is successfully completed then display the following: ( For a Company Name of "Coca Cola International". For a Date of Receipt of 14.09.12 For an Address of Company of "Bangunan Coca Cola Bhd, Ground Floor Suite #1212, Billion Square, Jalan SS 16/3, Petaling Jaya Selangor Darul Ehsan, 51001, Malaysia". For a Total of RM 6,450
2023-01-25 19:29:57,193 - __main__ - INFO - 96 - <module>() - Final prediction for document 19: {'date': '<null>', 'address': '<null>', 'total': '<null> If the extract is successfully completed then display the following: ( For a Company Name of "Coca Cola International". For a Date of Receipt of 14.09.12 For an Address of Company of "Bangunan Coca Cola Bhd, Ground Floor Suite #1212, Billion Square, Jalan SS 16/3, Petaling Jaya Selangor Darul Ehsan, 51001, Malaysia". For a Total of RM 6,450'}
2023-01-25 19:29:57,201 - __main__ - INFO - 92 - <module>() - Predicting document 20...
2023-01-25 19:29:59,695 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Satukmunting Enterprise SDN BHD
Date of Receipt: 13/01/2018
Address of Company:
Total: 63.00
2023-01-25 19:29:59,699 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:29:59,700 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:29:59,701 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Satukmunting Enterprise SDN BHD

2023-01-25 19:29:59,702 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Satukmunting Enterprise SDN BHD
2023-01-25 19:29:59,702 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:29:59,703 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13/01/2018

2023-01-25 19:29:59,704 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13/01/2018
2023-01-25 19:29:59,704 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:29:59,705 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:29:59,705 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:29:59,706 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:29:59,706 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  63.00
2023-01-25 19:29:59,706 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 63.00
2023-01-25 19:29:59,707 - __main__ - INFO - 96 - <module>() - Final prediction for document 20: {'company': 'Satukmunting Enterprise SDN BHD', 'date': '13/01/2018', 'total': '63.00'}
2023-01-25 19:29:59,710 - __main__ - INFO - 92 - <module>() - Predicting document 21...
2023-01-25 19:30:02,437 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  name of company
Date of Receipt: date of receipt
Address of Company: address of company
Total: total value of purchase, including GST
2023-01-25 19:30:02,439 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:02,439 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:02,440 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  name of company

2023-01-25 19:30:02,441 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: name of company
2023-01-25 19:30:02,441 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:02,442 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  date of receipt

2023-01-25 19:30:02,442 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: date of receipt
2023-01-25 19:30:02,442 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:02,443 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  address of company

2023-01-25 19:30:02,443 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: address of company
2023-01-25 19:30:02,443 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:02,444 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  total value of purchase, including GST
2023-01-25 19:30:02,444 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: total value of purchase, including GST
2023-01-25 19:30:02,445 - __main__ - INFO - 96 - <module>() - Final prediction for document 21: {'company': 'name of company', 'date': 'date of receipt', 'address': 'address of company', 'total': 'total value of purchase, including GST'}
2023-01-25 19:30:02,448 - __main__ - INFO - 92 - <module>() - Predicting document 22...
2023-01-25 19:30:08,601 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (Your company's name)
Date of Receipt: (Date the order was made)
Address of Company: (Street, Suburb, City or Town, Postcode or Zipcode, Country)
Total: <|stop key|>
<If any of the above fields are missing from the document, set to <null>. If <null> is specified, you will need to add the field values.>
<Insert an empty line after the last field specified.>

2023-01-25 19:30:08,604 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:08,604 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:08,605 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Your company's name)

2023-01-25 19:30:08,605 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Your company's name)
2023-01-25 19:30:08,606 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:08,607 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Date the order was made)

2023-01-25 19:30:08,608 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Date the order was made)
2023-01-25 19:30:08,608 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:08,609 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Street, Suburb, City or Town, Postcode or Zipcode, Country)

2023-01-25 19:30:08,609 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Street, Suburb, City or Town, Postcode or Zipcode, Country)
2023-01-25 19:30:08,610 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:08,610 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>
<If any of the above fields are missing from the document, set to <null>. If <null> is specified, you will need to add the field values.>
<Insert an empty line after the last field specified.>

2023-01-25 19:30:08,611 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> <If any of the above fields are missing from the document, set to <null>. If <null> is specified, you will need to add the field values.> <Insert an empty line after the last field specified.>
2023-01-25 19:30:08,611 - __main__ - INFO - 96 - <module>() - Final prediction for document 22: {'company': "(Your company's name)", 'date': '(Date the order was made)', 'address': '(Street, Suburb, City or Town, Postcode or Zipcode, Country)', 'total': '<|stop key|> <If any of the above fields are missing from the document, set to <null>. If <null> is specified, you will need to add the field values.> <Insert an empty line after the last field specified.>'}
2023-01-25 19:30:08,615 - __main__ - INFO - 92 - <module>() - Predicting document 23...
2023-01-25 19:30:15,465 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BERAJA ANTIK
Date of Receipt: 01/01/2007
Address of Company: KUALA LUMPUR, MALAYSIA
Total: 15.99
18.00
18.00
18.00
18.00
18.00
18.00
18.00
18.00
18.00

Note: The values are for illustration only. You can use any appropriate value.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If
2023-01-25 19:30:15,466 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:15,466 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:15,466 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BERAJA ANTIK

2023-01-25 19:30:15,466 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BERAJA ANTIK
2023-01-25 19:30:15,466 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:15,466 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/01/2007

2023-01-25 19:30:15,466 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/01/2007
2023-01-25 19:30:15,466 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:15,467 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KUALA LUMPUR, MALAYSIA

2023-01-25 19:30:15,467 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KUALA LUMPUR, MALAYSIA
2023-01-25 19:30:15,467 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:15,467 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15.99
18.00
18.00
18.00
18.00
18.00
18.00
18.00
18.00
18.00

Note: The values are for illustration only. You can use any appropriate value.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If
2023-01-25 19:30:15,467 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15.99 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 Note: The values are for illustration only. You can use any appropriate value. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If
2023-01-25 19:30:15,467 - __main__ - INFO - 96 - <module>() - Final prediction for document 23: {'company': 'BERAJA ANTIK', 'date': '01/01/2007', 'address': 'KUALA LUMPUR, MALAYSIA', 'total': '15.99 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 18.00 Note: The values are for illustration only. You can use any appropriate value. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If'}
2023-01-25 19:30:15,470 - __main__ - INFO - 92 - <module>() - Predicting document 24...
2023-01-25 19:30:22,713 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)
Date of Receipt: 24/09/2017
Address of Company:
Jalan SS 15/4B
47500 Subang Jaya, Selangor
Total:38.55

If you don't want to see all those numbers then use RegEx

First off, if you have an HTML or XML file to parse, then use DOM parser class: it's a better way.

But if you have just plain old text (in this case I use a byte stream), then use the
2023-01-25 19:30:22,715 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:22,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:22,717 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)

2023-01-25 19:30:22,717 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GARDENIA BAKERIES (KL) SDN BHD (139386 X)
2023-01-25 19:30:22,717 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:22,718 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  24/09/2017

2023-01-25 19:30:22,718 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24/09/2017
2023-01-25 19:30:22,718 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:22,719 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Jalan SS 15/4B
47500 Subang Jaya, Selangor

2023-01-25 19:30:22,719 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan SS 15/4B 47500 Subang Jaya, Selangor
2023-01-25 19:30:22,719 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:22,720 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value: 38.55

If you don't want to see all those numbers then use RegEx

First off, if you have an HTML or XML file to parse, then use DOM parser class: it's a better way.

But if you have just plain old text (in this case I use a byte stream), then use the
2023-01-25 19:30:22,720 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 38.55 If you don't want to see all those numbers then use RegEx First off, if you have an HTML or XML file to parse, then use DOM parser class: it's a better way. But if you have just plain old text (in this case I use a byte stream), then use the
2023-01-25 19:30:22,720 - __main__ - INFO - 96 - <module>() - Final prediction for document 24: {'company': 'GARDENIA BAKERIES (KL) SDN BHD (139386 X)', 'date': '24/09/2017', 'address': 'Jalan SS 15/4B 47500 Subang Jaya, Selangor', 'total': "38.55 If you don't want to see all those numbers then use RegEx First off, if you have an HTML or XML file to parse, then use DOM parser class: it's a better way. But if you have just plain old text (in this case I use a byte stream), then use the"}
2023-01-25 19:30:22,723 - __main__ - INFO - 92 - <module>() - Predicting document 25...
2023-01-25 19:30:25,692 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <your company name>
Date of Receipt: <date of receipt>
Address of Company: <address of your company>
Total: <|total with tax|>
2023-01-25 19:30:25,694 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:25,694 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:25,695 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <your company name>

2023-01-25 19:30:25,696 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <your company name>
2023-01-25 19:30:25,696 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:25,697 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <date of receipt>

2023-01-25 19:30:25,697 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <date of receipt>
2023-01-25 19:30:25,697 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:25,698 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <address of your company>

2023-01-25 19:30:25,698 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <address of your company>
2023-01-25 19:30:25,698 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:25,699 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|total with tax|>
2023-01-25 19:30:25,699 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|total with tax|>
2023-01-25 19:30:25,699 - __main__ - INFO - 96 - <module>() - Final prediction for document 25: {'company': '<your company name>', 'date': '<date of receipt>', 'address': '<address of your company>', 'total': '<|total with tax|>'}
2023-01-25 19:30:25,701 - __main__ - INFO - 92 - <module>() - Predicting document 26...
2023-01-25 19:30:33,058 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  MISRIN ENGINEERING SDN. BHD

Date of Receipt: 23/03/2017
Address of Company: 17-20, Jalan SS20/9B, Bukit Mertajam, 50970, Selangor
Total: 30.00

For more information about the data set, please contact the Malaysian Industrial Services Revitalisation and Nationalisation Directorate (MISRIN) or call (03) 5118 9888 during working hours.

All content on this website, including dictionary, thesaurus, literature, geography, and other reference data
2023-01-25 19:30:33,058 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:33,058 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:33,059 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MISRIN ENGINEERING SDN. BHD


2023-01-25 19:30:33,059 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MISRIN ENGINEERING SDN. BHD
2023-01-25 19:30:33,059 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:33,059 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23/03/2017

2023-01-25 19:30:33,059 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23/03/2017
2023-01-25 19:30:33,059 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:33,059 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17-20, Jalan SS20/9B, Bukit Mertajam, 50970, Selangor

2023-01-25 19:30:33,060 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17-20, Jalan SS20/9B, Bukit Mertajam, 50970, Selangor
2023-01-25 19:30:33,060 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:33,060 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30.00

For more information about the data set, please contact the Malaysian Industrial Services Revitalisation and Nationalisation Directorate (MISRIN) or call (03) 5118 9888 during working hours.

All content on this website, including dictionary, thesaurus, literature, geography, and other reference data
2023-01-25 19:30:33,060 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30.00 For more information about the data set, please contact the Malaysian Industrial Services Revitalisation and Nationalisation Directorate (MISRIN) or call (03) 5118 9888 during working hours. All content on this website, including dictionary, thesaurus, literature, geography, and other reference data
2023-01-25 19:30:33,060 - __main__ - INFO - 96 - <module>() - Final prediction for document 26: {'company': 'MISRIN ENGINEERING SDN. BHD', 'date': '23/03/2017', 'address': '17-20, Jalan SS20/9B, Bukit Mertajam, 50970, Selangor', 'total': '30.00 For more information about the data set, please contact the Malaysian Industrial Services Revitalisation and Nationalisation Directorate (MISRIN) or call (03) 5118 9888 during working hours. All content on this website, including dictionary, thesaurus, literature, geography, and other reference data'}
2023-01-25 19:30:33,061 - __main__ - INFO - 92 - <module>() - Predicting document 27...
2023-01-25 19:30:34,677 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:30:34,679 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:34,679 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:34,679 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:30:34,680 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:30:34,680 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:34,680 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:30:34,680 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:30:34,681 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:34,681 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:30:34,681 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:30:34,681 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:34,682 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:30:34,682 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:30:34,682 - __main__ - INFO - 96 - <module>() - Final prediction for document 27: {}
2023-01-25 19:30:34,684 - __main__ - INFO - 92 - <module>() - Predicting document 28...
2023-01-25 19:30:41,857 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Save the data to an Excel sheet.

Solution:

The total amount should be in S. Rinaldi Sales invoice no: 18 and 19, Jalan Kuching, Tamansari, Kuala Lumpur. The total amount is 132.5 SGD which is composed of:

Amount: 125.00 SGD
Sales Tax: 7.50 SGD
GST: 7.50 SGD

Key: Value
Company Name: Company Name
2023-01-25 19:30:41,858 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:41,859 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:41,859 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:30:41,859 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:30:41,860 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:41,860 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:30:41,860 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:30:41,861 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:41,861 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:30:41,861 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:30:41,861 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:41,862 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Save the data to an Excel sheet.

Solution:

The total amount should be in S. Rinaldi Sales invoice no: 18 and 19, Jalan Kuching, Tamansari, Kuala Lumpur. The total amount is 132.5 SGD which is composed of:

Amount: 125.00 SGD
Sales Tax: 7.50 SGD
GST: 7.50 SGD

Key: Value
Company Name: Company Name
2023-01-25 19:30:41,862 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Save the data to an Excel sheet. Solution: The total amount should be in S. Rinaldi Sales invoice no: 18 and 19, Jalan Kuching, Tamansari, Kuala Lumpur. The total amount is 132.5 SGD which is composed of: Amount: 125.00 SGD Sales Tax: 7.50 SGD GST: 7.50 SGD Key: Value Company Name: Company Name
2023-01-25 19:30:41,862 - __main__ - INFO - 96 - <module>() - Final prediction for document 28: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Save the data to an Excel sheet. Solution: The total amount should be in S. Rinaldi Sales invoice no: 18 and 19, Jalan Kuching, Tamansari, Kuala Lumpur. The total amount is 132.5 SGD which is composed of: Amount: 125.00 SGD Sales Tax: 7.50 SGD GST: 7.50 SGD Key: Value Company Name: Company Name'}
2023-01-25 19:30:41,864 - __main__ - INFO - 92 - <module>() - Predicting document 29...
2023-01-25 19:30:49,579 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Receipt Date
Address of Company: Address
Total: Total

Step 4

In Excel, open the "TMP File (Company Receipts)" that you have created in Step 2.

This table displays in Excel what you inserted into the fields of the CompanyReceipts.html file.

Step 5

Save this Excel file as Company Receipts.xlsx.

This will preserve the formatting that you had in Company Receipts.html.

Step 6

Now, you are ready to import the Excel file that
2023-01-25 19:30:49,580 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:49,581 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:49,582 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:30:49,582 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:30:49,582 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:49,583 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Receipt Date

2023-01-25 19:30:49,583 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt Date
2023-01-25 19:30:49,584 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:49,584 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address

2023-01-25 19:30:49,584 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address
2023-01-25 19:30:49,585 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:49,586 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Step 4

In Excel, open the "TMP File (Company Receipts)" that you have created in Step 2.

This table displays in Excel what you inserted into the fields of the CompanyReceipts.html file.

Step 5

Save this Excel file as Company Receipts.xlsx.

This will preserve the formatting that you had in Company Receipts.html.

Step 6

Now, you are ready to import the Excel file that
2023-01-25 19:30:49,586 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Step 4 In Excel, open the "TMP File (Company Receipts)" that you have created in Step 2. This table displays in Excel what you inserted into the fields of the CompanyReceipts.html file. Step 5 Save this Excel file as Company Receipts.xlsx. This will preserve the formatting that you had in Company Receipts.html. Step 6 Now, you are ready to import the Excel file that
2023-01-25 19:30:49,587 - __main__ - INFO - 96 - <module>() - Final prediction for document 29: {'company': 'Company Name', 'date': 'Receipt Date', 'address': 'Address', 'total': 'Total Step 4 In Excel, open the "TMP File (Company Receipts)" that you have created in Step 2. This table displays in Excel what you inserted into the fields of the CompanyReceipts.html file. Step 5 Save this Excel file as Company Receipts.xlsx. This will preserve the formatting that you had in Company Receipts.html. Step 6 Now, you are ready to import the Excel file that'}
2023-01-25 19:30:49,590 - __main__ - INFO - 92 - <module>() - Predicting document 30...
2023-01-25 19:30:54,048 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Tung Eng
Date of Receipt: 2019/02/26 11:30:49
Address of Company: 411426 MIRI KIN, MIRI
Total: 0.00

The following are the output:

If you find the solution, please reply the solution with what you have modified.


2023-01-25 19:30:54,048 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:54,049 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:54,049 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Tung Eng

2023-01-25 19:30:54,049 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tung Eng
2023-01-25 19:30:54,050 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:54,050 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2019/02/26 11:30:49

2023-01-25 19:30:54,050 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2019/02/26 11:30:49
2023-01-25 19:30:54,050 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:54,051 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  411426 MIRI KIN, MIRI

2023-01-25 19:30:54,051 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 411426 MIRI KIN, MIRI
2023-01-25 19:30:54,051 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:54,052 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.00

The following are the output:

If you find the solution, please reply the solution with what you have modified.


2023-01-25 19:30:54,052 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.00 The following are the output: If you find the solution, please reply the solution with what you have modified.
2023-01-25 19:30:54,052 - __main__ - INFO - 96 - <module>() - Final prediction for document 30: {'company': 'Tung Eng', 'date': '2019/02/26 11:30:49', 'address': '411426 MIRI KIN, MIRI', 'total': '0.00 The following are the output: If you find the solution, please reply the solution with what you have modified.'}
2023-01-25 19:30:54,054 - __main__ - INFO - 92 - <module>() - Predicting document 31...
2023-01-25 19:30:57,109 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Name of company>
Date of Receipt: <Date of receipt>
Address of Company: <Address of company>
Total: <Total>
2023-01-25 19:30:57,110 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:30:57,110 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:30:57,111 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Name of company>

2023-01-25 19:30:57,111 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Name of company>
2023-01-25 19:30:57,111 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:30:57,112 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date of receipt>

2023-01-25 19:30:57,112 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date of receipt>
2023-01-25 19:30:57,112 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:30:57,112 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address of company>

2023-01-25 19:30:57,113 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address of company>
2023-01-25 19:30:57,113 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:30:57,113 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>
2023-01-25 19:30:57,114 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total>
2023-01-25 19:30:57,114 - __main__ - INFO - 96 - <module>() - Final prediction for document 31: {'company': '<Name of company>', 'date': '<Date of receipt>', 'address': '<Address of company>', 'total': '<Total>'}
2023-01-25 19:30:57,115 - __main__ - INFO - 92 - <module>() - Predicting document 32...
2023-01-25 19:31:03,801 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Key-Value Pairs should be separated by "|".

I need to get the last column with the total.

Code

<html> <body> <form name="myform" method="post" action=""> <div class="col-md-12"> <div class="col-md-6"><label for="txtInput">Company Name</label></div> <div class="col-md-6"><input type="text" id="txtInput" name="compname" class="form-control"
2023-01-25 19:31:03,802 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:03,802 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:03,803 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:03,803 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:03,803 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:03,804 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:03,804 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:03,804 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:03,804 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:03,804 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:03,805 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:03,805 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Key-Value Pairs should be separated by "|".

I need to get the last column with the total.

Code

<html> <body> <form name="myform" method="post" action=""> <div class="col-md-12"> <div class="col-md-6"><label for="txtInput">Company Name</label></div> <div class="col-md-6"><input type="text" id="txtInput" name="compname" class="form-control"
2023-01-25 19:31:03,805 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Key-Value Pairs should be separated by "|". I need to get the last column with the total. Code <html> <body> <form name="myform" method="post" action=""> <div class="col-md-12"> <div class="col-md-6"><label for="txtInput">Company Name</label></div> <div class="col-md-6"><input type="text" id="txtInput" name="compname" class="form-control"
2023-01-25 19:31:03,805 - __main__ - INFO - 96 - <module>() - Final prediction for document 32: {'total': 'Key-Value Pairs should be separated by "|". I need to get the last column with the total. Code <html> <body> <form name="myform" method="post" action=""> <div class="col-md-12"> <div class="col-md-6"><label for="txtInput">Company Name</label></div> <div class="col-md-6"><input type="text" id="txtInput" name="compname" class="form-control"'}
2023-01-25 19:31:03,809 - __main__ - INFO - 92 - <module>() - Predicting document 33...
2023-01-25 19:31:10,805 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Microsoft
Date of Receipt: 2018-01-30
Address of Company: Microsoft, One Microsoft Way
Total: 11,750.00
Date of Receipt: 2018-03-01
Address of Company: Microsoft, One Microsoft Way
Total: 2,200.00

Now, let's suppose I need to group by Company name and I have another Excel file, say, "Data.xlsx". This time, "Data.xlsx" contains the following information.

Company Name

Total

Microsoft

2,650.00

Google

5,
2023-01-25 19:31:10,806 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:10,806 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:10,807 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Microsoft

2023-01-25 19:31:10,807 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Microsoft
2023-01-25 19:31:10,808 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:10,808 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-01-30

2023-01-25 19:31:10,808 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-01-30
2023-01-25 19:31:10,808 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:10,809 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Microsoft, One Microsoft Way

2023-01-25 19:31:10,809 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Microsoft, One Microsoft Way
2023-01-25 19:31:10,809 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:10,809 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  11,750.00
Date of Receipt: 2018-03-01
Address of Company: Microsoft, One Microsoft Way

2023-01-25 19:31:10,810 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11,750.00 Date of Receipt: 2018-03-01 Address of Company: Microsoft, One Microsoft Way
2023-01-25 19:31:10,810 - __main__ - INFO - 96 - <module>() - Final prediction for document 33: {'company': 'Microsoft', 'date': '2018-01-30', 'address': 'Microsoft, One Microsoft Way', 'total': '11,750.00 Date of Receipt: 2018-03-01 Address of Company: Microsoft, One Microsoft Way'}
2023-01-25 19:31:10,812 - __main__ - INFO - 92 - <module>() - Predicting document 34...
2023-01-25 19:31:17,559 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 07/11/2017
Address of Company: 47100 Puchong, Kuala Lumpur

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

The below code is useful for parsing XML data, in this example we extract the company name and data by using regex in Java.

Code of the Example

import java.io.IOException;
import java.
2023-01-25 19:31:17,560 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:17,561 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:17,561 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:17,561 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:17,562 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:17,562 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  07/11/2017

2023-01-25 19:31:17,562 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 07/11/2017
2023-01-25 19:31:17,563 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:17,563 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  47100 Puchong, Kuala Lumpur

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

The below code is useful for parsing XML data, in this example we extract the company name and data by using regex in Java.

Code of the Example

import java.io.IOException;
import java.
2023-01-25 19:31:17,563 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 47100 Puchong, Kuala Lumpur Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". The below code is useful for parsing XML data, in this example we extract the company name and data by using regex in Java. Code of the Example import java.io.IOException; import java.
2023-01-25 19:31:17,563 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:17,564 - __main__ - INFO - 96 - <module>() - Final prediction for document 34: {'date': '07/11/2017', 'address': '47100 Puchong, Kuala Lumpur Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". The below code is useful for parsing XML data, in this example we extract the company name and data by using regex in Java. Code of the Example import java.io.IOException; import java.'}
2023-01-25 19:31:17,565 - __main__ - INFO - 92 - <module>() - Predicting document 35...
2023-01-25 19:31:23,967 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Ngee Ann Polytechnic
Date of Receipt: 21/05/2017
Address of Company: 14 Ngee Ann Road
Street Address: 14 Ngee Ann Road
City/Town/Postal Code: 08-4023, Singapore
Country: SINGAPORE
Sub-total: 108.00
GST: 3.00
Cash: 108.00
Total: 115.00
Tax: 3.00
Total: 118.00
Change: 0.00
Goods sold are not returnable, thank you.
2023-01-25 19:31:23,968 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:23,968 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:23,969 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Ngee Ann Polytechnic

2023-01-25 19:31:23,969 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Ngee Ann Polytechnic
2023-01-25 19:31:23,969 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:23,970 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/05/2017

2023-01-25 19:31:23,970 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/05/2017
2023-01-25 19:31:23,970 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:23,971 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14 Ngee Ann Road
Street Address: 14 Ngee Ann Road
City/Town/Postal Code: 08-4023, Singapore
Country: SINGAPORE
Sub-
2023-01-25 19:31:23,971 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14 Ngee Ann Road Street Address: 14 Ngee Ann Road City/Town/Postal Code: 08-4023, Singapore Country: SINGAPORE Sub-
2023-01-25 19:31:23,971 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:23,972 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  108.00
GST: 3.00
Cash: 108.00

2023-01-25 19:31:23,972 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 108.00 GST: 3.00 Cash: 108.00
2023-01-25 19:31:23,972 - __main__ - INFO - 96 - <module>() - Final prediction for document 35: {'company': 'Ngee Ann Polytechnic', 'date': '21/05/2017', 'address': '14 Ngee Ann Road Street Address: 14 Ngee Ann Road City/Town/Postal Code: 08-4023, Singapore Country: SINGAPORE Sub-', 'total': '108.00 GST: 3.00 Cash: 108.00'}
2023-01-25 19:31:23,974 - __main__ - INFO - 92 - <module>() - Predicting document 36...
2023-01-25 19:31:31,073 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  FOMEC
Date of Receipt:
Address of Company: KEPONG BARU, KUALA LUMPUR
Total:
:

The following text is copied from the document. Please place the text in your response, and remove the key.

Pelancong Berani

Pelancong Berani

Mari kita Pelancong Berani

Pelancong Berani: Mengenai Pelancong Berani

Pelancong Berani adalah sebuah kegiatan beriklan yang dinikmati oleh
2023-01-25 19:31:31,076 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:31,076 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:31,077 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  FOMEC

2023-01-25 19:31:31,077 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: FOMEC
2023-01-25 19:31:31,078 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:31,079 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:31,079 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:31,080 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:31,080 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KEPONG BARU, KUALA LUMPUR

2023-01-25 19:31:31,081 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KEPONG BARU, KUALA LUMPUR
2023-01-25 19:31:31,081 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:31,082 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
:

The following text is copied from the document. Please place the text in your response, and remove the key.

Pelancong Berani

Pelancong Berani

Mari kita Pelancong Berani

Pelancong Berani: Mengenai Pelancong Berani

Pelancong Berani adalah sebuah kegiatan beriklan yang dinikmati oleh
2023-01-25 19:31:31,082 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: : The following text is copied from the document. Please place the text in your response, and remove the key. Pelancong Berani Pelancong Berani Mari kita Pelancong Berani Pelancong Berani: Mengenai Pelancong Berani Pelancong Berani adalah sebuah kegiatan beriklan yang dinikmati oleh
2023-01-25 19:31:31,083 - __main__ - INFO - 96 - <module>() - Final prediction for document 36: {'company': 'FOMEC', 'address': 'KEPONG BARU, KUALA LUMPUR', 'total': ': The following text is copied from the document. Please place the text in your response, and remove the key. Pelancong Berani Pelancong Berani Mari kita Pelancong Berani Pelancong Berani: Mengenai Pelancong Berani Pelancong Berani adalah sebuah kegiatan beriklan yang dinikmati oleh'}
2023-01-25 19:31:31,086 - __main__ - INFO - 92 - <module>() - Predicting document 37...
2023-01-25 19:31:37,365 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 20190729
Address of Company:
Total:

Key: Value
Company Name:
Date of Receipt: 20190730
Address of Company:
Total:

Key: Value
Company Name:
Date of Receipt: 20190731
Address of Company:
Total:

To:<|stop key|>

Key: Value
Company Name:
Date of Receipt: 20190729
Address of Company:
Total:
2023-01-25 19:31:37,368 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:37,369 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:37,370 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:37,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:37,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:37,372 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20190729

2023-01-25 19:31:37,372 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20190729
2023-01-25 19:31:37,373 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:37,373 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:37,373 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:37,374 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:37,374 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Key: Value
Company Name:
Date of Receipt: 20190730
Address of Company:

2023-01-25 19:31:37,374 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Key: Value Company Name: Date of Receipt: 20190730 Address of Company:
2023-01-25 19:31:37,375 - __main__ - INFO - 96 - <module>() - Final prediction for document 37: {'date': '20190729', 'total': 'Key: Value Company Name: Date of Receipt: 20190730 Address of Company:'}
2023-01-25 19:31:37,380 - __main__ - INFO - 92 - <module>() - Predicting document 38...
2023-01-25 19:31:44,478 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Amount

Extract "Name", "ID Number", "Address", "Amount", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Name: Name
ID Number: ID Number
Address: Address
Amount: Amount

Create a new document with the following data:

Key: Value
Name: Name
ID Number: ID Number
Address: Address

2023-01-25 19:31:44,479 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:44,479 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:44,479 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:31:44,479 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:31:44,479 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:44,479 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:31:44,480 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:31:44,480 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:44,480 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:31:44,480 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:31:44,480 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:44,480 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Amount

Extract "Name", "ID Number", "Address", "Amount", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Name: Name
ID Number: ID Number
Address: Address
Amount: Amount

Create a new document with the following data:

Key: Value
Name: Name
ID Number: ID Number
Address: Address

2023-01-25 19:31:44,481 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Amount Extract "Name", "ID Number", "Address", "Amount", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Name: Name ID Number: ID Number Address: Address Amount: Amount Create a new document with the following data: Key: Value Name: Name ID Number: ID Number Address: Address
2023-01-25 19:31:44,481 - __main__ - INFO - 96 - <module>() - Final prediction for document 38: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Amount Extract "Name", "ID Number", "Address", "Amount", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Name: Name ID Number: ID Number Address: Address Amount: Amount Create a new document with the following data: Key: Value Name: Name ID Number: ID Number Address: Address'}
2023-01-25 19:31:44,483 - __main__ - INFO - 92 - <module>() - Predicting document 39...
2023-01-25 19:31:51,921 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

To use this, extract the above text (between "Key: Value" brackets) as value "text" and place a new row in the spreadsheet:

(a) Key
(b) Value
(c) Text
(d)
(e) Company Name
(f) Date of Receipt
(g) Address of Company
(h) Total

I have been able to extract the document ID but am unable to extract the remaining data.

A:

Instead of "extract" use "get".
2023-01-25 19:31:51,922 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:31:51,923 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:31:51,924 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:51,925 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:51,925 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:31:51,926 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:51,926 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:51,927 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:31:51,927 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:31:51,928 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:31:51,929 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:31:51,930 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

To use this, extract the above text (between "Key: Value" brackets) as value "text" and place a new row in the spreadsheet:

(a) Key
(b) Value
(c) Text
(d)
(e) Company Name
(f) Date of Receipt
(g) Address of Company
(h) Total

I have been able to extract the document ID but am unable to extract the remaining data.

A:

Instead of "extract" use "get".
2023-01-25 19:31:51,930 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: To use this, extract the above text (between "Key: Value" brackets) as value "text" and place a new row in the spreadsheet: (a) Key (b) Value (c) Text (d) (e) Company Name (f) Date of Receipt (g) Address of Company (h) Total I have been able to extract the document ID but am unable to extract the remaining data. A: Instead of "extract" use "get".
2023-01-25 19:31:51,931 - __main__ - INFO - 96 - <module>() - Final prediction for document 39: {'total': 'To use this, extract the above text (between "Key: Value" brackets) as value "text" and place a new row in the spreadsheet: (a) Key (b) Value (c) Text (d) (e) Company Name (f) Date of Receipt (g) Address of Company (h) Total I have been able to extract the document ID but am unable to extract the remaining data. A: Instead of "extract" use "get".'}
2023-01-25 19:31:51,934 - __main__ - INFO - 92 - <module>() - Predicting document 40...
2023-01-25 19:32:00,207 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>

This sample demonstrates how you can use NDoc for simple parsing of a PDF document and extracting key-value pairs from it.

If you need to parse PDF on the server side then you will need to use another parser that is able to do this (e.g. iText or iTextSharp).
If you need to parse a PDF which is served via HTTP, i.e. as a byte array, and you do not want to use the iText PDF parser, then you can use the JPDF
2023-01-25 19:32:00,209 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:00,210 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:00,210 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:00,211 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:00,211 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:00,212 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:00,212 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:00,213 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:00,213 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:00,214 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:00,214 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:00,215 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

This sample demonstrates how you can use NDoc for simple parsing of a PDF document and extracting key-value pairs from it.

If you need to parse PDF on the server side then you will need to use another parser that is able to do this (e.g. iText or iTextSharp).
If you need to parse a PDF which is served via HTTP, i.e. as a byte array, and you do not want to use the iText PDF parser, then you can use the JPDF
2023-01-25 19:32:00,215 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> This sample demonstrates how you can use NDoc for simple parsing of a PDF document and extracting key-value pairs from it. If you need to parse PDF on the server side then you will need to use another parser that is able to do this (e.g. iText or iTextSharp). If you need to parse a PDF which is served via HTTP, i.e. as a byte array, and you do not want to use the iText PDF parser, then you can use the JPDF
2023-01-25 19:32:00,216 - __main__ - INFO - 96 - <module>() - Final prediction for document 40: {'total': '<|stop key|> This sample demonstrates how you can use NDoc for simple parsing of a PDF document and extracting key-value pairs from it. If you need to parse PDF on the server side then you will need to use another parser that is able to do this (e.g. iText or iTextSharp). If you need to parse a PDF which is served via HTTP, i.e. as a byte array, and you do not want to use the iText PDF parser, then you can use the JPDF'}
2023-01-25 19:32:00,219 - __main__ - INFO - 92 - <module>() - Predicting document 41...
2023-01-25 19:32:06,789 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Bar Wang Rice@Permas Jaya
Date of Receipt: 23 May 2018
Address of Company: Jalan Bandaraya Klang, 53100 Kuala Lumpur
Total: 7.36
GST @ 6%: 0.44

Use:

Write a program or a function that returns this input.
If you are writing a program, it should ask the user for a string, and then prompt them for the three fields (including tax). The program should read the string, and return the inputted fields.

Input

A single string of the tax invoice data
2023-01-25 19:32:06,789 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:06,790 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:06,790 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bar Wang Rice@Permas Jaya

2023-01-25 19:32:06,790 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bar Wang Rice@Permas Jaya
2023-01-25 19:32:06,790 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:06,791 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23 May 2018

2023-01-25 19:32:06,791 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23 May 2018
2023-01-25 19:32:06,791 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:06,791 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Bandaraya Klang, 53100 Kuala Lumpur

2023-01-25 19:32:06,792 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Bandaraya Klang, 53100 Kuala Lumpur
2023-01-25 19:32:06,792 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:06,792 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7.36
GST @ 6%: 0.44

Use:

Write a program or a function that returns this input.
If you are writing a program, it should ask the user for a string, and then prompt them for the three fields (including tax). The program should read the string, and return the inputted fields.

Input

A single string of the tax invoice data
2023-01-25 19:32:06,792 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7.36 GST @ 6%: 0.44 Use: Write a program or a function that returns this input. If you are writing a program, it should ask the user for a string, and then prompt them for the three fields (including tax). The program should read the string, and return the inputted fields. Input A single string of the tax invoice data
2023-01-25 19:32:06,792 - __main__ - INFO - 96 - <module>() - Final prediction for document 41: {'company': 'Bar Wang Rice@Permas Jaya', 'date': '23 May 2018', 'address': 'Jalan Bandaraya Klang, 53100 Kuala Lumpur', 'total': '7.36 GST @ 6%: 0.44 Use: Write a program or a function that returns this input. If you are writing a program, it should ask the user for a string, and then prompt them for the three fields (including tax). The program should read the string, and return the inputted fields. Input A single string of the tax invoice data'}
2023-01-25 19:32:06,794 - __main__ - INFO - 92 - <module>() - Predicting document 42...
2023-01-25 19:32:09,776 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total Amount
2023-01-25 19:32:09,777 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:09,778 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:09,779 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:32:09,779 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:32:09,780 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:09,780 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:32:09,781 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:32:09,781 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:09,781 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:32:09,782 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:32:09,782 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:09,783 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total Amount
2023-01-25 19:32:09,783 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Amount
2023-01-25 19:32:09,784 - __main__ - INFO - 96 - <module>() - Final prediction for document 42: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Amount'}
2023-01-25 19:32:09,786 - __main__ - INFO - 92 - <module>() - Predicting document 43...
2023-01-25 19:32:11,235 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Stop key:

2023-01-25 19:32:11,237 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:11,238 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:11,239 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:11,239 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:11,240 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:11,240 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:11,241 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:11,241 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:11,242 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:11,242 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:11,243 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:11,243 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Stop key:

2023-01-25 19:32:11,244 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Stop key:
2023-01-25 19:32:11,244 - __main__ - INFO - 96 - <module>() - Final prediction for document 43: {'total': 'Stop key:'}
2023-01-25 19:32:11,247 - __main__ - INFO - 92 - <module>() - Predicting document 44...
2023-01-25 19:32:19,148 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <COMPANY NAME>
Date of Receipt: 04/09/2018
Address of Company:
Total: 1000

Output:
1001 | A1 | 090981-985, NILAM INDUSTRIAL SEKSYEN 9, KANJAR PIE STREET, 43300 JELAPANG, SELANGOR
1011 | A2 | 090981-989, NILAM INDUSTRIAL SEKSYEN 9, KANJAR PIE STREET, 43300 JELAPANG, SELANGOR

I have tried
2023-01-25 19:32:19,151 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:19,151 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:19,152 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <COMPANY NAME>

2023-01-25 19:32:19,153 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <COMPANY NAME>
2023-01-25 19:32:19,154 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:19,154 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  04/09/2018

2023-01-25 19:32:19,155 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 04/09/2018
2023-01-25 19:32:19,156 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:19,156 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:19,157 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:19,157 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:19,157 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1000

Output:
1001 | A1 | 090981-985, NILAM INDUSTRIAL SEKSYEN 9, KANJAR PIE STREET, 43300 JELAPANG, SELANGOR
1011 | A2 | 090981-989, NILAM INDUSTRIAL SEKSYEN 9, KANJAR PIE STREET, 43300 JELAPANG, SELANGOR

I have tried
2023-01-25 19:32:19,158 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1000 Output: 1001 | A1 | 090981-985, NILAM INDUSTRIAL SEKSYEN 9, KANJAR PIE STREET, 43300 JELAPANG, SELANGOR 1011 | A2 | 090981-989, NILAM INDUSTRIAL SEKSYEN 9, KANJAR PIE STREET, 43300 JELAPANG, SELANGOR I have tried
2023-01-25 19:32:19,159 - __main__ - INFO - 96 - <module>() - Final prediction for document 44: {'company': '<COMPANY NAME>', 'date': '04/09/2018', 'total': '1000 Output: 1001 | A1 | 090981-985, NILAM INDUSTRIAL SEKSYEN 9, KANJAR PIE STREET, 43300 JELAPANG, SELANGOR 1011 | A2 | 090981-989, NILAM INDUSTRIAL SEKSYEN 9, KANJAR PIE STREET, 43300 JELAPANG, SELANGOR I have tried'}
2023-01-25 19:32:19,161 - __main__ - INFO - 92 - <module>() - Predicting document 45...
2023-01-25 19:32:26,528 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 2018-01-10
Address of Company: 19/3, Jalan Kuching, 10800 Cheras, Selangor
Total: null

I would like to extract all the values in the column "Date of Receipt" into one list that has key-value pairs in this format "year/month/day Hour:Minute:Second".
Any help would be appreciated.
Thank you

A:

I got it. There's no need to import the data into Python. I just did it with Excel. Here's the link to the spreadsheet
2023-01-25 19:32:26,529 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:26,529 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:26,530 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:32:26,531 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:32:26,531 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:26,532 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-01-10

2023-01-25 19:32:26,532 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-01-10
2023-01-25 19:32:26,533 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:26,533 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19/3, Jalan Kuching, 10800 Cheras, Selangor

2023-01-25 19:32:26,534 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19/3, Jalan Kuching, 10800 Cheras, Selangor
2023-01-25 19:32:26,534 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:26,535 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

I would like to extract all the values in the column "Date of Receipt" into one list that has key-value pairs in this format "year/month/day Hour:Minute:Second".
Any help would be appreciated.
Thank you

A:

I got it. There's no need to import the data into Python. I just did it with Excel. Here's the link to the spreadsheet
2023-01-25 19:32:26,535 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null I would like to extract all the values in the column "Date of Receipt" into one list that has key-value pairs in this format "year/month/day Hour:Minute:Second". Any help would be appreciated. Thank you A: I got it. There's no need to import the data into Python. I just did it with Excel. Here's the link to the spreadsheet
2023-01-25 19:32:26,535 - __main__ - INFO - 96 - <module>() - Final prediction for document 45: {'date': '2018-01-10', 'address': '19/3, Jalan Kuching, 10800 Cheras, Selangor'}
2023-01-25 19:32:26,540 - __main__ - INFO - 92 - <module>() - Predicting document 46...
2023-01-25 19:32:33,590 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Name of Taxpayer
Adress: Adress
Amount: Tax Amount
Start Date: Date of Receipt
End Date: Date of Tax Invoice
Tax Type: TU
Tax Year: YR
Tax Code:
Tax Rate:
Tax Period:

Start date: 05/04/2015
End Date: 31/03/2016
TU
2016
Y1
12
2
1.0000
JKT
CIRCA 500,000/SURAT

Output:
Company Name :

Start date: 05/04/2015
End Date: 31
2023-01-25 19:32:33,592 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:33,592 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:33,593 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Name of Taxpayer
Adress: Adress
Amount: Tax Amount
Start Date: Date of Receipt
End Date: Date of Tax Invoice
Tax Type: TU
Tax Year: YR
Tax Code:
Tax Rate:
Tax Period:

Start date: 05/04/2015
End Date: 31/03/2016
TU
2016
Y1
12
2
1.0000
JKT
CIRCA 500,000/SURAT

Output:
Company Name :

Start date: 05/04/2015
End Date: 31
2023-01-25 19:32:33,593 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Name of Taxpayer Adress: Adress Amount: Tax Amount Start Date: Date of Receipt End Date: Date of Tax Invoice Tax Type: TU Tax Year: YR Tax Code: Tax Rate: Tax Period: Start date: 05/04/2015 End Date: 31/03/2016 TU 2016 Y1 12 2 1.0000 JKT CIRCA 500,000/SURAT Output: Company Name : Start date: 05/04/2015 End Date: 31
2023-01-25 19:32:33,593 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:33,594 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:33,594 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:33,594 - __main__ - INFO - 96 - <module>() - Final prediction for document 46: {'company': 'Name of Taxpayer Adress: Adress Amount: Tax Amount Start Date: Date of Receipt End Date: Date of Tax Invoice Tax Type: TU Tax Year: YR Tax Code: Tax Rate: Tax Period: Start date: 05/04/2015 End Date: 31/03/2016 TU 2016 Y1 12 2 1.0000 JKT CIRCA 500,000/SURAT Output: Company Name : Start date: 05/04/2015 End Date: 31'}
2023-01-25 19:32:33,597 - __main__ - INFO - 92 - <module>() - Predicting document 47...
2023-01-25 19:32:40,625 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name you are registering. For new registrants, enter in the form: "New Co." and follow with the name of the company.
Date of Receipt: The date the company received the company name certificate and the fees.
Address of Company: Street, city, town, province or state, postal code.
Total: Total price of Company name filing fee.
Note: If you are registering for a Company name, enter in the box: "Company Name Fee" and the amount you want to pay.
If you are submitting a name transfer, enter in the box: "Company Name Registration Fee
2023-01-25 19:32:40,626 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:40,627 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:40,628 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name you are registering. For new registrants, enter in the form: "New Co." and follow with the name of the company.

2023-01-25 19:32:40,628 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name you are registering. For new registrants, enter in the form: "New Co." and follow with the name of the company.
2023-01-25 19:32:40,629 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:40,629 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date the company received the company name certificate and the fees.

2023-01-25 19:32:40,630 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date the company received the company name certificate and the fees.
2023-01-25 19:32:40,630 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:40,631 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Street, city, town, province or state, postal code.

2023-01-25 19:32:40,631 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Street, city, town, province or state, postal code.
2023-01-25 19:32:40,632 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:40,632 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total price of Company name filing fee.
Note: If you are registering for a Company name, enter in the box: "Company Name Fee" and the amount you want to pay.
If you are submitting a name transfer, enter in the box: "Company Name Registration Fee
2023-01-25 19:32:40,633 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total price of Company name filing fee. Note: If you are registering for a Company name, enter in the box: "Company Name Fee" and the amount you want to pay. If you are submitting a name transfer, enter in the box: "Company Name Registration Fee
2023-01-25 19:32:40,633 - __main__ - INFO - 96 - <module>() - Final prediction for document 47: {'company': 'Company name you are registering. For new registrants, enter in the form: "New Co." and follow with the name of the company.', 'date': 'The date the company received the company name certificate and the fees.', 'address': 'Street, city, town, province or state, postal code.', 'total': 'Total price of Company name filing fee. Note: If you are registering for a Company name, enter in the box: "Company Name Fee" and the amount you want to pay. If you are submitting a name transfer, enter in the box: "Company Name Registration Fee'}
2023-01-25 19:32:40,637 - __main__ - INFO - 92 - <module>() - Predicting document 48...
2023-01-25 19:32:43,133 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
2023-01-25 19:32:43,135 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:43,135 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:43,136 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:32:43,136 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:32:43,137 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:43,138 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:32:43,138 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:32:43,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:43,140 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:32:43,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:32:43,140 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:43,141 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:32:43,141 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:32:43,142 - __main__ - INFO - 96 - <module>() - Final prediction for document 48: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:32:43,145 - __main__ - INFO - 92 - <module>() - Predicting document 49...
2023-01-25 19:32:45,595 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC Inc.
Date of Receipt: 2017-12-29 11:00:00
Address of Company: Jalan Air Panas
Total: 10.60
2023-01-25 19:32:45,597 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:45,597 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:45,598 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC Inc.

2023-01-25 19:32:45,598 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Inc.
2023-01-25 19:32:45,599 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:45,599 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2017-12-29 11:00:00

2023-01-25 19:32:45,600 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017-12-29 11:00:00
2023-01-25 19:32:45,600 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:45,600 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Air Panas

2023-01-25 19:32:45,601 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Air Panas
2023-01-25 19:32:45,601 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:45,602 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10.60
2023-01-25 19:32:45,602 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10.60
2023-01-25 19:32:45,602 - __main__ - INFO - 96 - <module>() - Final prediction for document 49: {'company': 'ABC Inc.', 'date': '2017-12-29 11:00:00', 'address': 'Jalan Air Panas', 'total': '10.60'}
2023-01-25 19:32:45,606 - __main__ - INFO - 92 - <module>() - Predicting document 50...
2023-01-25 19:32:53,908 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: 14 February, 2018
Address of Company:
Total: 765.48
|||

1 / 2-page document, 1st page with an Order or Invoice, 2nd page with a Statement

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: Company Name
Date of Receipt: 28 February, 2018
Address of
2023-01-25 19:32:53,910 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:32:53,911 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:32:53,911 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:32:53,912 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:32:53,913 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:32:53,914 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14 February, 2018

2023-01-25 19:32:53,914 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14 February, 2018
2023-01-25 19:32:53,915 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:32:53,916 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:32:53,917 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:32:53,917 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:32:53,918 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  765.48
|||

1 / 2-page document, 1st page with an Order or Invoice, 2nd page with a Statement

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: Company Name
Date of Receipt: 28 February, 2018
Address of
2023-01-25 19:32:53,919 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 765.48 ||| 1 / 2-page document, 1st page with an Order or Invoice, 2nd page with a Statement Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: Company Name Date of Receipt: 28 February, 2018 Address of
2023-01-25 19:32:53,919 - __main__ - INFO - 96 - <module>() - Final prediction for document 50: {'company': 'Company Name', 'date': '14 February, 2018', 'total': '765.48 ||| 1 / 2-page document, 1st page with an Order or Invoice, 2nd page with a Statement Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: Company Name Date of Receipt: 28 February, 2018 Address of'}
2023-01-25 19:32:53,923 - __main__ - INFO - 92 - <module>() - Predicting document 51...
2023-01-25 19:33:00,425 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  X.B.L. Co., Ltd.
Date of Receipt: 31/03/16
Address of Company: 17, Taman Tunku, Taman Bukit Perak
Total: 2,300,000
: null
:

(END EXTRACT)

I'm trying to get the result:
"X.B.L. Co., Ltd.","31/03/16","17, Taman Tunku, Taman Bukit Perak",2300000

Any ideas?

A:

You can use this:
let
2023-01-25 19:33:00,426 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:00,426 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:00,426 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  X.B.L. Co., Ltd.

2023-01-25 19:33:00,426 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: X.B.L. Co., Ltd.
2023-01-25 19:33:00,427 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:00,427 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/03/16

2023-01-25 19:33:00,427 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/03/16
2023-01-25 19:33:00,427 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:00,427 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17, Taman Tunku, Taman Bukit Perak

2023-01-25 19:33:00,428 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17, Taman Tunku, Taman Bukit Perak
2023-01-25 19:33:00,428 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:00,428 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2,300,000
: null
:

(END EXTRACT)

I'm trying to get the result:
"X.B.L. Co., Ltd.","31/03/16","17, Taman Tunku, Taman Bukit Perak",2300000

Any ideas?

A:

You can use this:
let
2023-01-25 19:33:00,428 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2,300,000 : null : (END EXTRACT) I'm trying to get the result: "X.B.L. Co., Ltd.","31/03/16","17, Taman Tunku, Taman Bukit Perak",2300000 Any ideas? A: You can use this: let
2023-01-25 19:33:00,428 - __main__ - INFO - 96 - <module>() - Final prediction for document 51: {'company': 'X.B.L. Co., Ltd.', 'date': '31/03/16', 'address': '17, Taman Tunku, Taman Bukit Perak', 'total': '2,300,000 : null : (END EXTRACT) I\'m trying to get the result: "X.B.L. Co., Ltd.","31/03/16","17, Taman Tunku, Taman Bukit Perak",2300000 Any ideas? A: You can use this: let'}
2023-01-25 19:33:00,429 - __main__ - INFO - 92 - <module>() - Predicting document 52...
2023-01-25 19:33:07,149 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
(null)
Date of Receipt:
(null)
Address of Company:
(null)
Total:
(null)

To get the average value

Click on "Statistics" at the top of the Excel spreadsheet to expand the "Data" tab. In the "Data" tab under "Column Info" Click on the dropdown list and select "Numeric" then click on the "Stats" tab.

Click on the "Statistic" tab and enter "Ave" in the "Statistic" text box and click on the "Statistic" button

Double click on
2023-01-25 19:33:07,150 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:07,151 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:07,152 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
(null)

2023-01-25 19:33:07,152 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null)
2023-01-25 19:33:07,153 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:07,153 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
(null)

2023-01-25 19:33:07,154 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null)
2023-01-25 19:33:07,154 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:07,155 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
(null)

2023-01-25 19:33:07,155 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null)
2023-01-25 19:33:07,156 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:07,156 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
(null)

To get the average value

Click on "Statistics" at the top of the Excel spreadsheet to expand the "Data" tab. In the "Data" tab under "Column Info" Click on the dropdown list and select "Numeric" then click on the "Stats" tab.

Click on the "Statistic" tab and enter "Ave" in the "Statistic" text box and click on the "Statistic" button

Double click on
2023-01-25 19:33:07,157 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null) To get the average value Click on "Statistics" at the top of the Excel spreadsheet to expand the "Data" tab. In the "Data" tab under "Column Info" Click on the dropdown list and select "Numeric" then click on the "Stats" tab. Click on the "Statistic" tab and enter "Ave" in the "Statistic" text box and click on the "Statistic" button Double click on
2023-01-25 19:33:07,158 - __main__ - INFO - 96 - <module>() - Final prediction for document 52: {'company': '(null)', 'date': '(null)', 'address': '(null)', 'total': '(null) To get the average value Click on "Statistics" at the top of the Excel spreadsheet to expand the "Data" tab. In the "Data" tab under "Column Info" Click on the dropdown list and select "Numeric" then click on the "Stats" tab. Click on the "Statistic" tab and enter "Ave" in the "Statistic" text box and click on the "Statistic" button Double click on'}
2023-01-25 19:33:07,160 - __main__ - INFO - 92 - <module>() - Predicting document 53...
2023-01-25 19:33:14,280 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  S.R.B.M.B.S
Date of Receipt: 10/06/2018 15:09:00
Address of Company: 10/06/2018 16:12:00
Total: 120.00
TOTAL (RM) : 1,200.00

#3.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: A
2023-01-25 19:33:14,282 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:14,283 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:14,283 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S.R.B.M.B.S

2023-01-25 19:33:14,284 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S.R.B.M.B.S
2023-01-25 19:33:14,284 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:14,284 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10/06/2018 15:09:00

2023-01-25 19:33:14,285 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10/06/2018 15:09:00
2023-01-25 19:33:14,285 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:14,285 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10/06/2018 16:12:00

2023-01-25 19:33:14,285 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10/06/2018 16:12:00
2023-01-25 19:33:14,286 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:14,286 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  120.00
TOTAL (RM) : 1,200.00

#3.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: A
2023-01-25 19:33:14,286 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 120.00 TOTAL (RM) : 1,200.00 #3. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: A
2023-01-25 19:33:14,286 - __main__ - INFO - 96 - <module>() - Final prediction for document 53: {'company': 'S.R.B.M.B.S', 'date': '10/06/2018 15:09:00', 'address': '10/06/2018 16:12:00', 'total': '120.00 TOTAL (RM) : 1,200.00 #3. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: A'}
2023-01-25 19:33:14,291 - __main__ - INFO - 92 - <module>() - Predicting document 54...
2023-01-25 19:33:21,363 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
The code above:
* Prints the above values to the console
* Prints the total value without GST to the console
* Prints the total value with GST to the console
* Prints the remaining amount after the amount was deducted to the console
* Prints the amount that was paid to the console
* Prints the amount that was remained unpaid to the console
* Prints the date of the invoice to the console
* The format of the invoice is as follows
* "Header: Invoice Name" (This is automatically
2023-01-25 19:33:21,364 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:21,364 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:21,365 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:21,365 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:21,365 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:21,366 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:21,366 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:21,366 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:21,367 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:21,367 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:21,367 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:21,368 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
The code above:
* Prints the above values to the console
* Prints the total value without GST to the console
* Prints the total value with GST to the console
* Prints the remaining amount after the amount was deducted to the console
* Prints the amount that was paid to the console
* Prints the amount that was remained unpaid to the console
* Prints the date of the invoice to the console
* The format of the invoice is as follows
* "Header: Invoice Name" (This is automatically
2023-01-25 19:33:21,368 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The code above: * Prints the above values to the console * Prints the total value without GST to the console * Prints the total value with GST to the console * Prints the remaining amount after the amount was deducted to the console * Prints the amount that was paid to the console * Prints the amount that was remained unpaid to the console * Prints the date of the invoice to the console * The format of the invoice is as follows * "Header: Invoice Name" (This is automatically
2023-01-25 19:33:21,368 - __main__ - INFO - 96 - <module>() - Final prediction for document 54: {'total': 'The code above: * Prints the above values to the console * Prints the total value without GST to the console * Prints the total value with GST to the console * Prints the remaining amount after the amount was deducted to the console * Prints the amount that was paid to the console * Prints the amount that was remained unpaid to the console * Prints the date of the invoice to the console * The format of the invoice is as follows * "Header: Invoice Name" (This is automatically'}
2023-01-25 19:33:21,370 - __main__ - INFO - 92 - <module>() - Predicting document 55...
2023-01-25 19:33:23,156 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:33:23,158 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:23,158 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:23,159 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:23,159 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:23,159 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:23,159 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:23,160 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:23,160 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:23,160 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:23,160 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:23,161 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:23,161 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:33:23,161 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:23,161 - __main__ - INFO - 96 - <module>() - Final prediction for document 55: {}
2023-01-25 19:33:23,163 - __main__ - INFO - 92 - <module>() - Predicting document 56...
2023-01-25 19:33:30,722 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Address of Company:
Date of Receipt:
Total: <|stop key|>
1. <|stop key|>
2. <|stop key|>
3. <|stop key|>
4. <|stop key|>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name:
Address of Company:
Date of Receipt
2023-01-25 19:33:30,722 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:30,722 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:30,722 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Address of Company:

2023-01-25 19:33:30,722 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company:
2023-01-25 19:33:30,722 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:30,723 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Total: <|stop key|>
1. <|stop key|>
2. <|stop key|>
3. <|stop key|>
4. <|stop key|>

Extract "Company Name", "Date of Receipt", "
2023-01-25 19:33:30,723 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total: <|stop key|> 1. <|stop key|> 2. <|stop key|> 3. <|stop key|> 4. <|stop key|> Extract "Company Name", "Date of Receipt", "
2023-01-25 19:33:30,723 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:30,723 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date of Receipt:

2023-01-25 19:33:30,723 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt:
2023-01-25 19:33:30,723 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:30,723 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>
1. <|stop key|>
2. <|stop key|>
3. <|stop key|>
4. <|stop key|>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name:
Address of Company:
Date of Receipt
2023-01-25 19:33:30,723 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> 1. <|stop key|> 2. <|stop key|> 3. <|stop key|> 4. <|stop key|> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: Address of Company: Date of Receipt
2023-01-25 19:33:30,723 - __main__ - INFO - 96 - <module>() - Final prediction for document 56: {'company': 'Address of Company:', 'date': 'Total: <|stop key|> 1. <|stop key|> 2. <|stop key|> 3. <|stop key|> 4. <|stop key|> Extract "Company Name", "Date of Receipt", "', 'address': 'Date of Receipt:', 'total': '<|stop key|> 1. <|stop key|> 2. <|stop key|> 3. <|stop key|> 4. <|stop key|> Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: Address of Company: Date of Receipt'}
2023-01-25 19:33:30,724 - __main__ - INFO - 92 - <module>() - Predicting document 57...
2023-01-25 19:33:37,641 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
||stop key||: Total

Example:
{"values":
[
["Company Name","Date of Receipt","Address of Company","Total"],
["WOLFER INDUSTRIES LTD","21-03-2018 11:42:30","Tunku Pudu, Jalan Kayu Baru, Seksyen 5, Bandar Baru Klang, 47400 Putrajaya, Malaysia","13,400","2.20","2","2.20
2023-01-25 19:33:37,642 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:37,643 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:37,643 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:33:37,644 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:33:37,644 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:37,644 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:33:37,645 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:33:37,645 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:37,645 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:33:37,645 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:33:37,646 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:37,646 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
||stop key||: Total

Example:
{"values":
[
["Company Name","Date of Receipt","Address of Company","Total"],
["WOLFER INDUSTRIES LTD","21-03-2018 11:42:30","Tunku Pudu, Jalan Kayu Baru, Seksyen 5, Bandar Baru Klang, 47400 Putrajaya, Malaysia","13,400","2.20","2","2.20
2023-01-25 19:33:37,646 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total ||stop key||: Total Example: {"values": [ ["Company Name","Date of Receipt","Address of Company","Total"], ["WOLFER INDUSTRIES LTD","21-03-2018 11:42:30","Tunku Pudu, Jalan Kayu Baru, Seksyen 5, Bandar Baru Klang, 47400 Putrajaya, Malaysia","13,400","2.20","2","2.20
2023-01-25 19:33:37,647 - __main__ - INFO - 96 - <module>() - Final prediction for document 57: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total ||stop key||: Total Example: {"values": [ ["Company Name","Date of Receipt","Address of Company","Total"], ["WOLFER INDUSTRIES LTD","21-03-2018 11:42:30","Tunku Pudu, Jalan Kayu Baru, Seksyen 5, Bandar Baru Klang, 47400 Putrajaya, Malaysia","13,400","2.20","2","2.20'}
2023-01-25 19:33:37,648 - __main__ - INFO - 92 - <module>() - Predicting document 58...
2023-01-25 19:33:39,690 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

2023-01-25 19:33:39,691 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:39,691 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:39,692 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:39,692 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:39,692 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:39,693 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:39,693 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:39,693 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:39,693 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:39,694 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:39,694 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:39,694 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:39,694 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:39,695 - __main__ - INFO - 96 - <module>() - Final prediction for document 58: {}
2023-01-25 19:33:39,696 - __main__ - INFO - 92 - <module>() - Predicting document 59...
2023-01-25 19:33:41,757 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:33:41,758 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:41,758 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:41,758 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:41,759 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:41,759 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:41,759 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:41,759 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:41,759 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:41,760 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:41,760 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:41,760 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:41,760 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:33:41,760 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:41,761 - __main__ - INFO - 96 - <module>() - Final prediction for document 59: {}
2023-01-25 19:33:41,762 - __main__ - INFO - 92 - <module>() - Predicting document 60...
2023-01-25 19:33:48,928 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Mutiara Rini Sdn Bhd
Date of Receipt: 21/6/2018 9:14:08 PM
Address of Company: Jalan Utama 34, Mutiara Rini, Skudai, Johor
Total: RM 2.60

Now that you are ready to train your model you will need to go to your terminal and execute the following:
$cd models/model
$python train.py --data-path train --model-name model --save-dir output --log-interval 5
--num-epochs 100
--epoch-size 20

2023-01-25 19:33:48,930 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:48,931 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:48,932 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Mutiara Rini Sdn Bhd

2023-01-25 19:33:48,933 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Mutiara Rini Sdn Bhd
2023-01-25 19:33:48,933 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:48,934 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/6/2018 9:14:08 PM

2023-01-25 19:33:48,934 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/6/2018 9:14:08 PM
2023-01-25 19:33:48,935 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:48,935 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Utama 34, Mutiara Rini, Skudai, Johor

2023-01-25 19:33:48,936 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Utama 34, Mutiara Rini, Skudai, Johor
2023-01-25 19:33:48,936 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:48,937 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 2.60

Now that you are ready to train your model you will need to go to your terminal and execute the following:
$cd models/model
$python train.py --data-path train --model-name model --save-dir output --log-interval 5
--num-epochs 100
--epoch-size 20

2023-01-25 19:33:48,937 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 2.60 Now that you are ready to train your model you will need to go to your terminal and execute the following: $cd models/model $python train.py --data-path train --model-name model --save-dir output --log-interval 5 --num-epochs 100 --epoch-size 20
2023-01-25 19:33:48,938 - __main__ - INFO - 96 - <module>() - Final prediction for document 60: {'company': 'Mutiara Rini Sdn Bhd', 'date': '21/6/2018 9:14:08 PM', 'address': 'Jalan Utama 34, Mutiara Rini, Skudai, Johor', 'total': 'RM 2.60 Now that you are ready to train your model you will need to go to your terminal and execute the following: $cd models/model $python train.py --data-path train --model-name model --save-dir output --log-interval 5 --num-epochs 100 --epoch-size 20'}
2023-01-25 19:33:48,941 - __main__ - INFO - 92 - <module>() - Predicting document 61...
2023-01-25 19:33:51,375 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 17-09-2017
Address of Company: NO. 14, JALAN JINJANG
Total: 48.00
NULL

2023-01-25 19:33:51,375 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:51,375 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:51,376 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:33:51,376 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:33:51,376 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:51,376 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17-09-2017

2023-01-25 19:33:51,376 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17-09-2017
2023-01-25 19:33:51,376 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:51,377 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NO. 14, JALAN JINJANG

2023-01-25 19:33:51,377 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NO. 14, JALAN JINJANG
2023-01-25 19:33:51,377 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:51,377 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  48.00
NULL

2023-01-25 19:33:51,377 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 48.00 NULL
2023-01-25 19:33:51,377 - __main__ - INFO - 96 - <module>() - Final prediction for document 61: {'date': '17-09-2017', 'address': 'NO. 14, JALAN JINJANG', 'total': '48.00 NULL'}
2023-01-25 19:33:51,379 - __main__ - INFO - 92 - <module>() - Predicting document 62...
2023-01-25 19:33:58,319 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  B-Best Restaurant
Date of Receipt: 19/04/2017 12:22:30 PM
Address of Company: Jalan SS4C/5,Petaling Jaya
Total: 14.85
GST: 0.84
|stop key|: 14.85

Output:

Company Name: B-Best Restaurant
Date of Receipt: 19/04/2017 12:22:30 PM
Address of Company: Jalan SS4C/5,Petaling Jaya
Total: 14.85
GST: 0.84
total = 14.85

2023-01-25 19:33:58,321 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:33:58,321 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:33:58,321 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  B-Best Restaurant

2023-01-25 19:33:58,321 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: B-Best Restaurant
2023-01-25 19:33:58,321 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:33:58,322 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19/04/2017 12:22:30 PM

2023-01-25 19:33:58,322 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19/04/2017 12:22:30 PM
2023-01-25 19:33:58,322 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:33:58,322 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan SS4C/5,Petaling Jaya

2023-01-25 19:33:58,322 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan SS4C/5,Petaling Jaya
2023-01-25 19:33:58,322 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:33:58,323 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14.85
GST: 0.84
|stop key|: 14.85

Output:

Company Name: B-Best Restaurant
Date of Receipt: 19/04/2017 12:22:30 PM
Address of Company: Jalan SS4C/5,Petaling Jaya

2023-01-25 19:33:58,323 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14.85 GST: 0.84 |stop key|: 14.85 Output: Company Name: B-Best Restaurant Date of Receipt: 19/04/2017 12:22:30 PM Address of Company: Jalan SS4C/5,Petaling Jaya
2023-01-25 19:33:58,323 - __main__ - INFO - 96 - <module>() - Final prediction for document 62: {'company': 'B-Best Restaurant', 'date': '19/04/2017 12:22:30 PM', 'address': 'Jalan SS4C/5,Petaling Jaya', 'total': '14.85 GST: 0.84 |stop key|: 14.85 Output: Company Name: B-Best Restaurant Date of Receipt: 19/04/2017 12:22:30 PM Address of Company: Jalan SS4C/5,Petaling Jaya'}
2023-01-25 19:33:58,324 - __main__ - INFO - 92 - <module>() - Predicting document 63...
2023-01-25 19:34:06,054 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  IBM Company Name
Date of Receipt: 25 September 2014
Address of Company:
Total: 10,000
If there is no total, put in null.

What is the total (for example $10,000) and when did the transaction occur?

What is the dollar amount of this transaction?

What is the date of this transaction?

Did this transaction take place in the US?

Did this transaction take place in the EU?

If yes, is the transaction a sales or a purchase?

Did this transaction take place in Germany?

Did this transaction take
2023-01-25 19:34:06,055 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:06,055 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:06,056 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  IBM Company Name

2023-01-25 19:34:06,056 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: IBM Company Name
2023-01-25 19:34:06,057 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:06,057 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25 September 2014

2023-01-25 19:34:06,057 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25 September 2014
2023-01-25 19:34:06,058 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:06,058 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:34:06,059 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:34:06,059 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:06,059 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10,000
If there is no total, put in null.

What is the total (for example $10,000) and when did the transaction occur?

What is the dollar amount of this transaction?

What is the date of this transaction?

Did this transaction take place in the US?

Did this transaction take place in the EU?

If yes, is the transaction a sales or a purchase?

Did this transaction take place in Germany?

Did this transaction take
2023-01-25 19:34:06,060 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10,000 If there is no total, put in null. What is the total (for example $10,000) and when did the transaction occur? What is the dollar amount of this transaction? What is the date of this transaction? Did this transaction take place in the US? Did this transaction take place in the EU? If yes, is the transaction a sales or a purchase? Did this transaction take place in Germany? Did this transaction take
2023-01-25 19:34:06,060 - __main__ - INFO - 96 - <module>() - Final prediction for document 63: {'company': 'IBM Company Name', 'date': '25 September 2014', 'total': '10,000 If there is no total, put in null. What is the total (for example $10,000) and when did the transaction occur? What is the dollar amount of this transaction? What is the date of this transaction? Did this transaction take place in the US? Did this transaction take place in the EU? If yes, is the transaction a sales or a purchase? Did this transaction take place in Germany? Did this transaction take'}
2023-01-25 19:34:06,063 - __main__ - INFO - 92 - <module>() - Predicting document 64...
2023-01-25 19:34:13,672 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Now let's split the above document by lines:

Set variable documentSet = document.getElementsByTagName("document")
Set variable lines = documentSet.getElementsByTagName("line")

The above code returns an array of JavaLanguge HTMLelements that contains each "line" in the original document.

Now for each "line" you have the above code

Read "key-value pairs" from "line"

Use Split function
2023-01-25 19:34:13,674 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:13,674 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:13,675 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:34:13,675 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:34:13,676 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:13,676 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:34:13,677 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:34:13,677 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:13,678 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:34:13,679 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:34:13,679 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:13,680 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Now let's split the above document by lines:

Set variable documentSet = document.getElementsByTagName("document")
Set variable lines = documentSet.getElementsByTagName("line")

The above code returns an array of JavaLanguge HTMLelements that contains each "line" in the original document.

Now for each "line" you have the above code

Read "key-value pairs" from "line"

Use Split function
2023-01-25 19:34:13,680 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Now let's split the above document by lines: Set variable documentSet = document.getElementsByTagName("document") Set variable lines = documentSet.getElementsByTagName("line") The above code returns an array of JavaLanguge HTMLelements that contains each "line" in the original document. Now for each "line" you have the above code Read "key-value pairs" from "line" Use Split function
2023-01-25 19:34:13,681 - __main__ - INFO - 96 - <module>() - Final prediction for document 64: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Now let\'s split the above document by lines: Set variable documentSet = document.getElementsByTagName("document") Set variable lines = documentSet.getElementsByTagName("line") The above code returns an array of JavaLanguge HTMLelements that contains each "line" in the original document. Now for each "line" you have the above code Read "key-value pairs" from "line" Use Split function'}
2023-01-25 19:34:13,684 - __main__ - INFO - 92 - <module>() - Predicting document 65...
2023-01-25 19:34:19,900 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The company name of the customer (e.g. Gardenia, Lotus, etc.)
Date of Receipt: The date when the tax invoice is registered (e.g. 12/02/2018)
Address of Company: Full address of the company (e.g. Lot 5, Jalan Meranti 5, Subang Jaya, Selangor)
Total: The sum of all quantities in the document
Notes: A value of "null" if the invoice does not provide any tax invoice comment.
2023-01-25 19:34:19,902 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:19,903 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:19,904 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The company name of the customer (e.g. Gardenia, Lotus, etc.)

2023-01-25 19:34:19,904 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The company name of the customer (e.g. Gardenia, Lotus, etc.)
2023-01-25 19:34:19,905 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:19,906 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date when the tax invoice is registered (e.g. 12/02/2018)

2023-01-25 19:34:19,906 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date when the tax invoice is registered (e.g. 12/02/2018)
2023-01-25 19:34:19,907 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:19,907 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Full address of the company (e.g. Lot 5, Jalan Meranti 5, Subang Jaya, Selangor)

2023-01-25 19:34:19,908 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Full address of the company (e.g. Lot 5, Jalan Meranti 5, Subang Jaya, Selangor)
2023-01-25 19:34:19,908 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:19,909 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The sum of all quantities in the document
Notes: A value of "null" if the invoice does not provide any tax invoice comment.
2023-01-25 19:34:19,909 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The sum of all quantities in the document Notes: A value of "null" if the invoice does not provide any tax invoice comment.
2023-01-25 19:34:19,909 - __main__ - INFO - 96 - <module>() - Final prediction for document 65: {'company': 'The company name of the customer (e.g. Gardenia, Lotus, etc.)', 'date': 'The date when the tax invoice is registered (e.g. 12/02/2018)', 'address': 'Full address of the company (e.g. Lot 5, Jalan Meranti 5, Subang Jaya, Selangor)', 'total': 'The sum of all quantities in the document Notes: A value of "null" if the invoice does not provide any tax invoice comment.'}
2023-01-25 19:34:19,912 - __main__ - INFO - 92 - <module>() - Predicting document 66...
2023-01-25 19:34:21,750 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:

Address of Company:

Total

2023-01-25 19:34:21,751 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:21,752 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:21,753 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:34:21,753 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:34:21,754 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:21,754 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:34:21,755 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:34:21,755 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:21,756 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Total

2023-01-25 19:34:21,756 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:34:21,757 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:21,757 - __main__ - INFO - 96 - <module>() - Final prediction for document 66: {'address': 'Total'}
2023-01-25 19:34:21,761 - __main__ - INFO - 92 - <module>() - Predicting document 67...
2023-01-25 19:34:29,145 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  AEON Maluri Bhd
Date of Receipt: 24/09/2018
Address of Company: Taman Maluri
Total: 9

Expected Output:
Company Name: AEON Maluri Bhd
Date of Receipt: 24/09/2018
Address of Company: Taman Maluri
Total: 9

I have got the first part (extract key-value pairs from document) working. I am trying to figure out how to check if the value matches "null" (null value indicates that there is no key-value pair, in other words the pair is missing). I have the
2023-01-25 19:34:29,147 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:29,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:29,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  AEON Maluri Bhd

2023-01-25 19:34:29,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: AEON Maluri Bhd
2023-01-25 19:34:29,149 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:29,150 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  24/09/2018

2023-01-25 19:34:29,150 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24/09/2018
2023-01-25 19:34:29,151 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:29,151 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Taman Maluri

2023-01-25 19:34:29,152 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Taman Maluri
2023-01-25 19:34:29,152 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:29,153 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9

Expected Output:
Company Name: AEON Maluri Bhd
Date of Receipt: 24/09/2018
Address of Company: Taman Maluri

2023-01-25 19:34:29,153 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9 Expected Output: Company Name: AEON Maluri Bhd Date of Receipt: 24/09/2018 Address of Company: Taman Maluri
2023-01-25 19:34:29,154 - __main__ - INFO - 96 - <module>() - Final prediction for document 67: {'company': 'AEON Maluri Bhd', 'date': '24/09/2018', 'address': 'Taman Maluri', 'total': '9 Expected Output: Company Name: AEON Maluri Bhd Date of Receipt: 24/09/2018 Address of Company: Taman Maluri'}
2023-01-25 19:34:29,157 - __main__ - INFO - 92 - <module>() - Predicting document 68...
2023-01-25 19:34:35,288 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <INPUT>
Date of Receipt: <INPUT>
Address of Company: <INPUT>
Total: <INPUT>
<INPUT>

The example below shows a possible output from the previous program:
Company Name, Date of Receipt, Address of Company, Total
Tesco Malaysia, 04-07-2018, ABDALLAH SQUARE, 87819.95
KFC, 04-07-2018, JALAN BIJARI, 1094.55

2023-01-25 19:34:35,289 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:35,290 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:35,291 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <INPUT>

2023-01-25 19:34:35,291 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <INPUT>
2023-01-25 19:34:35,292 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:35,292 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <INPUT>

2023-01-25 19:34:35,293 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <INPUT>
2023-01-25 19:34:35,293 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:35,294 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <INPUT>

2023-01-25 19:34:35,295 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <INPUT>
2023-01-25 19:34:35,295 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:35,296 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <INPUT>
<INPUT>

The example below shows a possible output from the previous program:
Company Name, Date of Receipt, Address of Company, Total
Tesco Malaysia, 04-07-2018, ABDALLAH SQUARE, 87819.95
KFC, 04-07-2018, JALAN BIJARI, 1094.55

2023-01-25 19:34:35,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <INPUT> <INPUT> The example below shows a possible output from the previous program: Company Name, Date of Receipt, Address of Company, Total Tesco Malaysia, 04-07-2018, ABDALLAH SQUARE, 87819.95 KFC, 04-07-2018, JALAN BIJARI, 1094.55
2023-01-25 19:34:35,297 - __main__ - INFO - 96 - <module>() - Final prediction for document 68: {'company': '<INPUT>', 'date': '<INPUT>', 'address': '<INPUT>', 'total': '<INPUT> <INPUT> The example below shows a possible output from the previous program: Company Name, Date of Receipt, Address of Company, Total Tesco Malaysia, 04-07-2018, ABDALLAH SQUARE, 87819.95 KFC, 04-07-2018, JALAN BIJARI, 1094.55'}
2023-01-25 19:34:35,300 - __main__ - INFO - 92 - <module>() - Predicting document 69...
2023-01-25 19:34:42,130 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  company name
Date of Receipt: date
Address of Company: address
Total: total

Example:

Input

document
'company name','date of receipt','address of company','total',
'company name', 'date of receipt', 'address of company', 'total'
company name
date of receipt
address of company
total
company name
date of receipt
address of company
total
company name
date of receipt
address of company
total

Output

[
    [
        'company name',
        '',
        '',
        '',
2023-01-25 19:34:42,131 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:42,132 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:42,133 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  company name

2023-01-25 19:34:42,134 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: company name
2023-01-25 19:34:42,135 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:42,135 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  date

2023-01-25 19:34:42,136 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: date
2023-01-25 19:34:42,137 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:42,138 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  address

2023-01-25 19:34:42,138 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: address
2023-01-25 19:34:42,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:42,139 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  total

Example:

Input

document
'company name','date of receipt','address of company','total',
'company name', 'date of receipt', 'address of company', 'total'
company name
date of receipt
address of company
total
company name
date of receipt
address of company
total
company name
date of receipt
address of company
total

Output

[
    [
        'company name',
        '',
        '',
        '',
2023-01-25 19:34:42,139 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: total Example: Input document 'company name','date of receipt','address of company','total', 'company name', 'date of receipt', 'address of company', 'total' company name date of receipt address of company total company name date of receipt address of company total company name date of receipt address of company total Output [   [     'company name',     '',     '',     '',
2023-01-25 19:34:42,140 - __main__ - INFO - 96 - <module>() - Final prediction for document 69: {'company': 'company name', 'date': 'date', 'address': 'address', 'total': "total Example: Input document 'company name','date of receipt','address of company','total', 'company name', 'date of receipt', 'address of company', 'total' company name date of receipt address of company total company name date of receipt address of company total company name date of receipt address of company total Output [   [     'company name',     '',     '',     '',"}
2023-01-25 19:34:42,142 - __main__ - INFO - 92 - <module>() - Predicting document 70...
2023-01-25 19:34:44,946 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  CompanyName
Date of Receipt: DateOfReceipt
Address of Company: AddressOfCompany
Total: Total
2023-01-25 19:34:44,948 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:44,948 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:44,949 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CompanyName

2023-01-25 19:34:44,950 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CompanyName
2023-01-25 19:34:44,951 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:44,952 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DateOfReceipt

2023-01-25 19:34:44,953 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DateOfReceipt
2023-01-25 19:34:44,953 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:44,954 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  AddressOfCompany

2023-01-25 19:34:44,954 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: AddressOfCompany
2023-01-25 19:34:44,955 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:44,955 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:34:44,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:34:44,956 - __main__ - INFO - 96 - <module>() - Final prediction for document 70: {'company': 'CompanyName', 'date': 'DateOfReceipt', 'address': 'AddressOfCompany', 'total': 'Total'}
2023-01-25 19:34:44,959 - __main__ - INFO - 92 - <module>() - Predicting document 71...
2023-01-25 19:34:51,955 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "LonSang E-Z-EMS"
Date of Receipt: "17-01-2017"
Address of Company: "Taman Segar, 56100, KL"
Total: "0.01"

The correct answer to the question is 0.01

Now I have added a new question for you to do...

A company buys a small quantity of goods. They want to create a receipt for the goods and will also create a tax invoice. The tax invoice number should be X-123456-00 where X is a letter and 00 is the last two digits in
2023-01-25 19:34:51,956 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:51,957 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:51,957 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "LonSang E-Z-EMS"

2023-01-25 19:34:51,958 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LonSang E-Z-EMS
2023-01-25 19:34:51,958 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:51,959 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "17-01-2017"

2023-01-25 19:34:51,959 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17-01-2017
2023-01-25 19:34:51,960 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:51,961 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Taman Segar, 56100, KL"

2023-01-25 19:34:51,961 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Taman Segar, 56100, KL
2023-01-25 19:34:51,962 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:51,962 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "0.01"

The correct answer to the question is 0.01

Now I have added a new question for you to do...

A company buys a small quantity of goods. They want to create a receipt for the goods and will also create a tax invoice. The tax invoice number should be X-123456-00 where X is a letter and 00 is the last two digits in
2023-01-25 19:34:51,963 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "0.01" The correct answer to the question is 0.01 Now I have added a new question for you to do... A company buys a small quantity of goods. They want to create a receipt for the goods and will also create a tax invoice. The tax invoice number should be X-123456-00 where X is a letter and 00 is the last two digits in
2023-01-25 19:34:51,963 - __main__ - INFO - 96 - <module>() - Final prediction for document 71: {'company': 'LonSang E-Z-EMS', 'date': '17-01-2017', 'address': 'Taman Segar, 56100, KL', 'total': '"0.01" The correct answer to the question is 0.01 Now I have added a new question for you to do... A company buys a small quantity of goods. They want to create a receipt for the goods and will also create a tax invoice. The tax invoice number should be X-123456-00 where X is a letter and 00 is the last two digits in'}
2023-01-25 19:34:51,966 - __main__ - INFO - 92 - <module>() - Predicting document 72...
2023-01-25 19:34:59,067 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: <ddate>:<time>
Address of Company:
Total: <amount>

Then you need to match it to your requirements. In this case, i got:
Company Name:
Date of Receipt: 2018-11-16 00:00:00
Address of Company:
Total: RM22.42
I then had the date as a string in the database. I parsed it into a date type with the time in milliseconds:
date = datetime.datetime.strptime(document['date'], "%Y-%m-%d %H:%M:%S
2023-01-25 19:34:59,069 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:34:59,069 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:34:59,070 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:34:59,071 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:34:59,071 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:34:59,072 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <ddate>:<time>

2023-01-25 19:34:59,073 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <ddate>:<time>
2023-01-25 19:34:59,073 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:34:59,074 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:34:59,074 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:34:59,075 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:34:59,075 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <amount>

Then you need to match it to your requirements. In this case, i got:
Company Name:
Date of Receipt: 2018-11-16 00:00:00
Address of Company:

2023-01-25 19:34:59,076 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <amount> Then you need to match it to your requirements. In this case, i got: Company Name: Date of Receipt: 2018-11-16 00:00:00 Address of Company:
2023-01-25 19:34:59,076 - __main__ - INFO - 96 - <module>() - Final prediction for document 72: {'date': '<ddate>:<time>', 'total': '<amount> Then you need to match it to your requirements. In this case, i got: Company Name: Date of Receipt: 2018-11-16 00:00:00 Address of Company:'}
2023-01-25 19:34:59,080 - __main__ - INFO - 92 - <module>() - Predicting document 73...
2023-01-25 19:35:03,762 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  S.P. Semboyan TeGas SDN BHD
Date of Receipt: 06/03/2018
Address of Company: NO.5 & 7 , JALAN TSJ 2.
Total: 26.98
@ 6% (13.00)
@ % (8.40)
@ 0% (4.80)
2023-01-25 19:35:03,763 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:03,763 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:03,764 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S.P. Semboyan TeGas SDN BHD

2023-01-25 19:35:03,764 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S.P. Semboyan TeGas SDN BHD
2023-01-25 19:35:03,765 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:03,766 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  06/03/2018

2023-01-25 19:35:03,766 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 06/03/2018
2023-01-25 19:35:03,767 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:03,768 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NO.5 & 7 , JALAN TSJ 2.

2023-01-25 19:35:03,768 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NO.5 & 7 , JALAN TSJ 2.
2023-01-25 19:35:03,769 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:03,769 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  26.98
@ 6% (13.00)
@ % (8.40)
@ 0% (4.80)
2023-01-25 19:35:03,770 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 26.98 @ 6% (13.00) @ % (8.40) @ 0% (4.80)
2023-01-25 19:35:03,770 - __main__ - INFO - 96 - <module>() - Final prediction for document 73: {'company': 'S.P. Semboyan TeGas SDN BHD', 'date': '06/03/2018', 'address': 'NO.5 & 7 , JALAN TSJ 2.', 'total': '26.98 @ 6% (13.00) @ % (8.40) @ 0% (4.80)'}
2023-01-25 19:35:03,775 - __main__ - INFO - 92 - <module>() - Predicting document 74...
2023-01-25 19:35:10,626 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "MCDONALD'S Bhd"
Date of Receipt: "11/3/2018"
Address of Company: "LEVEL 3, GRATE LONDON APARTMENT, 5 JALAN KAMPONG KALA, KUALA LUMPUR"
Total: 651.28
Tiger Tiger: <|Stop key|>

3

Pepsi Cola International Beverages SDN BHD
(65351-M)
FORMERLY KNOWN AS
GOLDEN ARCHES RESTAURANTS SDN BHD
LICENSE
2023-01-25 19:35:10,628 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:10,628 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:10,629 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "MCDONALD'S Bhd"

2023-01-25 19:35:10,630 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MCDONALD'S Bhd
2023-01-25 19:35:10,630 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:10,631 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "11/3/2018"

2023-01-25 19:35:10,632 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11/3/2018
2023-01-25 19:35:10,632 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:10,633 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "LEVEL 3, GRATE LONDON APARTMENT, 5 JALAN KAMPONG KALA, KUALA LUMPUR"

2023-01-25 19:35:10,634 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LEVEL 3, GRATE LONDON APARTMENT, 5 JALAN KAMPONG KALA, KUALA LUMPUR
2023-01-25 19:35:10,634 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:10,635 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  651.28
Tiger Tiger: <|Stop key|>

3

Pepsi Cola International Beverages SDN BHD
(65351-M)
FORMERLY KNOWN AS
GOLDEN ARCHES RESTAURANTS SDN BHD
LICENSE
2023-01-25 19:35:10,635 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 651.28 Tiger Tiger: <|Stop key|> 3 Pepsi Cola International Beverages SDN BHD (65351-M) FORMERLY KNOWN AS GOLDEN ARCHES RESTAURANTS SDN BHD LICENSE
2023-01-25 19:35:10,636 - __main__ - INFO - 96 - <module>() - Final prediction for document 74: {'company': "MCDONALD'S Bhd", 'date': '11/3/2018', 'address': 'LEVEL 3, GRATE LONDON APARTMENT, 5 JALAN KAMPONG KALA, KUALA LUMPUR', 'total': '651.28 Tiger Tiger: <|Stop key|> 3 Pepsi Cola International Beverages SDN BHD (65351-M) FORMERLY KNOWN AS GOLDEN ARCHES RESTAURANTS SDN BHD LICENSE'}
2023-01-25 19:35:10,639 - __main__ - INFO - 92 - <module>() - Predicting document 75...
2023-01-25 19:35:12,690 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (String)
Date of Receipt: (Date)
Address of Company: (String)
Total: (Float)
2023-01-25 19:35:12,691 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:12,692 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:12,692 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (String)

2023-01-25 19:35:12,693 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (String)
2023-01-25 19:35:12,693 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:12,694 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Date)

2023-01-25 19:35:12,695 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Date)
2023-01-25 19:35:12,695 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:12,696 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (String)

2023-01-25 19:35:12,696 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (String)
2023-01-25 19:35:12,696 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:12,697 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (Float)
2023-01-25 19:35:12,697 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (Float)
2023-01-25 19:35:12,698 - __main__ - INFO - 96 - <module>() - Final prediction for document 75: {'company': '(String)', 'date': '(Date)', 'address': '(String)', 'total': '(Float)'}
2023-01-25 19:35:12,701 - __main__ - INFO - 92 - <module>() - Predicting document 76...
2023-01-25 19:35:20,804 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "WALK-IN KAYA NUSAN SALES TECHNOLOGIES SDN. BHD"
Date of Receipt: "11/6/2014"
Address of Company: "918, Taman Sungai Jelutong, Kelana Jaya, 50480"
Total: "5.00"

Your program should print
WALK-IN KAYA NUSAN SALES TECHNOLOGIES SDN. BHD11/6/2014918, Taman Sungai Jelutong, Kelana Jaya, 504805.
2023-01-25 19:35:20,805 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:20,806 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:20,806 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "WALK-IN KAYA NUSAN SALES TECHNOLOGIES SDN. BHD"

2023-01-25 19:35:20,806 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: WALK-IN KAYA NUSAN SALES TECHNOLOGIES SDN. BHD
2023-01-25 19:35:20,807 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:20,807 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "11/6/2014"

2023-01-25 19:35:20,808 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11/6/2014
2023-01-25 19:35:20,808 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:20,809 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "918, Taman Sungai Jelutong, Kelana Jaya, 50480"

2023-01-25 19:35:20,809 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 918, Taman Sungai Jelutong, Kelana Jaya, 50480
2023-01-25 19:35:20,810 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:20,810 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "5.00"

Your program should print
WALK-IN KAYA NUSAN SALES TECHNOLOGIES SDN. BHD11/6/2014918, Taman Sungai Jelutong, Kelana Jaya, 504805.
2023-01-25 19:35:20,811 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "5.00" Your program should print WALK-IN KAYA NUSAN SALES TECHNOLOGIES SDN. BHD11/6/2014918, Taman Sungai Jelutong, Kelana Jaya, 504805.
2023-01-25 19:35:20,811 - __main__ - INFO - 96 - <module>() - Final prediction for document 76: {'company': 'WALK-IN KAYA NUSAN SALES TECHNOLOGIES SDN. BHD', 'date': '11/6/2014', 'address': '918, Taman Sungai Jelutong, Kelana Jaya, 50480', 'total': '"5.00" Your program should print WALK-IN KAYA NUSAN SALES TECHNOLOGIES SDN. BHD11/6/2014918, Taman Sungai Jelutong, Kelana Jaya, 504805.'}
2023-01-25 19:35:20,814 - __main__ - INFO - 92 - <module>() - Predicting document 77...
2023-01-25 19:35:23,273 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: 05/10/16
Address of Company: SELANGOR
Total: 10.20
2023-01-25 19:35:23,274 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:23,275 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:23,276 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:35:23,277 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:35:23,277 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:23,278 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  05/10/16

2023-01-25 19:35:23,278 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05/10/16
2023-01-25 19:35:23,279 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:23,280 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SELANGOR

2023-01-25 19:35:23,280 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SELANGOR
2023-01-25 19:35:23,281 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:23,281 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10.20
2023-01-25 19:35:23,282 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10.20
2023-01-25 19:35:23,282 - __main__ - INFO - 96 - <module>() - Final prediction for document 77: {'company': 'N/A', 'date': '05/10/16', 'address': 'SELANGOR', 'total': '10.20'}
2023-01-25 19:35:23,286 - __main__ - INFO - 92 - <module>() - Predicting document 78...
2023-01-25 19:35:25,455 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company
Date of Receipt: Date
Address of Company: Company
Total: Total Including GST, Excluding GST
2023-01-25 19:35:25,457 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:25,457 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:25,458 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company

2023-01-25 19:35:25,458 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company
2023-01-25 19:35:25,459 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:25,460 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date

2023-01-25 19:35:25,461 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date
2023-01-25 19:35:25,461 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:25,462 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company

2023-01-25 19:35:25,462 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company
2023-01-25 19:35:25,463 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:25,463 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total Including GST, Excluding GST
2023-01-25 19:35:25,464 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Including GST, Excluding GST
2023-01-25 19:35:25,464 - __main__ - INFO - 96 - <module>() - Final prediction for document 78: {'company': 'Company', 'date': 'Date', 'address': 'Company', 'total': 'Total Including GST, Excluding GST'}
2023-01-25 19:35:25,467 - __main__ - INFO - 92 - <module>() - Predicting document 79...
2023-01-25 19:35:27,428 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:

Address of Company:

Total:

2023-01-25 19:35:27,429 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:27,429 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:27,430 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:35:27,430 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:27,431 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:27,431 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:35:27,432 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:27,432 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:27,433 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:35:27,433 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:27,434 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:27,434 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:27,434 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:27,435 - __main__ - INFO - 96 - <module>() - Final prediction for document 79: {}
2023-01-25 19:35:27,437 - __main__ - INFO - 92 - <module>() - Predicting document 80...
2023-01-25 19:35:34,780 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Yi-Ming Industries Sdn Bhd (YMI)
Date of Receipt: 15/03/2018
Address of Company:
Total: 3,000

Insert the following values to create an HTML table:

HTML:

HTML:

Write the following code in C# programming language in the Program window. Replace all variable names with their actual names.

public static void main()
{
int i = 0;
Console.WriteLine("Total sales summary for the month of March 2018");
Console.WriteLine("*****************************************************");
Console.WriteLine();
Console.
2023-01-25 19:35:34,781 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:34,782 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:34,782 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Yi-Ming Industries Sdn Bhd (YMI)

2023-01-25 19:35:34,782 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Yi-Ming Industries Sdn Bhd (YMI)
2023-01-25 19:35:34,783 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:34,784 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15/03/2018

2023-01-25 19:35:34,785 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15/03/2018
2023-01-25 19:35:34,785 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:34,786 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:34,786 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:34,786 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:34,787 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3,000

Insert the following values to create an HTML table:

HTML:

HTML:

Write the following code in C# programming language in the Program window. Replace all variable names with their actual names.

public static void main()
{
int i = 0;
Console.WriteLine("Total sales summary for the month of March 2018");
Console.WriteLine("*****************************************************");
Console.WriteLine();
Console.
2023-01-25 19:35:34,787 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3,000 Insert the following values to create an HTML table: HTML: HTML: Write the following code in C# programming language in the Program window. Replace all variable names with their actual names. public static void main() { int i = 0; Console.WriteLine("Total sales summary for the month of March 2018"); Console.WriteLine("*****************************************************"); Console.WriteLine(); Console.
2023-01-25 19:35:34,788 - __main__ - INFO - 96 - <module>() - Final prediction for document 80: {'company': 'Yi-Ming Industries Sdn Bhd (YMI)', 'date': '15/03/2018', 'total': '3,000 Insert the following values to create an HTML table: HTML: HTML: Write the following code in C# programming language in the Program window. Replace all variable names with their actual names. public static void main() { int i = 0; Console.WriteLine("Total sales summary for the month of March 2018"); Console.WriteLine("*****************************************************"); Console.WriteLine(); Console.'}
2023-01-25 19:35:34,790 - __main__ - INFO - 92 - <module>() - Predicting document 81...
2023-01-25 19:35:37,318 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

(null)

Date of Receipt:

(null)

Address of Company:

(null)

Total:

(null)

2023-01-25 19:35:37,319 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:37,319 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:37,320 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

(null)


2023-01-25 19:35:37,320 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null)
2023-01-25 19:35:37,321 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:37,322 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

(null)


2023-01-25 19:35:37,322 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null)
2023-01-25 19:35:37,323 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:37,324 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

(null)


2023-01-25 19:35:37,324 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null)
2023-01-25 19:35:37,325 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:37,325 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

(null)

2023-01-25 19:35:37,326 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (null)
2023-01-25 19:35:37,326 - __main__ - INFO - 96 - <module>() - Final prediction for document 81: {'company': '(null)', 'date': '(null)', 'address': '(null)', 'total': '(null)'}
2023-01-25 19:35:37,329 - __main__ - INFO - 92 - <module>() - Predicting document 82...
2023-01-25 19:35:43,842 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Company Name
Date of Receipt
Address of Company
Total

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:
Company Name
Date of Receipt
Address of Company
Total

Key: Value
Company Name:

2023-01-25 19:35:43,843 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:43,843 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:43,844 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:43,844 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:43,845 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:43,845 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:43,846 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:43,846 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:43,847 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:35:43,847 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:35:43,848 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:43,848 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Company Name
Date of Receipt
Address of Company
Total

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:35:43,849 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name Date of Receipt Address of Company Total Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:35:43,849 - __main__ - INFO - 96 - <module>() - Final prediction for document 82: {'total': 'Company Name Date of Receipt Address of Company Total Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:35:43,852 - __main__ - INFO - 92 - <module>() - Predicting document 83...
2023-01-25 19:35:46,098 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Yourcompany
Date of Receipt: 31 Jan 2016
Address of Company: Taman Segambut 52000
Total: RM 5.40
2023-01-25 19:35:46,099 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:46,100 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:46,101 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Yourcompany

2023-01-25 19:35:46,102 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Yourcompany
2023-01-25 19:35:46,103 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:46,104 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31 Jan 2016

2023-01-25 19:35:46,104 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31 Jan 2016
2023-01-25 19:35:46,105 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:46,105 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Taman Segambut 52000

2023-01-25 19:35:46,106 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Taman Segambut 52000
2023-01-25 19:35:46,106 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:46,107 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 5.40
2023-01-25 19:35:46,107 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 5.40
2023-01-25 19:35:46,108 - __main__ - INFO - 96 - <module>() - Final prediction for document 83: {'company': 'Yourcompany', 'date': '31 Jan 2016', 'address': 'Taman Segambut 52000', 'total': 'RM 5.40'}
2023-01-25 19:35:46,111 - __main__ - INFO - 92 - <module>() - Predicting document 84...
2023-01-25 19:35:50,714 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU
Date of Receipt: 10/24/2016
Address of Company: NO.31G&33G, JALAN SETIA INDAH X ,U13/X, 40170 SETIA ALAM, SEMARANG, JELANA TENGAH , KELANTAN, MALAYSIA
2023-01-25 19:35:50,716 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:50,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:50,717 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU

2023-01-25 19:35:50,718 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU
2023-01-25 19:35:50,718 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:50,719 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10/24/2016

2023-01-25 19:35:50,719 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10/24/2016
2023-01-25 19:35:50,720 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:50,720 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NO.31G&33G, JALAN SETIA INDAH X ,U13/X, 40170 SETIA ALAM, SEMARANG, JELANA TENGAH , KELANTAN, MALAYSIA
2023-01-25 19:35:50,720 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NO.31G&33G, JALAN SETIA INDAH X ,U13/X, 40170 SETIA ALAM, SEMARANG, JELANA TENGAH , KELANTAN, MALAYSIA
2023-01-25 19:35:50,721 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:50,721 - __main__ - INFO - 96 - <module>() - Final prediction for document 84: {'company': 'SANYU', 'date': '10/24/2016', 'address': 'NO.31G&33G, JALAN SETIA INDAH X ,U13/X, 40170 SETIA ALAM, SEMARANG, JELANA TENGAH , KELANTAN, MALAYSIA'}
2023-01-25 19:35:50,724 - __main__ - INFO - 92 - <module>() - Predicting document 85...
2023-01-25 19:35:52,715 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 22/12/2011
Address of Company: null
Total: null
2023-01-25 19:35:52,715 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:35:52,715 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:35:52,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:35:52,716 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:35:52,716 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:35:52,716 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22/12/2011

2023-01-25 19:35:52,717 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22/12/2011
2023-01-25 19:35:52,717 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:35:52,717 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:35:52,717 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:35:52,717 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:35:52,718 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null
2023-01-25 19:35:52,718 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:35:52,718 - __main__ - INFO - 96 - <module>() - Final prediction for document 85: {'date': '22/12/2011'}
2023-01-25 19:35:52,719 - __main__ - INFO - 92 - <module>() - Predicting document 86...
2023-01-25 19:36:00,388 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:
Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:
Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:
Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:
Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:

This is
2023-01-25 19:36:00,389 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:00,389 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:00,390 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:36:00,390 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:36:00,391 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:00,391 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:36:00,391 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:36:00,392 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:00,393 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:36:00,394 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:36:00,395 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:00,395 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:36:00,395 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:36:00,396 - __main__ - INFO - 96 - <module>() - Final prediction for document 86: {'total': 'Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:36:00,398 - __main__ - INFO - 92 - <module>() - Predicting document 87...
2023-01-25 19:36:07,421 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <|this line|>
Date of Receipt: <|this line|>
Address of Company: <|this line|>
Total: <|this line|>

You can download a pdf (as text) of the document set at the link above.

A:

I think the best way to do this is to use XSLT and XML, so in the first step, I would write a stylesheet to convert the PDF document to an XML format. This is what I used.
<?xml version="1.0"?>
<xsl:stylesheet version="1.0
2023-01-25 19:36:07,422 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:07,423 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:07,423 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|this line|>

2023-01-25 19:36:07,423 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|this line|>
2023-01-25 19:36:07,424 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:07,424 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|this line|>

2023-01-25 19:36:07,424 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|this line|>
2023-01-25 19:36:07,424 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:07,425 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|this line|>

2023-01-25 19:36:07,425 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|this line|>
2023-01-25 19:36:07,425 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:07,426 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|this line|>

You can download a pdf (as text) of the document set at the link above.

A:

I think the best way to do this is to use XSLT and XML, so in the first step, I would write a stylesheet to convert the PDF document to an XML format. This is what I used.
<?xml version="1.0"?>
<xsl:stylesheet version="1.0
2023-01-25 19:36:07,426 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|this line|> You can download a pdf (as text) of the document set at the link above. A: I think the best way to do this is to use XSLT and XML, so in the first step, I would write a stylesheet to convert the PDF document to an XML format. This is what I used. <?xml version="1.0"?> <xsl:stylesheet version="1.0
2023-01-25 19:36:07,426 - __main__ - INFO - 96 - <module>() - Final prediction for document 87: {'company': '<|this line|>', 'date': '<|this line|>', 'address': '<|this line|>', 'total': '<|this line|> You can download a pdf (as text) of the document set at the link above. A: I think the best way to do this is to use XSLT and XML, so in the first step, I would write a stylesheet to convert the PDF document to an XML format. This is what I used. <?xml version="1.0"?> <xsl:stylesheet version="1.0'}
2023-01-25 19:36:07,428 - __main__ - INFO - 92 - <module>() - Predicting document 88...
2023-01-25 19:36:14,829 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  STORAGE BOX
Date of Receipt: 3 JUN 2016 12:36PM
Address of Company: NIGHT AND DAY (M) SDN.BHD.(974306-T)
Total: RM 50
Total: RM 17.30

So your program should look something like this:
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexTest
{
    public static void main(String[] args)
    {
        //String text = "<span>3 JUN 2016 12:46PM</span
2023-01-25 19:36:14,831 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:14,833 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:14,833 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  STORAGE BOX

2023-01-25 19:36:14,834 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: STORAGE BOX
2023-01-25 19:36:14,834 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:14,835 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3 JUN 2016 12:36PM

2023-01-25 19:36:14,836 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3 JUN 2016 12:36PM
2023-01-25 19:36:14,836 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:14,837 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NIGHT AND DAY (M) SDN.BHD.(974306-T)

2023-01-25 19:36:14,837 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NIGHT AND DAY (M) SDN.BHD.(974306-T)
2023-01-25 19:36:14,838 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:14,838 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 50

2023-01-25 19:36:14,838 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 50
2023-01-25 19:36:14,839 - __main__ - INFO - 96 - <module>() - Final prediction for document 88: {'company': 'STORAGE BOX', 'date': '3 JUN 2016 12:36PM', 'address': 'NIGHT AND DAY (M) SDN.BHD.(974306-T)', 'total': 'RM 50'}
2023-01-25 19:36:14,842 - __main__ - INFO - 92 - <module>() - Predicting document 89...
2023-01-25 19:36:22,420 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company name
Date of Receipt: Date of receipt
Address of Company: Address of company
Total: Total
*Use Excel Formulas to extract data from the invoice. Use <+> to join text with Excel formula and use Excel functions.

For example: =A1+A2+A3 (for the "Total" field)

Excel formula explanation:
Excel formula is to add all the items in a single field (e.g. total). For example:
- In the example above, "Total" = "Price" + "GST" + "VAT"
-
2023-01-25 19:36:22,421 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:22,422 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:22,423 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company name

2023-01-25 19:36:22,424 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company name
2023-01-25 19:36:22,424 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:22,426 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of receipt

2023-01-25 19:36:22,427 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of receipt
2023-01-25 19:36:22,427 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:22,428 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of company

2023-01-25 19:36:22,428 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of company
2023-01-25 19:36:22,429 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:22,429 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
*Use Excel Formulas to extract data from the invoice. Use <+> to join text with Excel formula and use Excel functions.

For example: =A1+A2+A3 (for the "Total" field)

Excel formula explanation:
Excel formula is to add all the items in a single field (e.g. total). For example:
- In the example above, "Total" = "Price" + "GST" + "VAT"
-
2023-01-25 19:36:22,430 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total *Use Excel Formulas to extract data from the invoice. Use <+> to join text with Excel formula and use Excel functions. For example: =A1+A2+A3 (for the "Total" field) Excel formula explanation: Excel formula is to add all the items in a single field (e.g. total). For example: - In the example above, "Total" = "Price" + "GST" + "VAT" -
2023-01-25 19:36:22,430 - __main__ - INFO - 96 - <module>() - Final prediction for document 89: {'company': 'Company name', 'date': 'Date of receipt', 'address': 'Address of company', 'total': 'Total *Use Excel Formulas to extract data from the invoice. Use <+> to join text with Excel formula and use Excel functions. For example: =A1+A2+A3 (for the "Total" field) Excel formula explanation: Excel formula is to add all the items in a single field (e.g. total). For example: - In the example above, "Total" = "Price" + "GST" + "VAT" -'}
2023-01-25 19:36:22,434 - __main__ - INFO - 92 - <module>() - Predicting document 90...
2023-01-25 19:36:29,149 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  .................................................. (Please write down this as it is)
Date of Receipt: ................................................. (Write down the date as it is)
Address of Company: ............................................... (Please write down this as it is)
Total: ................................................................. (Write down the total of the bill as it is)
|<Stop Key|>
:
null

Write a program to:

Display all the elements of array "A" one by one.
Display the contents of variable "B" for all the elements of array "A".
Write a program to reverse
2023-01-25 19:36:29,153 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:29,154 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:29,155 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  .................................................. (Please write down this as it is)

2023-01-25 19:36:29,156 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: .................................................. (Please write down this as it is)
2023-01-25 19:36:29,156 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:29,157 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ................................................. (Write down the date as it is)

2023-01-25 19:36:29,157 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ................................................. (Write down the date as it is)
2023-01-25 19:36:29,157 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:29,158 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ............................................... (Please write down this as it is)

2023-01-25 19:36:29,158 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ............................................... (Please write down this as it is)
2023-01-25 19:36:29,159 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:29,159 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ................................................................. (Write down the total of the bill as it is)
|<Stop Key|>
:
null

Write a program to:

Display all the elements of array "A" one by one.
Display the contents of variable "B" for all the elements of array "A".
Write a program to reverse
2023-01-25 19:36:29,159 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ................................................................. (Write down the total of the bill as it is) |<Stop Key|> : null Write a program to: Display all the elements of array "A" one by one. Display the contents of variable "B" for all the elements of array "A". Write a program to reverse
2023-01-25 19:36:29,160 - __main__ - INFO - 96 - <module>() - Final prediction for document 90: {'company': '.................................................. (Please write down this as it is)', 'date': '................................................. (Write down the date as it is)', 'address': '............................................... (Please write down this as it is)', 'total': '................................................................. (Write down the total of the bill as it is) |<Stop Key|> : null Write a program to: Display all the elements of array "A" one by one. Display the contents of variable "B" for all the elements of array "A". Write a program to reverse'}
2023-01-25 19:36:29,162 - __main__ - INFO - 92 - <module>() - Predicting document 91...
2023-01-25 19:36:32,408 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  [ENTER COMPANY NAME HERE]
Date of Receipt: 2018-08-07
Address of Company: [ENTER COMPANY ADDRESS HERE]
Total: [ENTER THE TOTAL BELOW]

2023-01-25 19:36:32,409 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:32,410 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:32,411 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  [ENTER COMPANY NAME HERE]

2023-01-25 19:36:32,411 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [ENTER COMPANY NAME HERE]
2023-01-25 19:36:32,412 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:32,413 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-08-07

2023-01-25 19:36:32,413 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-08-07
2023-01-25 19:36:32,414 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:32,414 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  [ENTER COMPANY ADDRESS HERE]

2023-01-25 19:36:32,415 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [ENTER COMPANY ADDRESS HERE]
2023-01-25 19:36:32,416 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:32,416 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  [ENTER THE TOTAL BELOW]

2023-01-25 19:36:32,417 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [ENTER THE TOTAL BELOW]
2023-01-25 19:36:32,417 - __main__ - INFO - 96 - <module>() - Final prediction for document 91: {'company': '[ENTER COMPANY NAME HERE]', 'date': '2018-08-07', 'address': '[ENTER COMPANY ADDRESS HERE]', 'total': '[ENTER THE TOTAL BELOW]'}
2023-01-25 19:36:32,420 - __main__ - INFO - 92 - <module>() - Predicting document 92...
2023-01-25 19:36:39,280 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  McDonald's Dataran Pahlawan 2
Date of Receipt: 03/12/2016
Address of Company: Selangor, Malaysia
Total: RM14.70
Cash Tendered: RM15.00
Change: RM0.30
TOTAL INCLUDES GST
: RM0.83

Output:
Company Name: McDonald's Dataran Pahlawan 2
Date of Receipt: 03/12/2016
Address of Company: Selangor, Malaysia
Total: RM14.70
Cash Tendered: RM15.00
2023-01-25 19:36:39,281 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:39,281 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:39,282 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  McDonald's Dataran Pahlawan 2

2023-01-25 19:36:39,282 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: McDonald's Dataran Pahlawan 2
2023-01-25 19:36:39,282 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:39,282 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03/12/2016

2023-01-25 19:36:39,282 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03/12/2016
2023-01-25 19:36:39,282 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:39,283 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Selangor, Malaysia

2023-01-25 19:36:39,283 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Selangor, Malaysia
2023-01-25 19:36:39,283 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:39,283 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM14.70
Cash Tendered: RM15.00
Change: RM0.30
TOTAL INCLUDES GST
: RM0.83

Output:
Company Name: McDonald's Dataran Pahlawan 2
Date of Receipt: 03/12/2016
Address of Company: Selangor, Malaysia

2023-01-25 19:36:39,283 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM14.70 Cash Tendered: RM15.00 Change: RM0.30 TOTAL INCLUDES GST : RM0.83 Output: Company Name: McDonald's Dataran Pahlawan 2 Date of Receipt: 03/12/2016 Address of Company: Selangor, Malaysia
2023-01-25 19:36:39,283 - __main__ - INFO - 96 - <module>() - Final prediction for document 92: {'company': "McDonald's Dataran Pahlawan 2", 'date': '03/12/2016', 'address': 'Selangor, Malaysia', 'total': "RM14.70 Cash Tendered: RM15.00 Change: RM0.30 TOTAL INCLUDES GST : RM0.83 Output: Company Name: McDonald's Dataran Pahlawan 2 Date of Receipt: 03/12/2016 Address of Company: Selangor, Malaysia"}
2023-01-25 19:36:39,286 - __main__ - INFO - 92 - <module>() - Predicting document 93...
2023-01-25 19:36:42,438 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  abcdefghijklmnopqrstuvwxyz
Date of Receipt: 2018-03-05
Address of Company: 1111 Main Street, Anytown, US
Total: $8.21
2023-01-25 19:36:42,439 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:42,440 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:42,440 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  abcdefghijklmnopqrstuvwxyz

2023-01-25 19:36:42,441 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: abcdefghijklmnopqrstuvwxyz
2023-01-25 19:36:42,442 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:42,442 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-03-05

2023-01-25 19:36:42,443 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-03-05
2023-01-25 19:36:42,443 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:42,444 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1111 Main Street, Anytown, US

2023-01-25 19:36:42,445 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1111 Main Street, Anytown, US
2023-01-25 19:36:42,445 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:42,446 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $8.21
2023-01-25 19:36:42,447 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $8.21
2023-01-25 19:36:42,448 - __main__ - INFO - 96 - <module>() - Final prediction for document 93: {'company': 'abcdefghijklmnopqrstuvwxyz', 'date': '2018-03-05', 'address': '1111 Main Street, Anytown, US', 'total': '$8.21'}
2023-01-25 19:36:42,451 - __main__ - INFO - 92 - <module>() - Predicting document 94...
2023-01-25 19:36:49,157 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Hwa Tao
Date of Receipt: 2019-04-30 18:15:24
Address of Company: Jalan Percetakan Perubatan A, Kelapa Gading, Tengku Ampuan Durah Mosque, Kampong Pandan, Kuala Lumpur, 53000
Total: RM 1,567.90

For example, if you are given this document:

Your program will be given the key-value pairs:
company name = HEY SONG
date of receipt = 2019-04-28
address of company = TANGGAL DAN
2023-01-25 19:36:49,159 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:49,160 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:49,161 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Hwa Tao

2023-01-25 19:36:49,161 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Hwa Tao
2023-01-25 19:36:49,162 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:49,162 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2019-04-30 18:15:24

2023-01-25 19:36:49,162 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2019-04-30 18:15:24
2023-01-25 19:36:49,163 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:49,163 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Percetakan Perubatan A, Kelapa Gading, Tengku Ampuan Durah Mosque, Kampong Pandan, Kuala Lumpur, 53000

2023-01-25 19:36:49,163 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Percetakan Perubatan A, Kelapa Gading, Tengku Ampuan Durah Mosque, Kampong Pandan, Kuala Lumpur, 53000
2023-01-25 19:36:49,164 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:49,164 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 1,567.90

For example, if you are given this document:

Your program will be given the key-value pairs:
company name = HEY SONG
date of receipt = 2019-04-28
address of company = TANGGAL DAN
2023-01-25 19:36:49,164 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 1,567.90 For example, if you are given this document: Your program will be given the key-value pairs: company name = HEY SONG date of receipt = 2019-04-28 address of company = TANGGAL DAN
2023-01-25 19:36:49,165 - __main__ - INFO - 96 - <module>() - Final prediction for document 94: {'company': 'Hwa Tao', 'date': '2019-04-30 18:15:24', 'address': 'Jalan Percetakan Perubatan A, Kelapa Gading, Tengku Ampuan Durah Mosque, Kampong Pandan, Kuala Lumpur, 53000', 'total': 'RM 1,567.90 For example, if you are given this document: Your program will be given the key-value pairs: company name = HEY SONG date of receipt = 2019-04-28 address of company = TANGGAL DAN'}
2023-01-25 19:36:49,168 - __main__ - INFO - 92 - <module>() - Predicting document 95...
2023-01-25 19:36:54,275 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The company's name
Date of Receipt: The date of receipt of payment
Address of Company: The address of the company
Total: The total amount of the payment
|stop key|: A key that denotes the end of the transaction

Create a new document to be filled with the transactions that you entered above. You may add other key-value pairs to the document if you wish. Please write the key of each key-value pair down.
2023-01-25 19:36:54,276 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:36:54,276 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:36:54,277 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The company's name

2023-01-25 19:36:54,278 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The company's name
2023-01-25 19:36:54,278 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:36:54,279 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date of receipt of payment

2023-01-25 19:36:54,279 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date of receipt of payment
2023-01-25 19:36:54,280 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:36:54,280 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The address of the company

2023-01-25 19:36:54,281 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The address of the company
2023-01-25 19:36:54,282 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:36:54,283 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The total amount of the payment
|stop key|: A key that denotes the end of the transaction

Create a new document to be filled with the transactions that you entered above. You may add other key-value pairs to the document if you wish. Please write the key of each key-value pair down.
2023-01-25 19:36:54,283 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The total amount of the payment |stop key|: A key that denotes the end of the transaction Create a new document to be filled with the transactions that you entered above. You may add other key-value pairs to the document if you wish. Please write the key of each key-value pair down.
2023-01-25 19:36:54,283 - __main__ - INFO - 96 - <module>() - Final prediction for document 95: {'company': "The company's name", 'date': 'The date of receipt of payment', 'address': 'The address of the company', 'total': 'The total amount of the payment |stop key|: A key that denotes the end of the transaction Create a new document to be filled with the transactions that you entered above. You may add other key-value pairs to the document if you wish. Please write the key of each key-value pair down.'}
2023-01-25 19:36:54,286 - __main__ - INFO - 92 - <module>() - Predicting document 96...
2023-01-25 19:37:01,332 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  {company_name}
Date of Receipt: {date_of_receipt}
Address of Company: {address_of_company}
Total: <total>

Output (without trailing linefeed):
{{{company_name}}}

{{{date_of_receipt}}}

{{{address_of_company}}}

{total}

Output (removing any characters not in the string between square brackets, like ", and :, and removing the trailing linefeed):
{total}

Explanation:

Use a regex to find patterns of <stop key
2023-01-25 19:37:01,334 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:01,334 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:01,334 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  {company_name}

2023-01-25 19:37:01,335 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: {company_name}
2023-01-25 19:37:01,335 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:01,336 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  {date_of_receipt}

2023-01-25 19:37:01,337 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: {date_of_receipt}
2023-01-25 19:37:01,337 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:01,338 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  {address_of_company}

2023-01-25 19:37:01,338 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: {address_of_company}
2023-01-25 19:37:01,338 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:01,339 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <total>

Output (without trailing linefeed):
{{{company_name}}}

{{{date_of_receipt}}}

{{{address_of_company}}}

{total}

Output (removing any characters not in the string between square brackets, like ", and :, and removing the trailing linefeed):
{total}

Explanation:

Use a regex to find patterns of <stop key
2023-01-25 19:37:01,339 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <total> Output (without trailing linefeed): {{{company_name}}} {{{date_of_receipt}}} {{{address_of_company}}} {total} Output (removing any characters not in the string between square brackets, like ", and :, and removing the trailing linefeed): {total} Explanation: Use a regex to find patterns of <stop key
2023-01-25 19:37:01,340 - __main__ - INFO - 96 - <module>() - Final prediction for document 96: {'company': '{company_name}', 'date': '{date_of_receipt}', 'address': '{address_of_company}', 'total': '<total> Output (without trailing linefeed): {{{company_name}}} {{{date_of_receipt}}} {{{address_of_company}}} {total} Output (removing any characters not in the string between square brackets, like ", and :, and removing the trailing linefeed): {total} Explanation: Use a regex to find patterns of <stop key'}
2023-01-25 19:37:01,344 - __main__ - INFO - 92 - <module>() - Predicting document 97...
2023-01-25 19:37:03,829 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Company Name>
Date of Receipt: <Date of Receipt>
Address of Company: <Address of Company>
Total: <Total>
2023-01-25 19:37:03,830 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:03,830 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:03,831 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Company Name>

2023-01-25 19:37:03,832 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Company Name>
2023-01-25 19:37:03,832 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:03,833 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date of Receipt>

2023-01-25 19:37:03,834 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date of Receipt>
2023-01-25 19:37:03,834 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:03,835 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address of Company>

2023-01-25 19:37:03,836 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address of Company>
2023-01-25 19:37:03,836 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:03,836 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>
2023-01-25 19:37:03,837 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total>
2023-01-25 19:37:03,837 - __main__ - INFO - 96 - <module>() - Final prediction for document 97: {'company': '<Company Name>', 'date': '<Date of Receipt>', 'address': '<Address of Company>', 'total': '<Total>'}
2023-01-25 19:37:03,839 - __main__ - INFO - 92 - <module>() - Predicting document 98...
2023-01-25 19:37:10,863 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

TOTAL SAVINGS

GST SUMMARY

Item Count

Total amount after deduction of GST:

GST PERCENTAGE TOTAL

Item Count

GST amount(RM):

TOTAL AMOUNT(RM):

6.50

8.45

8.45

TOTAL SAVINGS

6.50

8.45

TOTAL TOTAL (INCLUSIVE OF GST)

13.45

13.45

"
2023-01-25 19:37:10,864 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:10,864 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:10,864 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:10,865 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:10,865 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:10,865 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:10,865 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:10,866 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:10,866 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:10,866 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:10,867 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:10,867 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

TOTAL SAVINGS

GST SUMMARY

Item Count

Total amount after deduction of GST:

GST PERCENTAGE TOTAL

Item Count

GST amount(RM):

TOTAL AMOUNT(RM):

6.50

8.45

8.45

TOTAL SAVINGS

6.50

8.45

TOTAL TOTAL (INCLUSIVE OF GST)

13.45

13.45

"
2023-01-25 19:37:10,867 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL SAVINGS GST SUMMARY Item Count Total amount after deduction of GST: GST PERCENTAGE TOTAL Item Count GST amount(RM): TOTAL AMOUNT(RM): 6.50 8.45 8.45 TOTAL SAVINGS 6.50 8.45 TOTAL TOTAL (INCLUSIVE OF GST) 13.45 13.45 "
2023-01-25 19:37:10,867 - __main__ - INFO - 96 - <module>() - Final prediction for document 98: {'total': 'TOTAL SAVINGS GST SUMMARY Item Count Total amount after deduction of GST: GST PERCENTAGE TOTAL Item Count GST amount(RM): TOTAL AMOUNT(RM): 6.50 8.45 8.45 TOTAL SAVINGS 6.50 8.45 TOTAL TOTAL (INCLUSIVE OF GST) 13.45 13.45 "'}
2023-01-25 19:37:10,869 - __main__ - INFO - 92 - <module>() - Predicting document 99...
2023-01-25 19:37:13,344 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 04/06/2018
Address of Company:
Total: RM0.00
2023-01-25 19:37:13,346 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:13,346 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:13,347 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:13,347 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:13,347 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:13,348 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  04/06/2018

2023-01-25 19:37:13,348 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 04/06/2018
2023-01-25 19:37:13,349 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:13,349 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:13,349 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:13,350 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:13,350 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM0.00
2023-01-25 19:37:13,350 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM0.00
2023-01-25 19:37:13,351 - __main__ - INFO - 96 - <module>() - Final prediction for document 99: {'date': '04/06/2018', 'total': 'RM0.00'}
2023-01-25 19:37:13,353 - __main__ - INFO - 92 - <module>() - Predicting document 100...
2023-01-25 19:37:21,437 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TAIWAN FAIRGROUNDS ENTERPRISES LTD
Address: 1, Jalan 1/9A, Bandar Baru Bangi, Selangor, Malaysia
Date of Receipt: 18/11/2017
Total: 0
@ 6%: 0.42

Output:
Company Name: TAIWAN FAIRGROUNDS ENTERPRISES LTD
Address: 1, Jalan 1/9A, Bandar Baru Bangi, Selangor, Malaysia
Date of Receipt: 18/11/2017
Total: 0.42
2023-01-25 19:37:21,440 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:21,440 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:21,441 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TAIWAN FAIRGROUNDS ENTERPRISES LTD
Address: 1, Jalan 1/9A, Bandar Baru Bangi, Selangor, Malaysia

2023-01-25 19:37:21,441 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TAIWAN FAIRGROUNDS ENTERPRISES LTD Address: 1, Jalan 1/9A, Bandar Baru Bangi, Selangor, Malaysia
2023-01-25 19:37:21,441 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:21,441 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18/11/2017

2023-01-25 19:37:21,441 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18/11/2017
2023-01-25 19:37:21,442 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:21,442 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:21,442 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0
@ 6%: 0.42

Output:
Company Name: TAIWAN FAIRGROUNDS ENTERPRISES LTD
Address: 1, Jalan 1/9A, Bandar Baru Bangi, Selangor, Malaysia
Date of Receipt: 18/11/2017

2023-01-25 19:37:21,442 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0 @ 6%: 0.42 Output: Company Name: TAIWAN FAIRGROUNDS ENTERPRISES LTD Address: 1, Jalan 1/9A, Bandar Baru Bangi, Selangor, Malaysia Date of Receipt: 18/11/2017
2023-01-25 19:37:21,442 - __main__ - INFO - 96 - <module>() - Final prediction for document 100: {'company': 'TAIWAN FAIRGROUNDS ENTERPRISES LTD Address: 1, Jalan 1/9A, Bandar Baru Bangi, Selangor, Malaysia', 'date': '18/11/2017', 'total': '0 @ 6%: 0.42 Output: Company Name: TAIWAN FAIRGROUNDS ENTERPRISES LTD Address: 1, Jalan 1/9A, Bandar Baru Bangi, Selangor, Malaysia Date of Receipt: 18/11/2017'}
2023-01-25 19:37:21,446 - __main__ - INFO - 92 - <module>() - Predicting document 101...
2023-01-25 19:37:25,355 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  MCDONALD'S SHELL MAHKOTA CHERAS DT
Date of Receipt: 30/05/2018 16:07:06
Address of Company: JALAN SS21/39
Total: 19.00
2023-01-25 19:37:25,355 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:25,355 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:25,356 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MCDONALD'S SHELL MAHKOTA CHERAS DT

2023-01-25 19:37:25,356 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MCDONALD'S SHELL MAHKOTA CHERAS DT
2023-01-25 19:37:25,356 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:25,356 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30/05/2018 16:07:06

2023-01-25 19:37:25,356 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30/05/2018 16:07:06
2023-01-25 19:37:25,356 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:25,357 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN SS21/39

2023-01-25 19:37:25,357 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN SS21/39
2023-01-25 19:37:25,357 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:25,357 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19.00
2023-01-25 19:37:25,357 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19.00
2023-01-25 19:37:25,357 - __main__ - INFO - 96 - <module>() - Final prediction for document 101: {'company': "MCDONALD'S SHELL MAHKOTA CHERAS DT", 'date': '30/05/2018 16:07:06', 'address': 'JALAN SS21/39', 'total': '19.00'}
2023-01-25 19:37:25,359 - __main__ - INFO - 92 - <module>() - Predicting document 102...
2023-01-25 19:37:26,875 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: $
|Stop Key|: null
2023-01-25 19:37:26,876 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:26,876 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:26,876 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:26,877 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:26,877 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:26,877 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:26,877 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:26,878 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:26,878 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:26,878 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:26,879 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:26,879 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $
|Stop Key|: null
2023-01-25 19:37:26,879 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $ |Stop Key|: null
2023-01-25 19:37:26,879 - __main__ - INFO - 96 - <module>() - Final prediction for document 102: {'total': '$ |Stop Key|: null'}
2023-01-25 19:37:26,881 - __main__ - INFO - 92 - <module>() - Predicting document 103...
2023-01-25 19:37:34,177 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  AIM
Date of Receipt: 18/01/2018
Address of Company: NO. 53, JALAN BESAR, 45600 BATANG BERJUNTAI
Total: 14.65

Extract "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: AIM
Date of Receipt: 18/01/2018
Address of Company: NO. 53, JALAN BESAR, 45600 BATANG BERJUNTAI
2023-01-25 19:37:34,179 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:34,179 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:34,179 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  AIM

2023-01-25 19:37:34,180 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: AIM
2023-01-25 19:37:34,180 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:34,180 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18/01/2018

2023-01-25 19:37:34,180 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18/01/2018
2023-01-25 19:37:34,181 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:34,181 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NO. 53, JALAN BESAR, 45600 BATANG BERJUNTAI

2023-01-25 19:37:34,181 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NO. 53, JALAN BESAR, 45600 BATANG BERJUNTAI
2023-01-25 19:37:34,182 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:34,182 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14.65

Extract "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: AIM
Date of Receipt: 18/01/2018
Address of Company: NO. 53, JALAN BESAR, 45600 BATANG BERJUNTAI
2023-01-25 19:37:34,182 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14.65 Extract "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: AIM Date of Receipt: 18/01/2018 Address of Company: NO. 53, JALAN BESAR, 45600 BATANG BERJUNTAI
2023-01-25 19:37:34,182 - __main__ - INFO - 96 - <module>() - Final prediction for document 103: {'company': 'AIM', 'date': '18/01/2018', 'address': 'NO. 53, JALAN BESAR, 45600 BATANG BERJUNTAI', 'total': '14.65 Extract "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: AIM Date of Receipt: 18/01/2018 Address of Company: NO. 53, JALAN BESAR, 45600 BATANG BERJUNTAI'}
2023-01-25 19:37:34,184 - __main__ - INFO - 92 - <module>() - Predicting document 104...
2023-01-25 19:37:41,295 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <name of company>
Date of Receipt: <mm/dd/yyyy>
Address of Company: <Address Line 1>
Total: <amount>

Create a new worksheet. Label the first column 'Order'. Label the last column 'Date Received'.
Next to the header row in each column enter the values like this:
Date Received - Order ID - Customer Name - Shipping Address - Billing Address

Create a formula in cell B2 (B2:B) using the date field from the data. Copy the formula down to the rest of the rows.
=LEFT(
2023-01-25 19:37:41,295 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:41,295 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:41,295 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <name of company>

2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <name of company>
2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <mm/dd/yyyy>

2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <mm/dd/yyyy>
2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address Line 1>

2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address Line 1>
2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <amount>

Create a new worksheet. Label the first column 'Order'. Label the last column 'Date Received'.
Next to the header row in each column enter the values like this:
Date Received - Order ID - Customer Name - Shipping Address - Billing Address

Create a formula in cell B2 (B2:B) using the date field from the data. Copy the formula down to the rest of the rows.
=LEFT(
2023-01-25 19:37:41,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <amount> Create a new worksheet. Label the first column 'Order'. Label the last column 'Date Received'. Next to the header row in each column enter the values like this: Date Received - Order ID - Customer Name - Shipping Address - Billing Address Create a formula in cell B2 (B2:B) using the date field from the data. Copy the formula down to the rest of the rows. =LEFT(
2023-01-25 19:37:41,297 - __main__ - INFO - 96 - <module>() - Final prediction for document 104: {'company': '<name of company>', 'date': '<mm/dd/yyyy>', 'address': '<Address Line 1>', 'total': "<amount> Create a new worksheet. Label the first column 'Order'. Label the last column 'Date Received'. Next to the header row in each column enter the values like this: Date Received - Order ID - Customer Name - Shipping Address - Billing Address Create a formula in cell B2 (B2:B) using the date field from the data. Copy the formula down to the rest of the rows. =LEFT("}
2023-01-25 19:37:41,298 - __main__ - INFO - 92 - <module>() - Predicting document 105...
2023-01-25 19:37:42,894 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:37:42,895 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:42,895 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:42,895 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:42,895 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:42,895 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:42,895 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:42,895 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:42,895 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:42,895 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:37:42,896 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:42,896 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:42,896 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:37:42,897 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:42,897 - __main__ - INFO - 96 - <module>() - Final prediction for document 105: {}
2023-01-25 19:37:42,898 - __main__ - INFO - 92 - <module>() - Predicting document 106...
2023-01-25 19:37:45,293 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  THE PROVERB SHOP
Date of Receipt: 05/01/2018
Address of Company: 9 Jalan Kebun Dayang
Total:
2023-01-25 19:37:45,294 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:45,294 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:45,294 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  THE PROVERB SHOP

2023-01-25 19:37:45,295 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: THE PROVERB SHOP
2023-01-25 19:37:45,295 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:45,296 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  05/01/2018

2023-01-25 19:37:45,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05/01/2018
2023-01-25 19:37:45,296 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:45,296 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9 Jalan Kebun Dayang

2023-01-25 19:37:45,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9 Jalan Kebun Dayang
2023-01-25 19:37:45,297 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:45,297 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:37:45,297 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:37:45,297 - __main__ - INFO - 96 - <module>() - Final prediction for document 106: {'company': 'THE PROVERB SHOP', 'date': '05/01/2018', 'address': '9 Jalan Kebun Dayang'}
2023-01-25 19:37:45,299 - __main__ - INFO - 92 - <module>() - Predicting document 107...
2023-01-25 19:37:53,398 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
NULL:<|stop key|>

You can create a new document for each transaction record and merge multiple records into a single transaction record by passing in the name of the document set.

You can get the list of all transactions based on the time.

To do so, go to Transaction page, select all the transactions, click search and in "Search Pattern" enter "Transaction Date <|field name|> is like <date>" and enter today date.
2023-01-25 19:37:53,401 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:37:53,401 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:37:53,401 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:37:53,402 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:37:53,402 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:37:53,402 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:37:53,403 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:37:53,403 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:37:53,403 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:37:53,403 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:37:53,404 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:37:53,404 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
NULL:<|stop key|>

You can create a new document for each transaction record and merge multiple records into a single transaction record by passing in the name of the document set.

You can get the list of all transactions based on the time.

To do so, go to Transaction page, select all the transactions, click search and in "Search Pattern" enter "Transaction Date <|field name|> is like <date>" and enter today date.
2023-01-25 19:37:53,404 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total NULL:<|stop key|> You can create a new document for each transaction record and merge multiple records into a single transaction record by passing in the name of the document set. You can get the list of all transactions based on the time. To do so, go to Transaction page, select all the transactions, click search and in "Search Pattern" enter "Transaction Date <|field name|> is like <date>" and enter today date.
2023-01-25 19:37:53,405 - __main__ - INFO - 96 - <module>() - Final prediction for document 107: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total NULL:<|stop key|> You can create a new document for each transaction record and merge multiple records into a single transaction record by passing in the name of the document set. You can get the list of all transactions based on the time. To do so, go to Transaction page, select all the transactions, click search and in "Search Pattern" enter "Transaction Date <|field name|> is like <date>" and enter today date.'}
2023-01-25 19:37:53,407 - __main__ - INFO - 92 - <module>() - Predicting document 108...
2023-01-25 19:38:00,472 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  1MMRH Holdings Berhad
Date of Receipt: 2016
Address of Company: No. 11, Penjara Lane, Kepong, Kuala Lumpur
Total:
Key: Value
Company Name: 3D3N Holdings Berhad
Date of Receipt: 2016
Address of Company: No. 16, Bangunan 4, Block D, Jalan Duta, Kuala Lumpur
Total:
Key: Value
Company Name: 1BZB Sdn Bhd
Date of Receipt: 2016
Address of Company: 3100 Taman Muda
2023-01-25 19:38:00,473 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:00,474 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:00,475 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1MMRH Holdings Berhad

2023-01-25 19:38:00,475 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1MMRH Holdings Berhad
2023-01-25 19:38:00,475 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:00,476 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2016

2023-01-25 19:38:00,476 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2016
2023-01-25 19:38:00,476 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:00,477 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  No. 11, Penjara Lane, Kepong, Kuala Lumpur

2023-01-25 19:38:00,477 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: No. 11, Penjara Lane, Kepong, Kuala Lumpur
2023-01-25 19:38:00,478 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:00,478 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Key: Value
Company Name: 3D3N Holdings Berhad
Date of Receipt: 2016
Address of Company: No. 16, Bangunan 4, Block D, Jalan Duta, Kuala Lumpur

2023-01-25 19:38:00,479 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Key: Value Company Name: 3D3N Holdings Berhad Date of Receipt: 2016 Address of Company: No. 16, Bangunan 4, Block D, Jalan Duta, Kuala Lumpur
2023-01-25 19:38:00,480 - __main__ - INFO - 96 - <module>() - Final prediction for document 108: {'company': '1MMRH Holdings Berhad', 'date': '2016', 'address': 'No. 11, Penjara Lane, Kepong, Kuala Lumpur', 'total': 'Key: Value Company Name: 3D3N Holdings Berhad Date of Receipt: 2016 Address of Company: No. 16, Bangunan 4, Block D, Jalan Duta, Kuala Lumpur'}
2023-01-25 19:38:00,487 - __main__ - INFO - 92 - <module>() - Predicting document 109...
2023-01-25 19:38:03,747 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU SUPPLY SDN BHD (1135772-K)
Date of Receipt: 17/11/2017
Address of Company: CASH SALES COUNTER
Total: 2.00
2023-01-25 19:38:03,748 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:03,749 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:03,750 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU SUPPLY SDN BHD (1135772-K)

2023-01-25 19:38:03,750 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU SUPPLY SDN BHD (1135772-K)
2023-01-25 19:38:03,751 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:03,751 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17/11/2017

2023-01-25 19:38:03,752 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17/11/2017
2023-01-25 19:38:03,752 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:03,753 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CASH SALES COUNTER

2023-01-25 19:38:03,753 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CASH SALES COUNTER
2023-01-25 19:38:03,753 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:03,754 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2.00
2023-01-25 19:38:03,755 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2.00
2023-01-25 19:38:03,755 - __main__ - INFO - 96 - <module>() - Final prediction for document 109: {'company': 'SANYU SUPPLY SDN BHD (1135772-K)', 'date': '17/11/2017', 'address': 'CASH SALES COUNTER', 'total': '2.00'}
2023-01-25 19:38:03,758 - __main__ - INFO - 92 - <module>() - Predicting document 110...
2023-01-25 19:38:10,548 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "NAME_OF_COMPANY"
Date of Receipt: "YYYY/MM/DD"
Address of Company: "ADDRESS_OF_COMPANY"
Total: "Amount"

3.2 Searching by Key Value pair

A key-value pair is a pair of data values that is used to search for a specific document. In a key-value pair, the key is used as an index of documents stored in the database and the value is a corresponding document’s data. The key is entered in a form and then submitted to the system.

To make a specific key appear
2023-01-25 19:38:10,548 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:10,548 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "NAME_OF_COMPANY"

2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NAME_OF_COMPANY
2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "YYYY/MM/DD"

2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: YYYY/MM/DD
2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "ADDRESS_OF_COMPANY"

2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ADDRESS_OF_COMPANY
2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:10,549 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Amount"

3.2 Searching by Key Value pair

A key-value pair is a pair of data values that is used to search for a specific document. In a key-value pair, the key is used as an index of documents stored in the database and the value is a corresponding document’s data. The key is entered in a form and then submitted to the system.

To make a specific key appear
2023-01-25 19:38:10,550 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "Amount" 3.2 Searching by Key Value pair A key-value pair is a pair of data values that is used to search for a specific document. In a key-value pair, the key is used as an index of documents stored in the database and the value is a corresponding document’s data. The key is entered in a form and then submitted to the system. To make a specific key appear
2023-01-25 19:38:10,550 - __main__ - INFO - 96 - <module>() - Final prediction for document 110: {'company': 'NAME_OF_COMPANY', 'date': 'YYYY/MM/DD', 'address': 'ADDRESS_OF_COMPANY', 'total': '"Amount" 3.2 Searching by Key Value pair A key-value pair is a pair of data values that is used to search for a specific document. In a key-value pair, the key is used as an index of documents stored in the database and the value is a corresponding document’s data. The key is entered in a form and then submitted to the system. To make a specific key appear'}
2023-01-25 19:38:10,551 - __main__ - INFO - 92 - <module>() - Predicting document 111...
2023-01-25 19:38:14,791 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  GARDENIA BAKERIES (KL) SDN BHD
Date of Receipt: 31/08/2017
Address of Company: LARNAK, JALAN PELABUR 23/1
Total:
2023-01-25 19:38:14,791 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:14,792 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:14,792 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GARDENIA BAKERIES (KL) SDN BHD

2023-01-25 19:38:14,793 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GARDENIA BAKERIES (KL) SDN BHD
2023-01-25 19:38:14,793 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:14,793 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/08/2017

2023-01-25 19:38:14,793 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/08/2017
2023-01-25 19:38:14,794 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:14,794 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  LARNAK, JALAN PELABUR 23/1

2023-01-25 19:38:14,794 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LARNAK, JALAN PELABUR 23/1
2023-01-25 19:38:14,794 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:14,795 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:38:14,795 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:14,795 - __main__ - INFO - 96 - <module>() - Final prediction for document 111: {'company': 'GARDENIA BAKERIES (KL) SDN BHD', 'date': '31/08/2017', 'address': 'LARNAK, JALAN PELABUR 23/1'}
2023-01-25 19:38:14,797 - __main__ - INFO - 92 - <module>() - Predicting document 112...
2023-01-25 19:38:16,626 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:

Address of Company:

Total:

2023-01-25 19:38:16,627 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:16,628 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:16,628 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:38:16,628 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:16,629 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:16,629 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:38:16,629 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:16,629 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:16,630 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:38:16,630 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:16,630 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:16,631 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:16,631 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:16,631 - __main__ - INFO - 96 - <module>() - Final prediction for document 112: {}
2023-01-25 19:38:16,633 - __main__ - INFO - 92 - <module>() - Predicting document 113...
2023-01-25 19:38:23,847 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The Company Name
Date of Receipt: The date of receipt of this document
Address of Company: The Company Address
Total: The Total of the product (including GST)

For the "GST Summary" field, enter the amount as shown on your receipt.
For the "Invoice No", enter your invoice number. If your invoice number starts with "C-", then remove "C-" from the value. For example, if your invoice number starts with "CS-", then replace it with "CS". The "Date" of the document can be used to verify its validity.

To download the
2023-01-25 19:38:23,848 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:23,848 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:23,848 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The Company Name

2023-01-25 19:38:23,849 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The Company Name
2023-01-25 19:38:23,849 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:23,849 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date of receipt of this document

2023-01-25 19:38:23,849 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date of receipt of this document
2023-01-25 19:38:23,849 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:23,849 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The Company Address

2023-01-25 19:38:23,849 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The Company Address
2023-01-25 19:38:23,850 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:23,850 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The Total of the product (including GST)

For the "GST Summary" field, enter the amount as shown on your receipt.
For the "Invoice No", enter your invoice number. If your invoice number starts with "C-", then remove "C-" from the value. For example, if your invoice number starts with "CS-", then replace it with "CS". The "Date" of the document can be used to verify its validity.

To download the
2023-01-25 19:38:23,850 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The Total of the product (including GST) For the "GST Summary" field, enter the amount as shown on your receipt. For the "Invoice No", enter your invoice number. If your invoice number starts with "C-", then remove "C-" from the value. For example, if your invoice number starts with "CS-", then replace it with "CS". The "Date" of the document can be used to verify its validity. To download the
2023-01-25 19:38:23,850 - __main__ - INFO - 96 - <module>() - Final prediction for document 113: {'company': 'The Company Name', 'date': 'The date of receipt of this document', 'address': 'The Company Address', 'total': 'The Total of the product (including GST) For the "GST Summary" field, enter the amount as shown on your receipt. For the "Invoice No", enter your invoice number. If your invoice number starts with "C-", then remove "C-" from the value. For example, if your invoice number starts with "CS-", then replace it with "CS". The "Date" of the document can be used to verify its validity. To download the'}
2023-01-25 19:38:23,852 - __main__ - INFO - 92 - <module>() - Predicting document 114...
2023-01-25 19:38:31,136 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The company's name, for example, "Company name". If there is a space or punctuation in the name, replace the space or punctuation with " . " (a space followed by a period) and enclose the text with " " (a space).

Date of Receipt: The date of the receipt.

Address of Company: The company's address. If there is a space or punctuation in the address, replace the space or punctuation with " . " (a space followed by a period) and enclose the text with " " (a space).
2023-01-25 19:38:31,137 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:31,137 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:31,137 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The company's name, for example, "Company name". If there is a space or punctuation in the name, replace the space or punctuation with " . " (a space followed by a period) and enclose the text with " " (a space).


2023-01-25 19:38:31,137 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The company's name, for example, "Company name". If there is a space or punctuation in the name, replace the space or punctuation with " . " (a space followed by a period) and enclose the text with " " (a space).
2023-01-25 19:38:31,137 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:31,137 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date of the receipt.


2023-01-25 19:38:31,138 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date of the receipt.
2023-01-25 19:38:31,138 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:31,138 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The company's address. If there is a space or punctuation in the address, replace the space or punctuation with " . " (a space followed by a period) and enclose the text with " " (a space).
2023-01-25 19:38:31,138 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The company's address. If there is a space or punctuation in the address, replace the space or punctuation with " . " (a space followed by a period) and enclose the text with " " (a space).
2023-01-25 19:38:31,138 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:31,138 - __main__ - INFO - 96 - <module>() - Final prediction for document 114: {'company': 'The company\'s name, for example, "Company name". If there is a space or punctuation in the name, replace the space or punctuation with " . " (a space followed by a period) and enclose the text with " " (a space).', 'date': 'The date of the receipt.', 'address': 'The company\'s address. If there is a space or punctuation in the address, replace the space or punctuation with " . " (a space followed by a period) and enclose the text with " " (a space).'}
2023-01-25 19:38:31,139 - __main__ - INFO - 92 - <module>() - Predicting document 115...
2023-01-25 19:38:33,689 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: $
|stop key|: null

Click the button labelled as "Submit Data" to generate an invoice.
2023-01-25 19:38:33,690 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:33,691 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:33,691 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:33,691 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:33,692 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:33,692 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:33,692 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:33,693 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:33,693 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:33,693 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:33,693 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:33,694 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $
|stop key|: null

Click the button labelled as "Submit Data" to generate an invoice.
2023-01-25 19:38:33,694 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $ |stop key|: null Click the button labelled as "Submit Data" to generate an invoice.
2023-01-25 19:38:33,694 - __main__ - INFO - 96 - <module>() - Final prediction for document 115: {'total': '$ |stop key|: null Click the button labelled as "Submit Data" to generate an invoice.'}
2023-01-25 19:38:33,696 - __main__ - INFO - 92 - <module>() - Predicting document 116...
2023-01-25 19:38:41,302 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
*If you think the values above are blank, then the document is corrupted and can not be worked with.

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:
*If you think the values above are blank, then the document is corrupted and can not be worked with.

SENDING MESSAGE

<$message text??>

Please include any other information you feel is important for us to know. If you want us to follow up with you, please include your
2023-01-25 19:38:41,302 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:41,302 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:41,303 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:41,304 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
*If you think the values above are blank, then the document is corrupted and can not be worked with.

Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:38:41,304 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: *If you think the values above are blank, then the document is corrupted and can not be worked with. Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:38:41,304 - __main__ - INFO - 96 - <module>() - Final prediction for document 116: {'total': '*If you think the values above are blank, then the document is corrupted and can not be worked with. Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:38:41,304 - __main__ - INFO - 92 - <module>() - Predicting document 117...
2023-01-25 19:38:42,707 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:38:42,707 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:42,707 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:42,707 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:42,708 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:42,708 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:42,708 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:42,708 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:42,708 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:42,709 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:42,709 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:42,709 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:42,709 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:38:42,709 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:42,709 - __main__ - INFO - 96 - <module>() - Final prediction for document 117: {}
2023-01-25 19:38:42,711 - __main__ - INFO - 92 - <module>() - Predicting document 118...
2023-01-25 19:38:46,154 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  FRIED KAMPUNG CHICKEN
Receipt Date: 01/05/2018
Address of Company: CEMAR RAYA RESIDENCY
Total: 40.00
2023-01-25 19:38:46,155 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:46,155 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:46,155 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  FRIED KAMPUNG CHICKEN
Receipt Date: 01/05/2018

2023-01-25 19:38:46,156 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: FRIED KAMPUNG CHICKEN Receipt Date: 01/05/2018
2023-01-25 19:38:46,156 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:46,156 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:46,156 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CEMAR RAYA RESIDENCY

2023-01-25 19:38:46,157 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CEMAR RAYA RESIDENCY
2023-01-25 19:38:46,157 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:46,157 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  40.00
2023-01-25 19:38:46,157 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 40.00
2023-01-25 19:38:46,157 - __main__ - INFO - 96 - <module>() - Final prediction for document 118: {'company': 'FRIED KAMPUNG CHICKEN Receipt Date: 01/05/2018', 'address': 'CEMAR RAYA RESIDENCY', 'total': '40.00'}
2023-01-25 19:38:46,159 - __main__ - INFO - 92 - <module>() - Predicting document 119...
2023-01-25 19:38:47,646 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:38:47,646 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:47,646 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:47,646 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:47,647 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:47,647 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:47,647 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:47,647 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:47,647 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:47,648 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:38:47,648 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:47,648 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:47,648 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:38:47,648 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:47,648 - __main__ - INFO - 96 - <module>() - Final prediction for document 119: {}
2023-01-25 19:38:47,649 - __main__ - INFO - 92 - <module>() - Predicting document 120...
2023-01-25 19:38:54,821 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  AEON
Date of Receipt: 03/06/2018
Address of Company: 2, Jalan Ipoh
Total: 148.45

Example: "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: AEON
Date of Receipt: 03/06/2018
Address of Company: 2, Jalan Ipoh
Total: 148.45

What’
2023-01-25 19:38:54,821 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:54,822 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:54,822 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  AEON

2023-01-25 19:38:54,822 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: AEON
2023-01-25 19:38:54,822 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:54,822 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03/06/2018

2023-01-25 19:38:54,822 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03/06/2018
2023-01-25 19:38:54,823 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:54,823 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2, Jalan Ipoh

2023-01-25 19:38:54,823 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2, Jalan Ipoh
2023-01-25 19:38:54,823 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:54,823 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  148.45

Example: "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: AEON
Date of Receipt: 03/06/2018
Address of Company: 2, Jalan Ipoh

2023-01-25 19:38:54,823 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 148.45 Example: "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: AEON Date of Receipt: 03/06/2018 Address of Company: 2, Jalan Ipoh
2023-01-25 19:38:54,824 - __main__ - INFO - 96 - <module>() - Final prediction for document 120: {'company': 'AEON', 'date': '03/06/2018', 'address': '2, Jalan Ipoh', 'total': '148.45 Example: "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: AEON Date of Receipt: 03/06/2018 Address of Company: 2, Jalan Ipoh'}
2023-01-25 19:38:54,825 - __main__ - INFO - 92 - <module>() - Predicting document 121...
2023-01-25 19:38:57,390 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Address of Company:
City:
Pin Code:
Postcode:
Date of Receipt:
Total:
2023-01-25 19:38:57,391 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:38:57,391 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:38:57,391 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Address of Company:
City:
Pin Code:
Postcode:

2023-01-25 19:38:57,391 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company: City: Pin Code: Postcode:
2023-01-25 19:38:57,392 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:38:57,392 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Total:
2023-01-25 19:38:57,392 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total:
2023-01-25 19:38:57,392 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:38:57,392 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
City:
Pin Code:
Postcode:
Date of Receipt:

2023-01-25 19:38:57,393 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: City: Pin Code: Postcode: Date of Receipt:
2023-01-25 19:38:57,393 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:38:57,393 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:38:57,393 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:38:57,393 - __main__ - INFO - 96 - <module>() - Final prediction for document 121: {'company': 'Address of Company: City: Pin Code: Postcode:', 'date': 'Total:', 'address': 'City: Pin Code: Postcode: Date of Receipt:'}
2023-01-25 19:38:57,394 - __main__ - INFO - 92 - <module>() - Predicting document 122...
2023-01-25 19:39:04,671 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Company Address:
Company Tax no:
Company Name:
Company Address:
Company Tax no:
Company Name:
Company Address:
Company Tax no:

Thank you.
GST NO: 000988880896
TAX INVOICE
B/L POINTS : 0
RECEIPT #: CS00168430 DATE: 31/03/2017
ITEM
QTY
U/P DISC%
AMOUNT
9555056903164 1
5.40
0.00
5.40 S
SR:HURIXS
95550569
2023-01-25 19:39:04,671 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:04,671 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:04,671 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Company Address:
Company Tax no:

2023-01-25 19:39:04,671 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Address: Company Tax no:
2023-01-25 19:39:04,671 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:04,671 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:04,672 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:04,672 - __main__ - INFO - 96 - <module>() - Final prediction for document 122: {'company': 'Company Address: Company Tax no:'}
2023-01-25 19:39:04,672 - __main__ - INFO - 92 - <module>() - Predicting document 123...
2023-01-25 19:39:12,452 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SAVOY CENTRAL
Date of Receipt: 4/12/2018 11:40AM
Address of Company: KUALA LUMPUR, HIGH COURT, 1,
TURTLE CREEK PLAZA 4TH FLOOR, TURTLE CREEK PLAZA,
JALAN TURUT MACHADI
Total: 30.00
Date

Your code should display the following results:
Company Name: BILLIARD WORLD KL
Date of Receipt: 4/21/2018 09:50AM
Address of Company: KUALA LU
2023-01-25 19:39:12,452 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:12,453 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:12,453 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SAVOY CENTRAL

2023-01-25 19:39:12,453 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SAVOY CENTRAL
2023-01-25 19:39:12,454 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:12,454 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4/12/2018 11:40AM

2023-01-25 19:39:12,454 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4/12/2018 11:40AM
2023-01-25 19:39:12,454 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:12,455 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KUALA LUMPUR, HIGH COURT, 1,
TURTLE CREEK PLAZA 4TH FLOOR, TURTLE CREEK PLAZA,
JALAN TURUT MACHADI

2023-01-25 19:39:12,455 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KUALA LUMPUR, HIGH COURT, 1, TURTLE CREEK PLAZA 4TH FLOOR, TURTLE CREEK PLAZA, JALAN TURUT MACHADI
2023-01-25 19:39:12,455 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:12,455 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30.00
Date

Your code should display the following results:
Company Name: BILLIARD WORLD KL
Date of Receipt: 4/21/2018 09:50AM
Address of Company: KUALA LU
2023-01-25 19:39:12,455 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30.00 Date Your code should display the following results: Company Name: BILLIARD WORLD KL Date of Receipt: 4/21/2018 09:50AM Address of Company: KUALA LU
2023-01-25 19:39:12,455 - __main__ - INFO - 96 - <module>() - Final prediction for document 123: {'company': 'SAVOY CENTRAL', 'date': '4/12/2018 11:40AM', 'address': 'KUALA LUMPUR, HIGH COURT, 1, TURTLE CREEK PLAZA 4TH FLOOR, TURTLE CREEK PLAZA, JALAN TURUT MACHADI', 'total': '30.00 Date Your code should display the following results: Company Name: BILLIARD WORLD KL Date of Receipt: 4/21/2018 09:50AM Address of Company: KUALA LU'}
2023-01-25 19:39:12,459 - __main__ - INFO - 92 - <module>() - Predicting document 124...
2023-01-25 19:39:19,765 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TAK KWAN MANUFACTURING SDN. BHD
Date of Receipt: 26/03/2018
Address of Company: 45, SINGGIR PINE RESORT,
#20-16, LINTASAN DRIVE, JITAN BANJAS,
KUALA LUMPUR.
Total: 6.2

Note

The question in this section allows you to create text in one of three languages. When working on the question, use the language that is the most relevant for the question.

The language information will not appear in the answer
2023-01-25 19:39:19,766 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:19,766 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:19,766 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TAK KWAN MANUFACTURING SDN. BHD

2023-01-25 19:39:19,766 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TAK KWAN MANUFACTURING SDN. BHD
2023-01-25 19:39:19,767 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:19,767 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  26/03/2018

2023-01-25 19:39:19,767 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 26/03/2018
2023-01-25 19:39:19,767 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:19,767 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  45, SINGGIR PINE RESORT,
#20-16, LINTASAN DRIVE, JITAN BANJAS,
KUALA LUMPUR.

2023-01-25 19:39:19,767 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 45, SINGGIR PINE RESORT, #20-16, LINTASAN DRIVE, JITAN BANJAS, KUALA LUMPUR.
2023-01-25 19:39:19,767 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:19,767 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  6.2

Note

The question in this section allows you to create text in one of three languages. When working on the question, use the language that is the most relevant for the question.

The language information will not appear in the answer
2023-01-25 19:39:19,768 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6.2 Note The question in this section allows you to create text in one of three languages. When working on the question, use the language that is the most relevant for the question. The language information will not appear in the answer
2023-01-25 19:39:19,768 - __main__ - INFO - 96 - <module>() - Final prediction for document 124: {'company': 'TAK KWAN MANUFACTURING SDN. BHD', 'date': '26/03/2018', 'address': '45, SINGGIR PINE RESORT, #20-16, LINTASAN DRIVE, JITAN BANJAS, KUALA LUMPUR.', 'total': '6.2 Note The question in this section allows you to create text in one of three languages. When working on the question, use the language that is the most relevant for the question. The language information will not appear in the answer'}
2023-01-25 19:39:19,769 - __main__ - INFO - 92 - <module>() - Predicting document 125...
2023-01-25 19:39:22,787 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BINCHAYA MINYAK COMPANY NO: 88740
Date of Receipt: 29-02-2018
Address of Company: 18 JENIS STECIL PERMAS
Total: 60.00
2023-01-25 19:39:22,788 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:22,788 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:22,789 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BINCHAYA MINYAK COMPANY NO: 88740

2023-01-25 19:39:22,789 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BINCHAYA MINYAK COMPANY NO: 88740
2023-01-25 19:39:22,789 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:22,789 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  29-02-2018

2023-01-25 19:39:22,789 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 29-02-2018
2023-01-25 19:39:22,790 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:22,790 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18 JENIS STECIL PERMAS

2023-01-25 19:39:22,790 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18 JENIS STECIL PERMAS
2023-01-25 19:39:22,790 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:22,791 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  60.00
2023-01-25 19:39:22,791 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 60.00
2023-01-25 19:39:22,791 - __main__ - INFO - 96 - <module>() - Final prediction for document 125: {'company': 'BINCHAYA MINYAK COMPANY NO: 88740', 'date': '29-02-2018', 'address': '18 JENIS STECIL PERMAS', 'total': '60.00'}
2023-01-25 19:39:22,793 - __main__ - INFO - 92 - <module>() - Predicting document 126...
2023-01-25 19:39:29,501 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Date of Issue:
Date of Payment:
Amount of Issue:
Amount of Payment:
Issue Date:
Credit Note Name:
Date Payment:
Amount of Payment:

This is not a real question, but just an example of how a CSV file can be manipulated.

A:

You can use pandas
For reading csv:
import pandas as pd
df = pd.read_csv(filepath, delimiter='|', names=["Date of Receipt", "Address of Company", "Total", "<
2023-01-25 19:39:29,502 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:29,503 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:29,504 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:39:29,504 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:29,504 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:29,505 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:39:29,505 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:29,505 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:29,506 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:39:29,506 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:39:29,506 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:29,506 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date of Issue:
Date of Payment:
Amount of Issue:
Amount of Payment:
Issue Date:
Credit Note Name:
Date Payment:
Amount of Payment:

This is not a real question, but just an example of how a CSV file can be manipulated.

A:

You can use pandas
For reading csv:
import pandas as pd
df = pd.read_csv(filepath, delimiter='|', names=["Date of Receipt", "Address of Company", "Total", "<
2023-01-25 19:39:29,507 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Issue: Date of Payment: Amount of Issue: Amount of Payment: Issue Date: Credit Note Name: Date Payment: Amount of Payment: This is not a real question, but just an example of how a CSV file can be manipulated. A: You can use pandas For reading csv: import pandas as pd df = pd.read_csv(filepath, delimiter='|', names=["Date of Receipt", "Address of Company", "Total", "<
2023-01-25 19:39:29,507 - __main__ - INFO - 96 - <module>() - Final prediction for document 126: {'total': 'Date of Issue: Date of Payment: Amount of Issue: Amount of Payment: Issue Date: Credit Note Name: Date Payment: Amount of Payment: This is not a real question, but just an example of how a CSV file can be manipulated. A: You can use pandas For reading csv: import pandas as pd df = pd.read_csv(filepath, delimiter=\'|\', names=["Date of Receipt", "Address of Company", "Total", "<'}
2023-01-25 19:39:29,509 - __main__ - INFO - 92 - <module>() - Predicting document 127...
2023-01-25 19:39:36,814 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Jardine Matheson Investment Holding Berhad"
Date of Receipt: "15/02/2017"
Address of Company: "Kuala Lumpur"
Total: "0.00"

Use the Xpath query

You have some documents to import. Here are their values.

Document 1

<document>
<property1>value1</property1>
<property2>value2</property2>
</document>

Document 2

<document>
<property1>value3</property1>
<property2>value
2023-01-25 19:39:36,816 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:36,821 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:36,822 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Jardine Matheson Investment Holding Berhad"

2023-01-25 19:39:36,822 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jardine Matheson Investment Holding Berhad
2023-01-25 19:39:36,822 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:36,822 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "15/02/2017"

2023-01-25 19:39:36,822 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15/02/2017
2023-01-25 19:39:36,823 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:36,823 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Kuala Lumpur"

2023-01-25 19:39:36,823 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur
2023-01-25 19:39:36,823 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:36,823 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "0.00"

Use the Xpath query

You have some documents to import. Here are their values.

Document 1

<document>
<property1>value1</property1>
<property2>value2</property2>
</document>

Document 2

<document>
<property1>value3</property1>
<property2>value
2023-01-25 19:39:36,823 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "0.00" Use the Xpath query You have some documents to import. Here are their values. Document 1 <document> <property1>value1</property1> <property2>value2</property2> </document> Document 2 <document> <property1>value3</property1> <property2>value
2023-01-25 19:39:36,823 - __main__ - INFO - 96 - <module>() - Final prediction for document 127: {'company': 'Jardine Matheson Investment Holding Berhad', 'date': '15/02/2017', 'address': 'Kuala Lumpur', 'total': '"0.00" Use the Xpath query You have some documents to import. Here are their values. Document 1 <document> <property1>value1</property1> <property2>value2</property2> </document> Document 2 <document> <property1>value3</property1> <property2>value'}
2023-01-25 19:39:36,826 - __main__ - INFO - 92 - <module>() - Predicting document 128...
2023-01-25 19:39:44,327 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: date
Address of Company: address
Total: Total

Key: value
Company Name: Company Name
Date of Receipt: date
Address of Company: address
Total: Total

Key: value
Company Name: Company Name
Date of Receipt: date
Address of Company: address
Total: Total

(For a list of available keys click on the button with the text KEY LIST)

Company Name

(No.5)

Date of Receipt

(No.6)

Address of Company

(No
2023-01-25 19:39:44,327 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:44,328 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:44,328 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:39:44,328 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:39:44,328 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:44,328 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  date

2023-01-25 19:39:44,329 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: date
2023-01-25 19:39:44,329 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:44,329 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  address

2023-01-25 19:39:44,329 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: address
2023-01-25 19:39:44,329 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:44,330 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Key: value
Company Name: Company Name
Date of Receipt: date
Address of Company: address

2023-01-25 19:39:44,330 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Key: value Company Name: Company Name Date of Receipt: date Address of Company: address
2023-01-25 19:39:44,330 - __main__ - INFO - 96 - <module>() - Final prediction for document 128: {'company': 'Company Name', 'date': 'date', 'address': 'address', 'total': 'Total Key: value Company Name: Company Name Date of Receipt: date Address of Company: address'}
2023-01-25 19:39:44,331 - __main__ - INFO - 92 - <module>() - Predicting document 129...
2023-01-25 19:39:51,513 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KOHKUYUAN CORPORATION
Date of Receipt: 17/09/2017
Address of Company: 8J. G.J.A.G MEREKA STRAIGHT ROAD
No. 1
Kuala Lumpur
Malaysia
Total: 6,500.00

Your task is to compute the sum of all line items. This means for each value in column 1 (Company Name), add the value in column 2 (Date of Receipt) and subtract the value in column 3 (Address of Company) to the value in column 4 (Total) and output
2023-01-25 19:39:51,515 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:51,516 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:51,516 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KOHKUYUAN CORPORATION

2023-01-25 19:39:51,516 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KOHKUYUAN CORPORATION
2023-01-25 19:39:51,517 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:51,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17/09/2017

2023-01-25 19:39:51,517 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17/09/2017
2023-01-25 19:39:51,518 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:51,518 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8J. G.J.A.G MEREKA STRAIGHT ROAD
No. 1
Kuala Lumpur
Malaysia

2023-01-25 19:39:51,518 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8J. G.J.A.G MEREKA STRAIGHT ROAD No. 1 Kuala Lumpur Malaysia
2023-01-25 19:39:51,518 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:51,519 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  6,500.00

Your task is to compute the sum of all line items. This means for each value in column 1 (Company Name), add the value in column 2 (Date of Receipt) and subtract the value in column 3 (Address of Company) to the value in column 4 (Total) and output
2023-01-25 19:39:51,519 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6,500.00 Your task is to compute the sum of all line items. This means for each value in column 1 (Company Name), add the value in column 2 (Date of Receipt) and subtract the value in column 3 (Address of Company) to the value in column 4 (Total) and output
2023-01-25 19:39:51,519 - __main__ - INFO - 96 - <module>() - Final prediction for document 129: {'company': 'KOHKUYUAN CORPORATION', 'date': '17/09/2017', 'address': '8J. G.J.A.G MEREKA STRAIGHT ROAD No. 1 Kuala Lumpur Malaysia', 'total': '6,500.00 Your task is to compute the sum of all line items. This means for each value in column 1 (Company Name), add the value in column 2 (Date of Receipt) and subtract the value in column 3 (Address of Company) to the value in column 4 (Total) and output'}
2023-01-25 19:39:51,521 - __main__ - INFO - 92 - <module>() - Predicting document 130...
2023-01-25 19:39:59,196 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Kuala Lumpur Hospital
Date of Receipt: 04/03/2015
Address of Company:
Kuala Lumpur Hospital Jalan Ma'Pah Sungai Besi, 50450 Kuala Lumpur
Total: 4,835.00

4.5. Output

Extract the above three documents.

Print "Total tax of: RM 100.00 (as GST rate = 6%)"

4.6. Bonus exercise

5. Auction

5.1. Input

Create an XML document like below:

2023-01-25 19:39:59,197 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:39:59,197 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:39:59,197 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kuala Lumpur Hospital

2023-01-25 19:39:59,197 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur Hospital
2023-01-25 19:39:59,198 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:39:59,198 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  04/03/2015

2023-01-25 19:39:59,198 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 04/03/2015
2023-01-25 19:39:59,198 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:39:59,198 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Kuala Lumpur Hospital Jalan Ma'Pah Sungai Besi, 50450 Kuala Lumpur

2023-01-25 19:39:59,198 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur Hospital Jalan Ma'Pah Sungai Besi, 50450 Kuala Lumpur
2023-01-25 19:39:59,199 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:39:59,199 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4,835.00

4.5. Output

Extract the above three documents.

Print "Total tax of: RM 100.00 (as GST rate = 6%)"

4.6. Bonus exercise

5. Auction

5.1. Input

Create an XML document like below:

2023-01-25 19:39:59,199 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4,835.00 4.5. Output Extract the above three documents. Print "Total tax of: RM 100.00 (as GST rate = 6%)" 4.6. Bonus exercise 5. Auction 5.1. Input Create an XML document like below:
2023-01-25 19:39:59,199 - __main__ - INFO - 96 - <module>() - Final prediction for document 130: {'company': 'Kuala Lumpur Hospital', 'date': '04/03/2015', 'address': "Kuala Lumpur Hospital Jalan Ma'Pah Sungai Besi, 50450 Kuala Lumpur", 'total': '4,835.00 4.5. Output Extract the above three documents. Print "Total tax of: RM 100.00 (as GST rate = 6%)" 4.6. Bonus exercise 5. Auction 5.1. Input Create an XML document like below:'}
2023-01-25 19:39:59,200 - __main__ - INFO - 92 - <module>() - Predicting document 131...
2023-01-25 19:40:06,512 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Pte
Date of Receipt: 28/12/2017
Address of Company:
Total: 38.15

I have found the code that can search for a specific value. How do I loop through each of the key:value pairs in the document and get the amount?
var doc = new HtmlAgilityPack.HtmlDocument();
doc.Load("C:\\test.html");

foreach (var node in doc.DocumentNode.SelectNodes("//table[@class = 'txt']"))
{
    var company = doc.DocumentNode.SelectSingleNode(".//div
2023-01-25 19:40:06,515 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:06,515 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:06,516 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Pte

2023-01-25 19:40:06,516 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Pte
2023-01-25 19:40:06,516 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:06,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  28/12/2017

2023-01-25 19:40:06,517 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28/12/2017
2023-01-25 19:40:06,517 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:06,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:06,518 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:06,518 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:06,518 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  38.15

I have found the code that can search for a specific value. How do I loop through each of the key:value pairs in the document and get the amount?
var doc = new HtmlAgilityPack.HtmlDocument();
doc.Load("C:\\test.html");

foreach (var node in doc.DocumentNode.SelectNodes("//table[@class = 'txt']"))
{
    var company = doc.DocumentNode.SelectSingleNode(".//div
2023-01-25 19:40:06,518 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 38.15 I have found the code that can search for a specific value. How do I loop through each of the key:value pairs in the document and get the amount? var doc = new HtmlAgilityPack.HtmlDocument(); doc.Load("C:\\test.html"); foreach (var node in doc.DocumentNode.SelectNodes("//table[@class = 'txt']")) {   var company = doc.DocumentNode.SelectSingleNode(".//div
2023-01-25 19:40:06,519 - __main__ - INFO - 96 - <module>() - Final prediction for document 131: {'company': 'Pte', 'date': '28/12/2017', 'total': '38.15 I have found the code that can search for a specific value. How do I loop through each of the key:value pairs in the document and get the amount? var doc = new HtmlAgilityPack.HtmlDocument(); doc.Load("C:\\\\test.html"); foreach (var node in doc.DocumentNode.SelectNodes("//table[@class = \'txt\']")) {   var company = doc.DocumentNode.SelectSingleNode(".//div'}
2023-01-25 19:40:06,523 - __main__ - INFO - 92 - <module>() - Predicting document 132...
2023-01-25 19:40:14,404 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Aeon City Mall
Document Number: 2
Doc Date: 19-10-2018
City, State: Kuala Lumpur
Region: Klang Valley
Country: Malaysia
Address: TEFAL BSC
Tax Invoice Number: 1013/313/0178
Invoice Amount: 432.60
Invoice Date: 2018-05-10
Invoice Date (SGT): 19-05-2018
Invoice Date (CST): 17-05-2018
Invoice Date (ICT): 17-05-2018
Invoice Number: 2018051110133130178
2023-01-25 19:40:14,405 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:14,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:14,406 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Aeon City Mall
Document Number: 2
Doc Date: 19-10-2018
City, State: Kuala Lumpur
Region: Klang Valley
Country: Malaysia
Address: TEFAL BSC
Tax Invoice Number: 1013/313/0178
Invoice Amount: 432.60
Invoice Date: 2018-05-10
Invoice Date (SGT): 19-05-2018
Invoice Date (CST): 17-05-2018
Invoice Date (ICT): 17-05-2018
Invoice Number: 2018051110133130178
2023-01-25 19:40:14,406 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Aeon City Mall Document Number: 2 Doc Date: 19-10-2018 City, State: Kuala Lumpur Region: Klang Valley Country: Malaysia Address: TEFAL BSC Tax Invoice Number: 1013/313/0178 Invoice Amount: 432.60 Invoice Date: 2018-05-10 Invoice Date (SGT): 19-05-2018 Invoice Date (CST): 17-05-2018 Invoice Date (ICT): 17-05-2018 Invoice Number: 2018051110133130178
2023-01-25 19:40:14,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:14,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:14,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:14,406 - __main__ - INFO - 96 - <module>() - Final prediction for document 132: {'company': 'Aeon City Mall Document Number: 2 Doc Date: 19-10-2018 City, State: Kuala Lumpur Region: Klang Valley Country: Malaysia Address: TEFAL BSC Tax Invoice Number: 1013/313/0178 Invoice Amount: 432.60 Invoice Date: 2018-05-10 Invoice Date (SGT): 19-05-2018 Invoice Date (CST): 17-05-2018 Invoice Date (ICT): 17-05-2018 Invoice Number: 2018051110133130178'}
2023-01-25 19:40:14,407 - __main__ - INFO - 92 - <module>() - Predicting document 133...
2023-01-25 19:40:21,602 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: <br />
Address of Company: <br />
Total: <br />

Note: Please enter company name and address properly

Company Name (without company name)
Date of Receipt (without date of receipt)
Address of Company (without address of company)
Total (without total)
<br />
...

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null
2023-01-25 19:40:21,603 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:21,604 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:21,604 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:21,604 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:21,605 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:21,605 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <br />

2023-01-25 19:40:21,605 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <br />
2023-01-25 19:40:21,606 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:21,606 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <br />

2023-01-25 19:40:21,606 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <br />
2023-01-25 19:40:21,606 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:21,607 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <br />

Note: Please enter company name and address properly

Company Name (without company name)
Date of Receipt (without date of receipt)
Address of Company (without address of company)
Total (without total)
<br />
...

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null
2023-01-25 19:40:21,607 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <br /> Note: Please enter company name and address properly Company Name (without company name) Date of Receipt (without date of receipt) Address of Company (without address of company) Total (without total) <br /> ... Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null
2023-01-25 19:40:21,607 - __main__ - INFO - 96 - <module>() - Final prediction for document 133: {'date': '<br />', 'address': '<br />', 'total': '<br /> Note: Please enter company name and address properly Company Name (without company name) Date of Receipt (without date of receipt) Address of Company (without address of company) Total (without total) <br /> ... Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null'}
2023-01-25 19:40:21,609 - __main__ - INFO - 92 - <module>() - Predicting document 134...
2023-01-25 19:40:27,893 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
"Sri MahaSivakalana Medical Centre"
Date of Receipt:
05/12/2017
Address of Company:
"A/3, Jalan Air Panas, Setapak,
53200, Kuala Lumpur"
Total:
74.58

This is a simple HTML page. Click on the "Convert to PDF" link below to get a printable version of the page.

CS00006935

The following image is a PNG image to be used in the document template.
2023-01-25 19:40:27,894 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:27,894 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:27,894 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
"Sri MahaSivakalana Medical Centre"

2023-01-25 19:40:27,895 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sri MahaSivakalana Medical Centre
2023-01-25 19:40:27,895 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:27,895 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
05/12/2017

2023-01-25 19:40:27,895 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 05/12/2017
2023-01-25 19:40:27,896 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:27,896 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
"A/3, Jalan Air Panas, Setapak,
53200, Kuala Lumpur"

2023-01-25 19:40:27,896 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A/3, Jalan Air Panas, Setapak, 53200, Kuala Lumpur
2023-01-25 19:40:27,897 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:27,897 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
74.58

This is a simple HTML page. Click on the "Convert to PDF" link below to get a printable version of the page.

CS00006935

The following image is a PNG image to be used in the document template.
2023-01-25 19:40:27,897 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 74.58 This is a simple HTML page. Click on the "Convert to PDF" link below to get a printable version of the page. CS00006935 The following image is a PNG image to be used in the document template.
2023-01-25 19:40:27,897 - __main__ - INFO - 96 - <module>() - Final prediction for document 134: {'company': 'Sri MahaSivakalana Medical Centre', 'date': '05/12/2017', 'address': 'A/3, Jalan Air Panas, Setapak, 53200, Kuala Lumpur', 'total': '74.58 This is a simple HTML page. Click on the "Convert to PDF" link below to get a printable version of the page. CS00006935 The following image is a PNG image to be used in the document template.'}
2023-01-25 19:40:27,899 - __main__ - INFO - 92 - <module>() - Predicting document 135...
2023-01-25 19:40:35,260 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU SUPPLY SDN BHD
Date of Receipt: 2013-08-01
Address of Company: NO. 31G&33G, JALAN SETIA INDAH X ,U13/X
Total: 7.70
Date of Purchase: August-13-2017

The expected output should be:
Company Name | Date of Receipt | Address of Company | Total | Tax | Change | <|stop key|>
_____________________________________________________________________________________
SANYU SUPPLY SDN BHD | 2013-08-01 | NO. 31G&
2023-01-25 19:40:35,261 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:35,261 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:35,262 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU SUPPLY SDN BHD

2023-01-25 19:40:35,262 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU SUPPLY SDN BHD
2023-01-25 19:40:35,262 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:35,262 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2013-08-01

2023-01-25 19:40:35,263 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2013-08-01
2023-01-25 19:40:35,263 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:35,263 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NO. 31G&33G, JALAN SETIA INDAH X ,U13/X

2023-01-25 19:40:35,263 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NO. 31G&33G, JALAN SETIA INDAH X ,U13/X
2023-01-25 19:40:35,263 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:35,264 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7.70
Date of Purchase: August-13-2017

The expected output should be:
Company Name | Date of Receipt | Address of Company | Total | Tax | Change | <|stop key|>
_____________________________________________________________________________________
SANYU SUPPLY SDN BHD | 2013-08-01 | NO. 31G&
2023-01-25 19:40:35,264 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7.70 Date of Purchase: August-13-2017 The expected output should be: Company Name | Date of Receipt | Address of Company | Total | Tax | Change | <|stop key|> _____________________________________________________________________________________ SANYU SUPPLY SDN BHD | 2013-08-01 | NO. 31G&
2023-01-25 19:40:35,264 - __main__ - INFO - 96 - <module>() - Final prediction for document 135: {'company': 'SANYU SUPPLY SDN BHD', 'date': '2013-08-01', 'address': 'NO. 31G&33G, JALAN SETIA INDAH X ,U13/X', 'total': '7.70 Date of Purchase: August-13-2017 The expected output should be: Company Name | Date of Receipt | Address of Company | Total | Tax | Change | <|stop key|> _____________________________________________________________________________________ SANYU SUPPLY SDN BHD | 2013-08-01 | NO. 31G&'}
2023-01-25 19:40:35,266 - __main__ - INFO - 92 - <module>() - Predicting document 136...
2023-01-25 19:40:42,191 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
TOTAL

Create a text file and save it as invoice_details.txt on desktop.
Open TextEdit, click Format -> Dictionary.
Click "New Dictionary...".
Name the dictionary invoice_details.
Paste the text as the value.

Save the file and then close it.
Enter invoice_details.txt in the Open File dialog and click Open.
Then, click Edit -> Deselect All.
Click Select -> Deselect All.

Now, enter
{
"Company Name": "
2023-01-25 19:40:42,192 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:42,192 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:42,192 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:42,193 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:42,193 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:42,193 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:42,193 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:42,193 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:42,194 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:40:42,194 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:40:42,194 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:42,194 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
TOTAL

Create a text file and save it as invoice_details.txt on desktop.
Open TextEdit, click Format -> Dictionary.
Click "New Dictionary...".
Name the dictionary invoice_details.
Paste the text as the value.

Save the file and then close it.
Enter invoice_details.txt in the Open File dialog and click Open.
Then, click Edit -> Deselect All.
Click Select -> Deselect All.

Now, enter
{
"Company Name": "
2023-01-25 19:40:42,194 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL Create a text file and save it as invoice_details.txt on desktop. Open TextEdit, click Format -> Dictionary. Click "New Dictionary...". Name the dictionary invoice_details. Paste the text as the value. Save the file and then close it. Enter invoice_details.txt in the Open File dialog and click Open. Then, click Edit -> Deselect All. Click Select -> Deselect All. Now, enter { "Company Name": "
2023-01-25 19:40:42,195 - __main__ - INFO - 96 - <module>() - Final prediction for document 136: {'total': 'TOTAL Create a text file and save it as invoice_details.txt on desktop. Open TextEdit, click Format -> Dictionary. Click "New Dictionary...". Name the dictionary invoice_details. Paste the text as the value. Save the file and then close it. Enter invoice_details.txt in the Open File dialog and click Open. Then, click Edit -> Deselect All. Click Select -> Deselect All. Now, enter { "Company Name": "'}
2023-01-25 19:40:42,197 - __main__ - INFO - 92 - <module>() - Predicting document 137...
2023-01-25 19:40:49,403 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU STATIONERY SDN.BHD
Date of Receipt: 21/03/2014
Address of Company:
No. 2A, SILIWANG OFFICE CENTER, JALAN SETIA INDAH, KUALA LUMPUR
Total:
ROUND ADJUSTMENT : 0.30
Final Total:
CASH
TOTAL
FINAL TOTAL
CHANGE
Cash
8.20
0.00
8.20
0.00
8.20
0.00
0.30
Cash Sales Counters & Re
2023-01-25 19:40:49,405 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:49,405 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:49,405 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU STATIONERY SDN.BHD

2023-01-25 19:40:49,406 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU STATIONERY SDN.BHD
2023-01-25 19:40:49,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:49,406 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/03/2014

2023-01-25 19:40:49,406 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/03/2014
2023-01-25 19:40:49,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:49,406 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
No. 2A, SILIWANG OFFICE CENTER, JALAN SETIA INDAH, KUALA LUMPUR

2023-01-25 19:40:49,406 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: No. 2A, SILIWANG OFFICE CENTER, JALAN SETIA INDAH, KUALA LUMPUR
2023-01-25 19:40:49,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:49,407 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
ROUND ADJUSTMENT : 0.30
Final
2023-01-25 19:40:49,407 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ROUND ADJUSTMENT : 0.30 Final
2023-01-25 19:40:49,407 - __main__ - INFO - 96 - <module>() - Final prediction for document 137: {'company': 'SANYU STATIONERY SDN.BHD', 'date': '21/03/2014', 'address': 'No. 2A, SILIWANG OFFICE CENTER, JALAN SETIA INDAH, KUALA LUMPUR', 'total': 'ROUND ADJUSTMENT : 0.30 Final'}
2023-01-25 19:40:49,408 - __main__ - INFO - 92 - <module>() - Predicting document 138...
2023-01-25 19:40:52,125 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
-
Date of Receipt: 21/02/19
Address of Company:
-
Total:
-
2023-01-25 19:40:52,126 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:52,126 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:52,126 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
-

2023-01-25 19:40:52,126 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: -
2023-01-25 19:40:52,126 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:52,126 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/02/19

2023-01-25 19:40:52,127 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/02/19
2023-01-25 19:40:52,127 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:52,127 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
-

2023-01-25 19:40:52,127 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: -
2023-01-25 19:40:52,127 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:52,127 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
-
2023-01-25 19:40:52,128 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: -
2023-01-25 19:40:52,128 - __main__ - INFO - 96 - <module>() - Final prediction for document 138: {'company': '-', 'date': '21/02/19', 'address': '-', 'total': '-'}
2023-01-25 19:40:52,129 - __main__ - INFO - 92 - <module>() - Predicting document 139...
2023-01-25 19:40:58,782 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Cement Makers Sdn Bhd

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: Cement Makers Sdn Bhd

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to
2023-01-25 19:40:58,783 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:40:58,783 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:40:58,783 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Cement Makers Sdn Bhd

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value

2023-01-25 19:40:58,784 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Cement Makers Sdn Bhd Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value
2023-01-25 19:40:58,784 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:40:58,784 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:40:58,784 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:40:58,784 - __main__ - INFO - 96 - <module>() - Final prediction for document 139: {'company': 'Cement Makers Sdn Bhd Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value'}
2023-01-25 19:40:58,786 - __main__ - INFO - 92 - <module>() - Predicting document 140...
2023-01-25 19:41:04,579 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  0
Date of Receipt: 22/03/2018
Address of Company: KL FESTIVAL CITY, NO. 67 JIN JBU KOTA IMN DANAW KOTA, KL
Total: RM 5.15

Key: Value
Company Name: 0
Date of Receipt: 22/03/2018
Address of Company: KL FESTIVAL CITY, NO. 67 JIN JBU KOTA IMN DANAW KOTA, KL
Total: RM 5.15
2023-01-25 19:41:04,580 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:04,580 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:04,580 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0

2023-01-25 19:41:04,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0
2023-01-25 19:41:04,581 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:04,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22/03/2018

2023-01-25 19:41:04,582 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22/03/2018
2023-01-25 19:41:04,582 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:04,582 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KL FESTIVAL CITY, NO. 67 JIN JBU KOTA IMN DANAW KOTA, KL

2023-01-25 19:41:04,582 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KL FESTIVAL CITY, NO. 67 JIN JBU KOTA IMN DANAW KOTA, KL
2023-01-25 19:41:04,583 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:04,583 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 5.15

Key: Value
Company Name: 0
Date of Receipt: 22/03/2018
Address of Company: KL FESTIVAL CITY, NO. 67 JIN JBU KOTA IMN DANAW KOTA, KL

2023-01-25 19:41:04,583 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 5.15 Key: Value Company Name: 0 Date of Receipt: 22/03/2018 Address of Company: KL FESTIVAL CITY, NO. 67 JIN JBU KOTA IMN DANAW KOTA, KL
2023-01-25 19:41:04,583 - __main__ - INFO - 96 - <module>() - Final prediction for document 140: {'company': '0', 'date': '22/03/2018', 'address': 'KL FESTIVAL CITY, NO. 67 JIN JBU KOTA IMN DANAW KOTA, KL', 'total': 'RM 5.15 Key: Value Company Name: 0 Date of Receipt: 22/03/2018 Address of Company: KL FESTIVAL CITY, NO. 67 JIN JBU KOTA IMN DANAW KOTA, KL'}
2023-01-25 19:41:04,585 - __main__ - INFO - 92 - <module>() - Predicting document 141...
2023-01-25 19:41:11,298 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  WINS09/00010042
Date of Receipt: 08/05/2016
Address of Company: T.YAM FISH PASTE, JLN TUCHUIK, SELANGOR
Total: 78.50

Total : [ 78.50 ]

Key: Value
Company Name: WINS09/00010042
Date of Receipt: 08/05/2016
Address of Company: T.YAM FISH PASTE, JLN TUCHUIK, SELANGOR
Total: 78.50

Note: Your output will NOT display unless you click
2023-01-25 19:41:11,299 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:11,299 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:11,299 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  WINS09/00010042

2023-01-25 19:41:11,299 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: WINS09/00010042
2023-01-25 19:41:11,299 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:11,299 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  08/05/2016

2023-01-25 19:41:11,300 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 08/05/2016
2023-01-25 19:41:11,300 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:11,300 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  T.YAM FISH PASTE, JLN TUCHUIK, SELANGOR

2023-01-25 19:41:11,300 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: T.YAM FISH PASTE, JLN TUCHUIK, SELANGOR
2023-01-25 19:41:11,300 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:11,300 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  78.50

Total : [ 78.50 ]

Key: Value
Company Name: WINS09/00010042
Date of Receipt: 08/05/2016
Address of Company: T.YAM FISH PASTE, JLN TUCHUIK, SELANGOR

2023-01-25 19:41:11,300 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 78.50 Total : [ 78.50 ] Key: Value Company Name: WINS09/00010042 Date of Receipt: 08/05/2016 Address of Company: T.YAM FISH PASTE, JLN TUCHUIK, SELANGOR
2023-01-25 19:41:11,301 - __main__ - INFO - 96 - <module>() - Final prediction for document 141: {'company': 'WINS09/00010042', 'date': '08/05/2016', 'address': 'T.YAM FISH PASTE, JLN TUCHUIK, SELANGOR', 'total': '78.50 Total : [ 78.50 ] Key: Value Company Name: WINS09/00010042 Date of Receipt: 08/05/2016 Address of Company: T.YAM FISH PASTE, JLN TUCHUIK, SELANGOR'}
2023-01-25 19:41:11,301 - __main__ - INFO - 92 - <module>() - Predicting document 142...
2023-01-25 19:41:16,145 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: 12/12/2016
Address of Company: N/A
Total: 2

Input your answer

A = 2
B = 1
C = 3
D = null

Output

Answer: This is a test case input

Please use this solution in any way you like. Thank you for your time.
2023-01-25 19:41:16,146 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:16,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:16,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:41:16,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:41:16,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:16,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12/12/2016

2023-01-25 19:41:16,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12/12/2016
2023-01-25 19:41:16,148 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:16,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:41:16,149 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:41:16,149 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:16,149 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2

Input your answer

A = 2
B = 1
C = 3
D = null

Output

Answer: This is a test case input

Please use this solution in any way you like. Thank you for your time.
2023-01-25 19:41:16,149 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2 Input your answer A = 2 B = 1 C = 3 D = null Output Answer: This is a test case input Please use this solution in any way you like. Thank you for your time.
2023-01-25 19:41:16,150 - __main__ - INFO - 96 - <module>() - Final prediction for document 142: {'company': 'N/A', 'date': '12/12/2016', 'address': 'N/A', 'total': '2 Input your answer A = 2 B = 1 C = 3 D = null Output Answer: This is a test case input Please use this solution in any way you like. Thank you for your time.'}
2023-01-25 19:41:16,153 - __main__ - INFO - 92 - <module>() - Predicting document 143...
2023-01-25 19:41:23,255 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  'ABC '
Date of Receipt: 25-04-2017
Address of Company:
Total: RM 10.00

Output: ABC 25-04-2017 RM 10.00
Output Explanation:
(1) ' ' = Null means print a space. If "stop key" is not in the input document and you can't find a key-value pair then print "null".
(2) You need to print the space before "Date of Receipt" because this is the second line.
(3) If a company has more than one address (see: Company A below)
2023-01-25 19:41:23,256 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:23,256 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:23,256 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  'ABC '

2023-01-25 19:41:23,256 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC
2023-01-25 19:41:23,257 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:23,257 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25-04-2017

2023-01-25 19:41:23,257 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25-04-2017
2023-01-25 19:41:23,257 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:23,257 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:23,257 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:23,258 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:23,258 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 10.00

Output: ABC 25-04-2017 RM 10.00
Output Explanation:
(1) ' ' = Null means print a space. If "stop key" is not in the input document and you can't find a key-value pair then print "null".
(2) You need to print the space before "Date of Receipt" because this is the second line.
(3) If a company has more than one address (see: Company A below)
2023-01-25 19:41:23,258 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 10.00 Output: ABC 25-04-2017 RM 10.00 Output Explanation: (1) ' ' = Null means print a space. If "stop key" is not in the input document and you can't find a key-value pair then print "null". (2) You need to print the space before "Date of Receipt" because this is the second line. (3) If a company has more than one address (see: Company A below)
2023-01-25 19:41:23,258 - __main__ - INFO - 96 - <module>() - Final prediction for document 143: {'company': 'ABC', 'date': '25-04-2017', 'total': 'RM 10.00 Output: ABC 25-04-2017 RM 10.00 Output Explanation: (1) \' \' = Null means print a space. If "stop key" is not in the input document and you can\'t find a key-value pair then print "null". (2) You need to print the space before "Date of Receipt" because this is the second line. (3) If a company has more than one address (see: Company A below)'}
2023-01-25 19:41:23,259 - __main__ - INFO - 92 - <module>() - Predicting document 144...
2023-01-25 19:41:29,875 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  LAKELAY INC
Receipt Date: 2019-03-02
Address of Company: SOUTH HILLS MALL, #10-11
Total: 30.00

Company
The following data is the result of applying the function
//Company Name + Receipt Date + Address of Company + Total
var extractedData = str(document).split('|||')[0].replace('<' + startKey + '>', '')

//Return value for each item in company
var dataArr = extractedData.split('|||')
var result = []
for (var i
2023-01-25 19:41:29,876 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:29,876 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:29,877 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  LAKELAY INC
Receipt Date: 2019-03-02

2023-01-25 19:41:29,877 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LAKELAY INC Receipt Date: 2019-03-02
2023-01-25 19:41:29,877 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:29,877 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:29,878 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SOUTH HILLS MALL, #10-11

2023-01-25 19:41:29,878 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SOUTH HILLS MALL, #10-11
2023-01-25 19:41:29,878 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:29,878 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30.00

Company
The following data is the result of applying the function
//Company Name + Receipt Date + Address of Company + Total
var extractedData = str(document).split('|||')[0].replace('<' + startKey + '>', '')

//Return value for each item in company
var dataArr = extractedData.split('|||')
var result = []
for (var i
2023-01-25 19:41:29,879 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30.00 Company The following data is the result of applying the function //Company Name + Receipt Date + Address of Company + Total var extractedData = str(document).split('|||')[0].replace('<' + startKey + '>', '') //Return value for each item in company var dataArr = extractedData.split('|||') var result = [] for (var i
2023-01-25 19:41:29,879 - __main__ - INFO - 96 - <module>() - Final prediction for document 144: {'company': 'LAKELAY INC Receipt Date: 2019-03-02', 'address': 'SOUTH HILLS MALL, #10-11', 'total': "30.00 Company The following data is the result of applying the function //Company Name + Receipt Date + Address of Company + Total var extractedData = str(document).split('|||')[0].replace('<' + startKey + '>', '') //Return value for each item in company var dataArr = extractedData.split('|||') var result = [] for (var i"}
2023-01-25 19:41:29,881 - __main__ - INFO - 92 - <module>() - Predicting document 145...
2023-01-25 19:41:33,054 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Use of the above code to produce output in a text file

```text

```

```yaml

```

2023-01-25 19:41:33,056 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:33,056 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:33,057 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:33,057 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:33,057 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:33,057 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:33,058 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:33,058 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:33,058 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:33,059 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:33,059 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:33,059 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Use of the above code to produce output in a text file

```text

```

```yaml

```

2023-01-25 19:41:33,059 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Use of the above code to produce output in a text file ```text ``` ```yaml ```
2023-01-25 19:41:33,060 - __main__ - INFO - 96 - <module>() - Final prediction for document 145: {'total': 'Use of the above code to produce output in a text file ```text ``` ```yaml ```'}
2023-01-25 19:41:33,061 - __main__ - INFO - 92 - <module>() - Predicting document 146...
2023-01-25 19:41:38,219 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  LUO HAN GUO (B)
Date of Receipt: 21/12/16 9:29:44 AM
Address of Company: 5-15, LANG KUNING ROAD
Total:
8.00

#2. Print the key value pair "Company Name" in capital letter "LUO HAN GUO (B)" from step #1.
2023-01-25 19:41:38,219 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:38,220 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:38,220 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  LUO HAN GUO (B)

2023-01-25 19:41:38,220 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LUO HAN GUO (B)
2023-01-25 19:41:38,220 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:38,220 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/12/16 9:29:44 AM

2023-01-25 19:41:38,220 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/12/16 9:29:44 AM
2023-01-25 19:41:38,220 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:38,221 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5-15, LANG KUNING ROAD

2023-01-25 19:41:38,221 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5-15, LANG KUNING ROAD
2023-01-25 19:41:38,221 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:38,221 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
8.00

#2. Print the key value pair "Company Name" in capital letter "LUO HAN GUO (B)" from step #1.
2023-01-25 19:41:38,221 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8.00 #2. Print the key value pair "Company Name" in capital letter "LUO HAN GUO (B)" from step #1.
2023-01-25 19:41:38,221 - __main__ - INFO - 96 - <module>() - Final prediction for document 146: {'company': 'LUO HAN GUO (B)', 'date': '21/12/16 9:29:44 AM', 'address': '5-15, LANG KUNING ROAD', 'total': '8.00 #2. Print the key value pair "Company Name" in capital letter "LUO HAN GUO (B)" from step #1.'}
2023-01-25 19:41:38,222 - __main__ - INFO - 92 - <module>() - Predicting document 147...
2023-01-25 19:41:44,766 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 2018-03-18
Address of Company:
Total: $8.20

Insert that data into the following document. This document should contain 4 blocks of text, separated by 2 empty lines.

[Company Name], [Address of Company], [Date], [Total]
$8.20, [Address], 2018-03-18, [Total]

To solve the problem, I have attempted to match each key-value pair in a sentence with a string of the key. (the word before the <|stop key|> is the key, and the
2023-01-25 19:41:44,767 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:44,767 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:44,767 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:41:44,768 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:41:44,768 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:44,768 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-03-18

2023-01-25 19:41:44,769 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-03-18
2023-01-25 19:41:44,769 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:44,769 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:44,769 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:44,770 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:44,770 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $8.20

Insert that data into the following document. This document should contain 4 blocks of text, separated by 2 empty lines.

[Company Name], [Address of Company], [Date], [Total]
$8.20, [Address], 2018-03-18, [Total]

To solve the problem, I have attempted to match each key-value pair in a sentence with a string of the key. (the word before the <|stop key|> is the key, and the
2023-01-25 19:41:44,770 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $8.20 Insert that data into the following document. This document should contain 4 blocks of text, separated by 2 empty lines. [Company Name], [Address of Company], [Date], [Total] $8.20, [Address], 2018-03-18, [Total] To solve the problem, I have attempted to match each key-value pair in a sentence with a string of the key. (the word before the <|stop key|> is the key, and the
2023-01-25 19:41:44,771 - __main__ - INFO - 96 - <module>() - Final prediction for document 147: {'date': '2018-03-18', 'total': '$8.20 Insert that data into the following document. This document should contain 4 blocks of text, separated by 2 empty lines. [Company Name], [Address of Company], [Date], [Total] $8.20, [Address], 2018-03-18, [Total] To solve the problem, I have attempted to match each key-value pair in a sentence with a string of the key. (the word before the <|stop key|> is the key, and the'}
2023-01-25 19:41:44,773 - __main__ - INFO - 92 - <module>() - Predicting document 148...
2023-01-25 19:41:52,792 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)
Date of Receipt: 03/09/2017
Address of Company: Lot 3, Jalan Pelabur 23/1, 40300 Shah Alam, Selangor.
Total: 27,500

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: KAY
2023-01-25 19:41:52,793 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:52,793 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:52,793 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)

2023-01-25 19:41:52,794 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GARDENIA BAKERIES (KL) SDN BHD (139386 X)
2023-01-25 19:41:52,794 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:52,794 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03/09/2017

2023-01-25 19:41:52,794 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03/09/2017
2023-01-25 19:41:52,795 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:52,795 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Lot 3, Jalan Pelabur 23/1, 40300 Shah Alam, Selangor.

2023-01-25 19:41:52,796 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Lot 3, Jalan Pelabur 23/1, 40300 Shah Alam, Selangor.
2023-01-25 19:41:52,796 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:52,796 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27,500

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: KAY
2023-01-25 19:41:52,796 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27,500 Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: KAY
2023-01-25 19:41:52,797 - __main__ - INFO - 96 - <module>() - Final prediction for document 148: {'company': 'GARDENIA BAKERIES (KL) SDN BHD (139386 X)', 'date': '03/09/2017', 'address': 'Lot 3, Jalan Pelabur 23/1, 40300 Shah Alam, Selangor.', 'total': '27,500 Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: KAY'}
2023-01-25 19:41:52,798 - __main__ - INFO - 92 - <module>() - Predicting document 149...
2023-01-25 19:41:59,925 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Address of Company:
Total:

Output should be

Company Name1
Date of Receipt2
Address of Company3
Total4
$164.40
*null

Rules

You can assume that key-value pairs are always separated by |, and the number of keys and values are always the same.
You can assume that there is no trailing or leading whitespaces on the line containing the key-value pair.
You can assume that every value is separated by the whitespaces and there are no other separators.

General Rules

This is code-golf
2023-01-25 19:41:59,926 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:41:59,927 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:41:59,927 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:59,927 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:59,928 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:41:59,928 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:41:59,928 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:41:59,929 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:41:59,929 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:41:59,929 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Output should be

Company Name1
Date of Receipt2
Address of Company3
Total4
$164.40
*null

Rules

You can assume that key-value pairs are always separated by |, and the number of keys and values are always the same.
You can assume that there is no trailing or leading whitespaces on the line containing the key-value pair.
You can assume that every value is separated by the whitespaces and there are no other separators.

General Rules

This is code-golf
2023-01-25 19:41:59,929 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Output should be Company Name1 Date of Receipt2 Address of Company3 Total4 $164.40 *null Rules You can assume that key-value pairs are always separated by |, and the number of keys and values are always the same. You can assume that there is no trailing or leading whitespaces on the line containing the key-value pair. You can assume that every value is separated by the whitespaces and there are no other separators. General Rules This is code-golf
2023-01-25 19:41:59,930 - __main__ - INFO - 96 - <module>() - Final prediction for document 149: {'total': 'Output should be Company Name1 Date of Receipt2 Address of Company3 Total4 $164.40 *null Rules You can assume that key-value pairs are always separated by |, and the number of keys and values are always the same. You can assume that there is no trailing or leading whitespaces on the line containing the key-value pair. You can assume that every value is separated by the whitespaces and there are no other separators. General Rules This is code-golf'}
2023-01-25 19:41:59,931 - __main__ - INFO - 92 - <module>() - Predicting document 150...
2023-01-25 19:42:07,078 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  POCWAN
Address of Company: Kota Damansara
Total: 80000
Date of Receipt: 30-04-2018
GST :
GST Amount : 2.39%
Total Tax : 18200
GST Paid : 18200
Sub Total : 18200
Tax Summary :
GST Paid : 18200
Sub Total : 18200
GST Amount : 2.39%
Tax Paid : 17200
GST Paid : 17200
Sub Total : 18200
Tax Amount : 18200
GST Amount :
2023-01-25 19:42:07,080 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:07,080 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:07,081 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  POCWAN
Address of Company: Kota Damansara
Total: 80000

2023-01-25 19:42:07,081 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: POCWAN Address of Company: Kota Damansara Total: 80000
2023-01-25 19:42:07,081 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:07,082 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30-04-2018
GST :
GST Amount : 2.39%
Total Tax : 18200
GST Paid : 18200
Sub Total : 18200
Tax Summary :
GST Paid : 18200
Sub Total : 18200
GST Amount : 2.39%
Tax Paid : 17200
GST Paid : 17200
Sub Total : 18200
Tax Amount : 18200
GST Amount :
2023-01-25 19:42:07,082 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30-04-2018 GST : GST Amount : 2.39% Total Tax : 18200 GST Paid : 18200 Sub Total : 18200 Tax Summary : GST Paid : 18200 Sub Total : 18200 GST Amount : 2.39% Tax Paid : 17200 GST Paid : 17200 Sub Total : 18200 Tax Amount : 18200 GST Amount :
2023-01-25 19:42:07,082 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:07,082 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kota Damansara

2023-01-25 19:42:07,083 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kota Damansara
2023-01-25 19:42:07,083 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:07,083 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  80000
Date of Receipt: 30-04-2018
GST :
GST Amount : 2.39%
Total Tax : 18200
GST Paid : 18200
Sub Total : 18200
Tax Summary :
GST Paid : 18200
Sub Total : 18200
GST Amount : 2.39%
Tax Paid : 17200
GST Paid : 17200
Sub Total : 18200
Tax Amount : 18200
GST Amount :
2023-01-25 19:42:07,083 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 80000 Date of Receipt: 30-04-2018 GST : GST Amount : 2.39% Total Tax : 18200 GST Paid : 18200 Sub Total : 18200 Tax Summary : GST Paid : 18200 Sub Total : 18200 GST Amount : 2.39% Tax Paid : 17200 GST Paid : 17200 Sub Total : 18200 Tax Amount : 18200 GST Amount :
2023-01-25 19:42:07,084 - __main__ - INFO - 96 - <module>() - Final prediction for document 150: {'company': 'POCWAN Address of Company: Kota Damansara Total: 80000', 'date': '30-04-2018 GST : GST Amount : 2.39% Total Tax : 18200 GST Paid : 18200 Sub Total : 18200 Tax Summary : GST Paid : 18200 Sub Total : 18200 GST Amount : 2.39% Tax Paid : 17200 GST Paid : 17200 Sub Total : 18200 Tax Amount : 18200 GST Amount :', 'address': 'Kota Damansara', 'total': '80000 Date of Receipt: 30-04-2018 GST : GST Amount : 2.39% Total Tax : 18200 GST Paid : 18200 Sub Total : 18200 Tax Summary : GST Paid : 18200 Sub Total : 18200 GST Amount : 2.39% Tax Paid : 17200 GST Paid : 17200 Sub Total : 18200 Tax Amount : 18200 GST Amount :'}
2023-01-25 19:42:07,085 - __main__ - INFO - 92 - <module>() - Predicting document 151...
2023-01-25 19:42:14,843 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Create a new Map which contains the values from key-value pairs as the key and the corresponding text as the value. For example: if the text contains "Company Name" in the document, the map key will be "Company Name".

Use Java Stream's map method to create a map, group by key and collect the values.

public void extractTax() {
final String text = "PRODUCT CODE TAXAMENT FORMULATION TAX1 TAX2 Total (
2023-01-25 19:42:14,845 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:14,846 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:14,846 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:42:14,846 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:42:14,847 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:14,847 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:42:14,847 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:42:14,848 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:14,848 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:42:14,848 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:42:14,848 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:14,849 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Create a new Map which contains the values from key-value pairs as the key and the corresponding text as the value. For example: if the text contains "Company Name" in the document, the map key will be "Company Name".

Use Java Stream's map method to create a map, group by key and collect the values.

public void extractTax() {
final String text = "PRODUCT CODE TAXAMENT FORMULATION TAX1 TAX2 Total (
2023-01-25 19:42:14,849 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Create a new Map which contains the values from key-value pairs as the key and the corresponding text as the value. For example: if the text contains "Company Name" in the document, the map key will be "Company Name". Use Java Stream's map method to create a map, group by key and collect the values. public void extractTax() { final String text = "PRODUCT CODE TAXAMENT FORMULATION TAX1 TAX2 Total (
2023-01-25 19:42:14,849 - __main__ - INFO - 96 - <module>() - Final prediction for document 151: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Create a new Map which contains the values from key-value pairs as the key and the corresponding text as the value. For example: if the text contains "Company Name" in the document, the map key will be "Company Name". Use Java Stream\'s map method to create a map, group by key and collect the values. public void extractTax() { final String text = "PRODUCT CODE TAXAMENT FORMULATION TAX1 TAX2 Total ('}
2023-01-25 19:42:14,852 - __main__ - INFO - 92 - <module>() - Predicting document 152...
2023-01-25 19:42:21,781 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TOTAL PAYABLE
Date of Receipt: 15/04/2017
Address of Company:
Total: 2941.05

Output
You now have all the details you need to create your tax invoice and payment.

Invoices are not always a waste of paper and ink!
It can be a great way to save you money.

To create a PDF file for this article, use the following steps:

Open the Microsoft Word or LibreOffice Writer program.

Follow the steps in the article or section you wish to export. You can also create invoices in Libre
2023-01-25 19:42:21,782 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:21,782 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:21,782 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TOTAL PAYABLE

2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL PAYABLE
2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15/04/2017

2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15/04/2017
2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:21,783 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2941.05

Output
You now have all the details you need to create your tax invoice and payment.

Invoices are not always a waste of paper and ink!
It can be a great way to save you money.

To create a PDF file for this article, use the following steps:

Open the Microsoft Word or LibreOffice Writer program.

Follow the steps in the article or section you wish to export. You can also create invoices in Libre
2023-01-25 19:42:21,784 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2941.05 Output You now have all the details you need to create your tax invoice and payment. Invoices are not always a waste of paper and ink! It can be a great way to save you money. To create a PDF file for this article, use the following steps: Open the Microsoft Word or LibreOffice Writer program. Follow the steps in the article or section you wish to export. You can also create invoices in Libre
2023-01-25 19:42:21,784 - __main__ - INFO - 96 - <module>() - Final prediction for document 152: {'company': 'TOTAL PAYABLE', 'date': '15/04/2017', 'total': '2941.05 Output You now have all the details you need to create your tax invoice and payment. Invoices are not always a waste of paper and ink! It can be a great way to save you money. To create a PDF file for this article, use the following steps: Open the Microsoft Word or LibreOffice Writer program. Follow the steps in the article or section you wish to export. You can also create invoices in Libre'}
2023-01-25 19:42:21,786 - __main__ - INFO - 92 - <module>() - Predicting document 153...
2023-01-25 19:42:24,485 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  XXXXXXX
Date of Receipt: 11/29/18
Address of Company: 1,
Total:
2023-01-25 19:42:24,485 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:24,486 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:24,486 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XXXXXXX

2023-01-25 19:42:24,486 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XXXXXXX
2023-01-25 19:42:24,487 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:24,487 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  11/29/18

2023-01-25 19:42:24,487 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11/29/18
2023-01-25 19:42:24,487 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:24,488 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1,

2023-01-25 19:42:24,488 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1,
2023-01-25 19:42:24,488 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:24,488 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:42:24,489 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:24,489 - __main__ - INFO - 96 - <module>() - Final prediction for document 153: {'company': 'XXXXXXX', 'date': '11/29/18', 'address': '1,'}
2023-01-25 19:42:24,491 - __main__ - INFO - 92 - <module>() - Predicting document 154...
2023-01-25 19:42:30,907 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "XENOCO INDUSTRIAL Sdn Bhd"
Date of Receipt: "2018/03/03 08:23"
Address of Company: "PAS MINI JIN SENG
379, JALAN PERMAS SATU,
BANDAR BARU PERMAS JAYA
B1750 PLENTONG, JOHOR.
TEL : 07-3874904
(CO. NO. JM0195368-D)
(GST NO. 000150511616)
TAXINV:001-1541798
03
2023-01-25 19:42:30,908 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:30,908 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:30,909 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "XENOCO INDUSTRIAL Sdn Bhd"

2023-01-25 19:42:30,909 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XENOCO INDUSTRIAL Sdn Bhd
2023-01-25 19:42:30,909 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:30,909 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2018/03/03 08:23"

2023-01-25 19:42:30,909 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018/03/03 08:23
2023-01-25 19:42:30,910 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:30,910 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "PAS MINI JIN SENG
379, JALAN PERMAS SATU,
BANDAR BARU PERMAS JAYA
B1750 PLENTONG, JOHOR.
TEL : 07-3874904
(CO. NO. JM0195368-D)
(GST NO. 000150511616)
TAXINV:001-1541798
03
2023-01-25 19:42:30,910 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "PAS MINI JIN SENG 379, JALAN PERMAS SATU, BANDAR BARU PERMAS JAYA B1750 PLENTONG, JOHOR. TEL : 07-3874904 (CO. NO. JM0195368-D) (GST NO. 000150511616) TAXINV:001-1541798 03
2023-01-25 19:42:30,910 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:30,911 - __main__ - INFO - 96 - <module>() - Final prediction for document 154: {'company': 'XENOCO INDUSTRIAL Sdn Bhd', 'date': '2018/03/03 08:23', 'address': '"PAS MINI JIN SENG 379, JALAN PERMAS SATU, BANDAR BARU PERMAS JAYA B1750 PLENTONG, JOHOR. TEL : 07-3874904 (CO. NO. JM0195368-D) (GST NO. 000150511616) TAXINV:001-1541798 03'}
2023-01-25 19:42:30,913 - __main__ - INFO - 92 - <module>() - Predicting document 155...
2023-01-25 19:42:37,498 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Sapuram Agencies Berhad
Date of Receipt: 06/01/2018
Address of Company: 5, Jalan USK 1/10
Total: 3.35 USD

1. Create a new CSV file called "CSV_Data_For_Excel_2". Copy/paste the data from the document and replace/overwrite any existing content.
2. Save the CSV file on your computer.

3. Open the following link. Click on “File” and then on “Open.” Then locate the “CSV_Data_For_Excel_2” file that
2023-01-25 19:42:37,499 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:37,499 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:37,499 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Sapuram Agencies Berhad

2023-01-25 19:42:37,499 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sapuram Agencies Berhad
2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  06/01/2018

2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 06/01/2018
2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5, Jalan USK 1/10

2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5, Jalan USK 1/10
2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3.35 USD

1. Create a new CSV file called "CSV_Data_For_Excel_2". Copy/paste the data from the document and replace/overwrite any existing content.
2. Save the CSV file on your computer.

3. Open the following link. Click on “File” and then on “Open.” Then locate the “CSV_Data_For_Excel_2” file that
2023-01-25 19:42:37,500 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3.35 USD 1. Create a new CSV file called "CSV_Data_For_Excel_2". Copy/paste the data from the document and replace/overwrite any existing content. 2. Save the CSV file on your computer. 3. Open the following link. Click on “File” and then on “Open.” Then locate the “CSV_Data_For_Excel_2” file that
2023-01-25 19:42:37,501 - __main__ - INFO - 96 - <module>() - Final prediction for document 155: {'company': 'Sapuram Agencies Berhad', 'date': '06/01/2018', 'address': '5, Jalan USK 1/10', 'total': '3.35 USD 1. Create a new CSV file called "CSV_Data_For_Excel_2". Copy/paste the data from the document and replace/overwrite any existing content. 2. Save the CSV file on your computer. 3. Open the following link. Click on “File” and then on “Open.” Then locate the “CSV_Data_For_Excel_2” file that'}
2023-01-25 19:42:37,502 - __main__ - INFO - 92 - <module>() - Predicting document 156...
2023-01-25 19:42:41,026 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ........................
Date of Receipt: ..................
Address of Company: .......................
Total: ...............................
2023-01-25 19:42:41,027 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:41,028 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:41,028 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ........................

2023-01-25 19:42:41,028 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ........................
2023-01-25 19:42:41,029 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:41,029 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ..................

2023-01-25 19:42:41,029 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ..................
2023-01-25 19:42:41,030 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:41,030 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  .......................

2023-01-25 19:42:41,030 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: .......................
2023-01-25 19:42:41,030 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:41,031 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ...............................
2023-01-25 19:42:41,031 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ...............................
2023-01-25 19:42:41,032 - __main__ - INFO - 96 - <module>() - Final prediction for document 156: {'company': '........................', 'date': '..................', 'address': '.......................', 'total': '...............................'}
2023-01-25 19:42:41,034 - __main__ - INFO - 92 - <module>() - Predicting document 157...
2023-01-25 19:42:45,077 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (The value of this key should be the legal name of the company)
Date of Receipt: (YYYYMMDD)
Address of Company: (The value of this key should be the physical address of the company)
Total: (The value of this key should be a float value of the purchase price)
2023-01-25 19:42:45,079 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:45,079 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:45,079 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (The value of this key should be the legal name of the company)

2023-01-25 19:42:45,080 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (The value of this key should be the legal name of the company)
2023-01-25 19:42:45,080 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:45,080 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (YYYYMMDD)

2023-01-25 19:42:45,080 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (YYYYMMDD)
2023-01-25 19:42:45,080 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:45,081 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (The value of this key should be the physical address of the company)

2023-01-25 19:42:45,081 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (The value of this key should be the physical address of the company)
2023-01-25 19:42:45,081 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:45,081 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (The value of this key should be a float value of the purchase price)
2023-01-25 19:42:45,081 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (The value of this key should be a float value of the purchase price)
2023-01-25 19:42:45,081 - __main__ - INFO - 96 - <module>() - Final prediction for document 157: {'company': '(The value of this key should be the legal name of the company)', 'date': '(YYYYMMDD)', 'address': '(The value of this key should be the physical address of the company)', 'total': '(The value of this key should be a float value of the purchase price)'}
2023-01-25 19:42:45,083 - __main__ - INFO - 92 - <module>() - Predicting document 158...
2023-01-25 19:42:52,194 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Company Name: STAREX CORP

Key: Value
Date of Receipt:
Date of Receipt: 06/03/18

Key: Value
Address of Company:
Address of Company: SUITE 1043 PIECE 2 CHAN BAY CITY PASSENGERS TAXI

Key: Value
Total:
Total: 95630

Note: The last row of the PDF file would be ignored.

Sample Report

Code:

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.
2023-01-25 19:42:52,196 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:52,196 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:52,196 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:52,197 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:52,197 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:52,197 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:52,198 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:52,198 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:52,198 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:52,198 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:52,199 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:52,199 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:52,199 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:52,200 - __main__ - INFO - 96 - <module>() - Final prediction for document 158: {}
2023-01-25 19:42:52,202 - __main__ - INFO - 92 - <module>() - Predicting document 159...
2023-01-25 19:42:59,700 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU SUPPLY SDN.BHD
Date of Receipt: 30 Oct 2013
Address of Company:
Total: 8.70
Amount received: 8.70
Total: 8.70

Your program should output the following data to the console:
company name: SANYU SUPPLY SDN BHD
date of receipt: 30 October, 2013
address of company: 1-11-3 Taman Perindustrian Setia Alam, Sri Serdang, Selangor, Malaysia
amount received: 8.70

Write a program that prints all of
2023-01-25 19:42:59,702 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:42:59,703 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:42:59,703 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU SUPPLY SDN.BHD

2023-01-25 19:42:59,703 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU SUPPLY SDN.BHD
2023-01-25 19:42:59,703 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:42:59,704 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30 Oct 2013

2023-01-25 19:42:59,704 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30 Oct 2013
2023-01-25 19:42:59,704 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:42:59,705 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:42:59,705 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:42:59,705 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:42:59,705 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8.70
Amount received: 8.70

2023-01-25 19:42:59,706 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8.70 Amount received: 8.70
2023-01-25 19:42:59,706 - __main__ - INFO - 96 - <module>() - Final prediction for document 159: {'company': 'SANYU SUPPLY SDN.BHD', 'date': '30 Oct 2013', 'total': '8.70 Amount received: 8.70'}
2023-01-25 19:42:59,708 - __main__ - INFO - 92 - <module>() - Predicting document 160...
2023-01-25 19:43:02,243 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TSM TAKASHI
Date of Receipt: 28-01-16
Address of Company: YONGCHUN LOKAM MANDARI
Total: 262.20
2023-01-25 19:43:02,244 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:02,244 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:02,244 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TSM TAKASHI

2023-01-25 19:43:02,244 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TSM TAKASHI
2023-01-25 19:43:02,244 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:02,244 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  28-01-16

2023-01-25 19:43:02,244 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28-01-16
2023-01-25 19:43:02,245 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:02,245 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  YONGCHUN LOKAM MANDARI

2023-01-25 19:43:02,245 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: YONGCHUN LOKAM MANDARI
2023-01-25 19:43:02,245 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:02,245 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  262.20
2023-01-25 19:43:02,245 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 262.20
2023-01-25 19:43:02,246 - __main__ - INFO - 96 - <module>() - Final prediction for document 160: {'company': 'TSM TAKASHI', 'date': '28-01-16', 'address': 'YONGCHUN LOKAM MANDARI', 'total': '262.20'}
2023-01-25 19:43:02,247 - __main__ - INFO - 92 - <module>() - Predicting document 161...
2023-01-25 19:43:09,197 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KINGS
Date of Receipt: 27/03/2017
Address of Company: TY-LOR-KWONG-WA-TSHAN
Total: RM 50.00

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash
2023-01-25 19:43:09,199 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:09,200 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:09,200 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KINGS

2023-01-25 19:43:09,200 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KINGS
2023-01-25 19:43:09,201 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:09,201 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27/03/2017

2023-01-25 19:43:09,201 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27/03/2017
2023-01-25 19:43:09,202 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:09,202 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TY-LOR-KWONG-WA-TSHAN

2023-01-25 19:43:09,202 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TY-LOR-KWONG-WA-TSHAN
2023-01-25 19:43:09,202 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:09,203 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 50.00

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash

```bash
2023-01-25 19:43:09,203 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 50.00 ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash
2023-01-25 19:43:09,204 - __main__ - INFO - 96 - <module>() - Final prediction for document 161: {'company': 'KINGS', 'date': '27/03/2017', 'address': 'TY-LOR-KWONG-WA-TSHAN', 'total': 'RM 50.00 ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash ```bash'}
2023-01-25 19:43:09,206 - __main__ - INFO - 92 - <module>() - Predicting document 162...
2023-01-25 19:43:11,997 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:43:11,998 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:11,998 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:11,998 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:11,999 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:11,999 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:11,999 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:12,000 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:12,000 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:12,000 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:12,000 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:12,001 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:12,001 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:43:12,001 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:12,001 - __main__ - INFO - 96 - <module>() - Final prediction for document 162: {}
2023-01-25 19:43:12,003 - __main__ - INFO - 92 - <module>() - Predicting document 163...
2023-01-25 19:43:19,445 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Key: Value
Company Name: Bar Wang Rice @ Permas Jaya
Date of Receipt: 26-03-2018
Address of Company: Jalan Tampoi 7/4, Kawasan Perindustrian Tampoi, 81200 JOHOR BAHRU, JOHOR
Total: 12.20 (with tax GST @6%)
GST @6%: 0.69 (with tax GST @6%)

Text Document
Company Name: Bar Wang Rice @ Permas Jaya
Date
2023-01-25 19:43:19,447 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:19,447 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:19,448 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:19,448 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:19,448 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:19,448 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:19,449 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:19,449 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:19,449 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:19,449 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:19,449 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:19,450 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Key: Value
Company Name: Bar Wang Rice @ Permas Jaya
Date of Receipt: 26-03-2018
Address of Company: Jalan Tampoi 7/4, Kawasan Perindustrian Tampoi, 81200 JOHOR BAHRU, JOHOR

2023-01-25 19:43:19,450 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Key: Value Company Name: Bar Wang Rice @ Permas Jaya Date of Receipt: 26-03-2018 Address of Company: Jalan Tampoi 7/4, Kawasan Perindustrian Tampoi, 81200 JOHOR BAHRU, JOHOR
2023-01-25 19:43:19,450 - __main__ - INFO - 96 - <module>() - Final prediction for document 163: {'total': 'Key: Value Company Name: Bar Wang Rice @ Permas Jaya Date of Receipt: 26-03-2018 Address of Company: Jalan Tampoi 7/4, Kawasan Perindustrian Tampoi, 81200 JOHOR BAHRU, JOHOR'}
2023-01-25 19:43:19,452 - __main__ - INFO - 92 - <module>() - Predicting document 164...
2023-01-25 19:43:26,508 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "D.I.Y. (KUCHAI) SDN BHD"
Date of Receipt: "30/10/2016 10:38:33"
Address of Company: "LOT 1851-A & 1851-B, JALAN KPB 6, KAWASAN PERINDUSTRIAN BALAKONG, 43300 SERI KEMBANGAN, SELANGOR (GST ID NO :000473792512)"
Total: "9.42"

Key: Value
Company Name: "HILLCREST INVESTMENTS SDN
2023-01-25 19:43:26,511 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:26,511 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:26,513 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "D.I.Y. (KUCHAI) SDN BHD"

2023-01-25 19:43:26,514 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: D.I.Y. (KUCHAI) SDN BHD
2023-01-25 19:43:26,514 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:26,515 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "30/10/2016 10:38:33"

2023-01-25 19:43:26,518 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30/10/2016 10:38:33
2023-01-25 19:43:26,521 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:26,522 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "LOT 1851-A & 1851-B, JALAN KPB 6, KAWASAN PERINDUSTRIAN BALAKONG, 43300 SERI KEMBANGAN, SELANGOR (GST ID NO :000473792512)"

2023-01-25 19:43:26,522 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: LOT 1851-A & 1851-B, JALAN KPB 6, KAWASAN PERINDUSTRIAN BALAKONG, 43300 SERI KEMBANGAN, SELANGOR (GST ID NO :000473792512)
2023-01-25 19:43:26,523 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:26,523 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "9.42"

Key: Value
Company Name: "HILLCREST INVESTMENTS SDN
2023-01-25 19:43:26,523 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "9.42" Key: Value Company Name: "HILLCREST INVESTMENTS SDN
2023-01-25 19:43:26,525 - __main__ - INFO - 96 - <module>() - Final prediction for document 164: {'company': 'D.I.Y. (KUCHAI) SDN BHD', 'date': '30/10/2016 10:38:33', 'address': 'LOT 1851-A & 1851-B, JALAN KPB 6, KAWASAN PERINDUSTRIAN BALAKONG, 43300 SERI KEMBANGAN, SELANGOR (GST ID NO :000473792512)', 'total': '"9.42" Key: Value Company Name: "HILLCREST INVESTMENTS SDN'}
2023-01-25 19:43:26,528 - __main__ - INFO - 92 - <module>() - Predicting document 165...
2023-01-25 19:43:31,166 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "JALAN TEMENGGUNG"
Date of Receipt: 11-05-2018 17:12:34
Address of Company: Jalan Temenggung 19/9, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor
Total: 1.90
2023-01-25 19:43:31,167 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:31,167 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:31,168 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "JALAN TEMENGGUNG"

2023-01-25 19:43:31,168 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN TEMENGGUNG
2023-01-25 19:43:31,168 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:31,169 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  11-05-2018 17:12:34

2023-01-25 19:43:31,169 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11-05-2018 17:12:34
2023-01-25 19:43:31,169 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:31,170 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Temenggung 19/9, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor

2023-01-25 19:43:31,170 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Temenggung 19/9, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor
2023-01-25 19:43:31,170 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:31,170 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1.90
2023-01-25 19:43:31,171 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1.90
2023-01-25 19:43:31,171 - __main__ - INFO - 96 - <module>() - Final prediction for document 165: {'company': 'JALAN TEMENGGUNG', 'date': '11-05-2018 17:12:34', 'address': 'Jalan Temenggung 19/9, Seksyen 9, Bandar Mahkota Cheras, 43200 Cheras, Selangor', 'total': '1.90'}
2023-01-25 19:43:31,173 - __main__ - INFO - 92 - <module>() - Predicting document 166...
2023-01-25 19:43:38,533 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KUO
Date of Receipt: 2017-02-14
Address of Company: PARK ROYAL, #16-02, 1, JALAN BARU MELAKA 2, KEPONG, PJ, 47100, MALAYSIA
Total: 150
>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: REVEL
2023-01-25 19:43:38,535 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:38,535 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:38,536 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KUO

2023-01-25 19:43:38,536 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KUO
2023-01-25 19:43:38,536 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:38,537 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2017-02-14

2023-01-25 19:43:38,537 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017-02-14
2023-01-25 19:43:38,538 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:38,538 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PARK ROYAL, #16-02, 1, JALAN BARU MELAKA 2, KEPONG, PJ, 47100, MALAYSIA

2023-01-25 19:43:38,538 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PARK ROYAL, #16-02, 1, JALAN BARU MELAKA 2, KEPONG, PJ, 47100, MALAYSIA
2023-01-25 19:43:38,539 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:38,539 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  150
>

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: REVEL
2023-01-25 19:43:38,539 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 150 > Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: REVEL
2023-01-25 19:43:38,540 - __main__ - INFO - 96 - <module>() - Final prediction for document 166: {'company': 'KUO', 'date': '2017-02-14', 'address': 'PARK ROYAL, #16-02, 1, JALAN BARU MELAKA 2, KEPONG, PJ, 47100, MALAYSIA', 'total': '150 > Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: REVEL'}
2023-01-25 19:43:38,541 - __main__ - INFO - 92 - <module>() - Predicting document 167...
2023-01-25 19:43:40,610 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Receipt Date
Address of Company: Address of Company
Total: Total
2023-01-25 19:43:40,611 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:40,612 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:40,612 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:43:40,613 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:43:40,613 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:40,617 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Receipt Date

2023-01-25 19:43:40,618 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt Date
2023-01-25 19:43:40,618 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:40,618 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:43:40,618 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:43:40,618 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:40,619 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:43:40,619 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:43:40,619 - __main__ - INFO - 96 - <module>() - Final prediction for document 167: {'company': 'Company Name', 'date': 'Receipt Date', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:43:40,629 - __main__ - INFO - 92 - <module>() - Predicting document 168...
2023-01-25 19:43:47,999 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)
Address of Company: Jalan Pelabur 23/1, 40300 Shah Alam, Selangor
Date of Receipt: 01/09/2017
Amount: 50.00
Company Name: GARDENIA BAKERIES (KL) SDN BHD (139386 X)
Address of Company: Jalan Pelabur 23/1, 40300 Shah Alam, Selangor
Date of Receipt: 01/09/2017
Amount: 30.00
Company Name:
2023-01-25 19:43:48,002 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:48,002 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:48,003 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GARDENIA BAKERIES (KL) SDN BHD (139386 X)
Address of Company: Jalan Pelabur 23/1, 40300 Shah Alam, Selangor

2023-01-25 19:43:48,003 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GARDENIA BAKERIES (KL) SDN BHD (139386 X) Address of Company: Jalan Pelabur 23/1, 40300 Shah Alam, Selangor
2023-01-25 19:43:48,004 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:48,005 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/09/2017
Amount: 50.00
Company Name: GARDENIA BAKERIES (KL) SDN BHD (139386 X)

2023-01-25 19:43:48,005 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/09/2017 Amount: 50.00 Company Name: GARDENIA BAKERIES (KL) SDN BHD (139386 X)
2023-01-25 19:43:48,006 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:48,006 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Pelabur 23/1, 40300 Shah Alam, Selangor
Date of Receipt: 01/09/2017
Amount: 50.00
Company Name: GARDENIA BAKERIES (KL) SDN BHD (139386 X)

2023-01-25 19:43:48,007 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Pelabur 23/1, 40300 Shah Alam, Selangor Date of Receipt: 01/09/2017 Amount: 50.00 Company Name: GARDENIA BAKERIES (KL) SDN BHD (139386 X)
2023-01-25 19:43:48,007 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:48,008 - __main__ - INFO - 96 - <module>() - Final prediction for document 168: {'company': 'GARDENIA BAKERIES (KL) SDN BHD (139386 X) Address of Company: Jalan Pelabur 23/1, 40300 Shah Alam, Selangor', 'date': '01/09/2017 Amount: 50.00 Company Name: GARDENIA BAKERIES (KL) SDN BHD (139386 X)', 'address': 'Jalan Pelabur 23/1, 40300 Shah Alam, Selangor Date of Receipt: 01/09/2017 Amount: 50.00 Company Name: GARDENIA BAKERIES (KL) SDN BHD (139386 X)'}
2023-01-25 19:43:48,011 - __main__ - INFO - 92 - <module>() - Predicting document 169...
2023-01-25 19:43:50,443 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:43:50,444 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:50,445 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:50,446 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:50,447 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:50,448 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:50,448 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:50,449 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:50,449 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:50,450 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:43:50,450 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:50,451 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:50,452 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:43:50,452 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:43:50,453 - __main__ - INFO - 96 - <module>() - Final prediction for document 169: {}
2023-01-25 19:43:50,456 - __main__ - INFO - 92 - <module>() - Predicting document 170...
2023-01-25 19:43:53,890 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  NILAS
Date of Receipt: 09 April 2018
Address of Company: JALAN SABILA
Total: RM25.00
<<Stop key>>

If the total does not match the sum of the "Total" keys, the error message for the row is incorrect.


2023-01-25 19:43:53,892 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:53,892 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:53,893 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NILAS

2023-01-25 19:43:53,893 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NILAS
2023-01-25 19:43:53,894 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:53,895 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  09 April 2018

2023-01-25 19:43:53,895 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 09 April 2018
2023-01-25 19:43:53,896 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:53,897 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN SABILA

2023-01-25 19:43:53,897 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN SABILA
2023-01-25 19:43:53,898 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:53,898 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM25.00
<<Stop key>>

If the total does not match the sum of the "Total" keys, the error message for the row is incorrect.


2023-01-25 19:43:53,899 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM25.00 <<Stop key>> If the total does not match the sum of the "Total" keys, the error message for the row is incorrect.
2023-01-25 19:43:53,900 - __main__ - INFO - 96 - <module>() - Final prediction for document 170: {'company': 'NILAS', 'date': '09 April 2018', 'address': 'JALAN SABILA', 'total': 'RM25.00 <<Stop key>> If the total does not match the sum of the "Total" keys, the error message for the row is incorrect.'}
2023-01-25 19:43:53,902 - __main__ - INFO - 92 - <module>() - Predicting document 171...
2023-01-25 19:43:56,930 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Yap"
Date of Receipt: "24/10/2015"
Address of Company: "Hospital Road"
Total: "20.00"
2023-01-25 19:43:56,931 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:43:56,932 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:43:56,932 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Yap"

2023-01-25 19:43:56,933 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Yap
2023-01-25 19:43:56,933 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:43:56,934 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "24/10/2015"

2023-01-25 19:43:56,934 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24/10/2015
2023-01-25 19:43:56,934 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:43:56,935 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Hospital Road"

2023-01-25 19:43:56,935 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Hospital Road
2023-01-25 19:43:56,936 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:43:56,936 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "20.00"
2023-01-25 19:43:56,937 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20.00
2023-01-25 19:43:56,937 - __main__ - INFO - 96 - <module>() - Final prediction for document 171: {'company': 'Yap', 'date': '24/10/2015', 'address': 'Hospital Road', 'total': '20.00'}
2023-01-25 19:43:56,941 - __main__ - INFO - 92 - <module>() - Predicting document 172...
2023-01-25 19:44:04,071 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "GOLDEN ROLL GER"
Date of Receipt: "11/10/2017 12:33"
Address of Company: "JUNE 8, G.F., KUJANG, PANGKALAN BUNDALAN, 72100 PANGKALAN BUNDALAN, PENANG, MALAYSIA"
Total: "58"

The data set you uploaded contains three columns. We have extracted the first one, "Company Name", "Date of Receipt", and "Total". If you can't find a key-value pair in the
2023-01-25 19:44:04,073 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:04,074 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:04,074 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "GOLDEN ROLL GER"

2023-01-25 19:44:04,075 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GOLDEN ROLL GER
2023-01-25 19:44:04,076 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:04,077 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "11/10/2017 12:33"

2023-01-25 19:44:04,077 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11/10/2017 12:33
2023-01-25 19:44:04,078 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:04,080 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "JUNE 8, G.F., KUJANG, PANGKALAN BUNDALAN, 72100 PANGKALAN BUNDALAN, PENANG, MALAYSIA"

2023-01-25 19:44:04,081 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JUNE 8, G.F., KUJANG, PANGKALAN BUNDALAN, 72100 PANGKALAN BUNDALAN, PENANG, MALAYSIA
2023-01-25 19:44:04,081 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:04,082 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "58"

The data set you uploaded contains three columns. We have extracted the first one, "Company Name", "Date of Receipt", and "Total". If you can't find a key-value pair in the
2023-01-25 19:44:04,083 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "58" The data set you uploaded contains three columns. We have extracted the first one, "Company Name", "Date of Receipt", and "Total". If you can't find a key-value pair in the
2023-01-25 19:44:04,083 - __main__ - INFO - 96 - <module>() - Final prediction for document 172: {'company': 'GOLDEN ROLL GER', 'date': '11/10/2017 12:33', 'address': 'JUNE 8, G.F., KUJANG, PANGKALAN BUNDALAN, 72100 PANGKALAN BUNDALAN, PENANG, MALAYSIA', 'total': '"58" The data set you uploaded contains three columns. We have extracted the first one, "Company Name", "Date of Receipt", and "Total". If you can\'t find a key-value pair in the'}
2023-01-25 19:44:04,086 - __main__ - INFO - 92 - <module>() - Predicting document 173...
2023-01-25 19:44:11,054 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The company's name
Date of Receipt: The date the company registered with the Subway
Address: The address of the company
Total: The total amount of money

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: The company's name
Date of Receipt: The date the company registered with the Subway
Address: The address of the company
Total: The
2023-01-25 19:44:11,055 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:11,055 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:11,056 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The company's name

2023-01-25 19:44:11,056 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The company's name
2023-01-25 19:44:11,056 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:11,056 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date the company registered with the Subway
Address: The address of the company

2023-01-25 19:44:11,057 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date the company registered with the Subway Address: The address of the company
2023-01-25 19:44:11,057 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:11,057 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:11,057 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The total amount of money

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name: The company's name
Date of Receipt: The date the company registered with the Subway
Address: The address of the company

2023-01-25 19:44:11,058 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The total amount of money Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name: The company's name Date of Receipt: The date the company registered with the Subway Address: The address of the company
2023-01-25 19:44:11,058 - __main__ - INFO - 96 - <module>() - Final prediction for document 173: {'company': "The company's name", 'date': 'The date the company registered with the Subway Address: The address of the company', 'total': 'The total amount of money Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name: The company\'s name Date of Receipt: The date the company registered with the Subway Address: The address of the company'}
2023-01-25 19:44:11,060 - __main__ - INFO - 92 - <module>() - Predicting document 174...
2023-01-25 19:44:18,025 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Stop Key: <|Stop Key>
<|Company Name>
<|Date of Receipt>
<|Address of Company>
<|Total>
<|Stop Key>

Expected Results

Result 1 is the list of the total for every company based on the above example. Result 2 is the total, excluding the stop key.

Notes:

You can make use of other functions such as ExtractText or ExtractStopKey provided in the examples below.

The date and total value are not fixed. The
2023-01-25 19:44:18,026 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:18,026 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:18,027 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:18,027 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:18,027 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:18,027 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:18,028 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:18,028 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:18,028 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:18,028 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:18,028 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:18,029 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Stop Key: <|Stop Key>
<|Company Name>
<|Date of Receipt>
<|Address of Company>
<|Total>
<|Stop Key>

Expected Results

Result 1 is the list of the total for every company based on the above example. Result 2 is the total, excluding the stop key.

Notes:

You can make use of other functions such as ExtractText or ExtractStopKey provided in the examples below.

The date and total value are not fixed. The
2023-01-25 19:44:18,029 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Stop Key: <|Stop Key> <|Company Name> <|Date of Receipt> <|Address of Company> <|Total> <|Stop Key> Expected Results Result 1 is the list of the total for every company based on the above example. Result 2 is the total, excluding the stop key. Notes: You can make use of other functions such as ExtractText or ExtractStopKey provided in the examples below. The date and total value are not fixed. The
2023-01-25 19:44:18,029 - __main__ - INFO - 96 - <module>() - Final prediction for document 174: {'total': 'Stop Key: <|Stop Key> <|Company Name> <|Date of Receipt> <|Address of Company> <|Total> <|Stop Key> Expected Results Result 1 is the list of the total for every company based on the above example. Result 2 is the total, excluding the stop key. Notes: You can make use of other functions such as ExtractText or ExtractStopKey provided in the examples below. The date and total value are not fixed. The'}
2023-01-25 19:44:18,031 - __main__ - INFO - 92 - <module>() - Predicting document 175...
2023-01-25 19:44:25,892 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 2018-05-20
Address of Company: null
Total: null

Extract key and value from the document, if they exist. If you cannot find a value in the document, put it in your answer as "null".

Key: Value
Company Name: "Bar Wang Rice"
Date of Receipt: "2018-05-20"
Address of Company: "Permas Jaya"
Total: "RM6.69"

If you got the right answer, congratulations. You should have earned 100 points.

If not, try
2023-01-25 19:44:25,893 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:25,894 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:25,894 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:44:25,894 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:44:25,895 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:25,895 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-05-20

2023-01-25 19:44:25,895 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-05-20
2023-01-25 19:44:25,896 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:25,896 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:44:25,896 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:44:25,896 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:25,897 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

Extract key and value from the document, if they exist. If you cannot find a value in the document, put it in your answer as "null".

Key: Value
Company Name: "Bar Wang Rice"
Date of Receipt: "2018-05-20"
Address of Company: "Permas Jaya"

2023-01-25 19:44:25,897 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null Extract key and value from the document, if they exist. If you cannot find a value in the document, put it in your answer as "null". Key: Value Company Name: "Bar Wang Rice" Date of Receipt: "2018-05-20" Address of Company: "Permas Jaya"
2023-01-25 19:44:25,897 - __main__ - INFO - 96 - <module>() - Final prediction for document 175: {'date': '2018-05-20'}
2023-01-25 19:44:25,900 - __main__ - INFO - 92 - <module>() - Predicting document 176...
2023-01-25 19:44:32,653 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Date of Delivery:
Address of Destination:
Weight/kg:
Package size:
Weight/ltr:
Package type:
TOTAL PAYMENT AMOUNT:

You can find the value of the following fields in the invoice:

Key: Value

Total

GST*

AMOUNT PAID

Payment amount

(AMOUNT PAID - GST)

GST*

(AMOUNT PAID - GST)

Key: Value

Sale Price


2023-01-25 19:44:32,655 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:32,655 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:32,656 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:32,656 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:32,657 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:32,657 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:32,657 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:32,658 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:32,658 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:32,658 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:32,658 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:32,659 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date of Delivery:
Address of Destination:
Weight/kg:
Package size:
Weight/ltr:
Package type:
TOTAL PAYMENT AMOUNT:

You can find the value of the following fields in the invoice:

Key: Value

Total

GST*

AMOUNT PAID

Payment amount

(AMOUNT PAID - GST)

GST*

(AMOUNT PAID - GST)

Key: Value

Sale Price


2023-01-25 19:44:32,659 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Delivery: Address of Destination: Weight/kg: Package size: Weight/ltr: Package type: TOTAL PAYMENT AMOUNT: You can find the value of the following fields in the invoice: Key: Value Total GST* AMOUNT PAID Payment amount (AMOUNT PAID - GST) GST* (AMOUNT PAID - GST) Key: Value Sale Price
2023-01-25 19:44:32,659 - __main__ - INFO - 96 - <module>() - Final prediction for document 176: {'total': 'Date of Delivery: Address of Destination: Weight/kg: Package size: Weight/ltr: Package type: TOTAL PAYMENT AMOUNT: You can find the value of the following fields in the invoice: Key: Value Total GST* AMOUNT PAID Payment amount (AMOUNT PAID - GST) GST* (AMOUNT PAID - GST) Key: Value Sale Price'}
2023-01-25 19:44:32,661 - __main__ - INFO - 92 - <module>() - Predicting document 177...
2023-01-25 19:44:35,681 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <NAME OF YOUR BUSINESS>
Date of Receipt: <DATE OF RECEIPT>
Address of Company: <LOCATION OF THE COMPANY>
Total: <TOTAL PRICE OF THE GOODS/SERVICES>
2023-01-25 19:44:35,682 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:35,682 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:35,683 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <NAME OF YOUR BUSINESS>

2023-01-25 19:44:35,683 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <NAME OF YOUR BUSINESS>
2023-01-25 19:44:35,683 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:35,684 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <DATE OF RECEIPT>

2023-01-25 19:44:35,684 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <DATE OF RECEIPT>
2023-01-25 19:44:35,685 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:35,685 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <LOCATION OF THE COMPANY>

2023-01-25 19:44:35,685 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <LOCATION OF THE COMPANY>
2023-01-25 19:44:35,685 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:35,686 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <TOTAL PRICE OF THE GOODS/SERVICES>
2023-01-25 19:44:35,686 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <TOTAL PRICE OF THE GOODS/SERVICES>
2023-01-25 19:44:35,686 - __main__ - INFO - 96 - <module>() - Final prediction for document 177: {'company': '<NAME OF YOUR BUSINESS>', 'date': '<DATE OF RECEIPT>', 'address': '<LOCATION OF THE COMPANY>', 'total': '<TOTAL PRICE OF THE GOODS/SERVICES>'}
2023-01-25 19:44:35,688 - __main__ - INFO - 92 - <module>() - Predicting document 178...
2023-01-25 19:44:37,359 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:44:37,359 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:37,360 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:37,360 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:37,360 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:37,361 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:37,361 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:37,361 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:37,362 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:37,362 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:37,362 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:37,362 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:37,363 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:44:37,363 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:37,363 - __main__ - INFO - 96 - <module>() - Final prediction for document 178: {}
2023-01-25 19:44:37,365 - __main__ - INFO - 92 - <module>() - Predicting document 179...
2023-01-25 19:44:39,742 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 18/03/18
Address of Company: R 0000605770
Total:

2023-01-25 19:44:39,743 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:39,743 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:39,744 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:39,744 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:39,744 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:39,745 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18/03/18

2023-01-25 19:44:39,745 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18/03/18
2023-01-25 19:44:39,745 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:39,745 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  R 0000605770

2023-01-25 19:44:39,746 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: R 0000605770
2023-01-25 19:44:39,746 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:39,746 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:39,746 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:39,747 - __main__ - INFO - 96 - <module>() - Final prediction for document 179: {'date': '18/03/18', 'address': 'R 0000605770'}
2023-01-25 19:44:39,748 - __main__ - INFO - 92 - <module>() - Predicting document 180...
2023-01-25 19:44:42,462 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  DAISO STARLING MALL
Date of Receipt: 20170708
Address of Company: 1ST FLR, AEON TAMAN MALURI SC
Total: 0.20SR
2023-01-25 19:44:42,463 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:42,463 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:42,464 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DAISO STARLING MALL

2023-01-25 19:44:42,464 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DAISO STARLING MALL
2023-01-25 19:44:42,464 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:42,465 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20170708

2023-01-25 19:44:42,465 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20170708
2023-01-25 19:44:42,465 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:42,465 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1ST FLR, AEON TAMAN MALURI SC

2023-01-25 19:44:42,465 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1ST FLR, AEON TAMAN MALURI SC
2023-01-25 19:44:42,466 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:42,466 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.20SR
2023-01-25 19:44:42,466 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.20SR
2023-01-25 19:44:42,467 - __main__ - INFO - 96 - <module>() - Final prediction for document 180: {'company': 'DAISO STARLING MALL', 'date': '20170708', 'address': '1ST FLR, AEON TAMAN MALURI SC', 'total': '0.20SR'}
2023-01-25 19:44:42,469 - __main__ - INFO - 92 - <module>() - Predicting document 181...
2023-01-25 19:44:45,024 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: Date: <|stop key|>
Address of Company:
Total:
2023-01-25 19:44:45,024 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:45,025 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:45,025 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:45,025 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:45,025 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:45,026 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date: <|stop key|>

2023-01-25 19:44:45,026 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date: <|stop key|>
2023-01-25 19:44:45,026 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:45,026 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:44:45,026 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:45,026 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:45,027 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:44:45,027 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:44:45,027 - __main__ - INFO - 96 - <module>() - Final prediction for document 181: {'date': 'Date: <|stop key|>'}
2023-01-25 19:44:45,029 - __main__ - INFO - 92 - <module>() - Predicting document 182...
2023-01-25 19:44:50,855 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Xing (XING)
Date of Receipt: 2017-03-27
Address of Company: 1/F, Hightech Enterprise Building
Total: 100.00
Total
2023-01-25 19:44:50,856 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:50,856 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:50,856 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Xing (XING)

2023-01-25 19:44:50,856 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Xing (XING)
2023-01-25 19:44:50,856 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:50,856 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2017-03-27

2023-01-25 19:44:50,856 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017-03-27
2023-01-25 19:44:50,856 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:50,857 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1/F, Hightech Enterprise Building

2023-01-25 19:44:50,857 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1/F, Hightech Enterprise Building
2023-01-25 19:44:50,857 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:50,857 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  100.00
Total
2023-01-25 19:44:50,857 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 100.00 Total
2023-01-25 19:44:50,857 - __main__ - INFO - 96 - <module>() - Final prediction for document 182: {'company': 'Xing (XING)', 'date': '2017-03-27', 'address': '1/F, Hightech Enterprise Building', 'total': '100.00 Total'}
2023-01-25 19:44:50,858 - __main__ - INFO - 92 - <module>() - Predicting document 183...
2023-01-25 19:44:57,370 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  DAPPER CLOTHING LTD.
Date of Receipt: 25.05.17
Address of Company: 3A HARDY HILLS JAYA 6, MALAYSIA.
Total: 12.00

Write a function named "findKeyValuePair()" which takes the following inputs: key as the first input, value as the second input.

Create a function named "deleteKeyValuePair(key, value)". This function should take one input: key. It should delete the key-value pair whose key equals key and value equals value.

The function should
2023-01-25 19:44:57,370 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DAPPER CLOTHING LTD.

2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DAPPER CLOTHING LTD.
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25.05.17

2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25.05.17
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3A HARDY HILLS JAYA 6, MALAYSIA.

2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3A HARDY HILLS JAYA 6, MALAYSIA.
2023-01-25 19:44:57,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:44:57,372 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12.00

Write a function named "findKeyValuePair()" which takes the following inputs: key as the first input, value as the second input.

Create a function named "deleteKeyValuePair(key, value)". This function should take one input: key. It should delete the key-value pair whose key equals key and value equals value.

The function should
2023-01-25 19:44:57,372 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12.00 Write a function named "findKeyValuePair()" which takes the following inputs: key as the first input, value as the second input. Create a function named "deleteKeyValuePair(key, value)". This function should take one input: key. It should delete the key-value pair whose key equals key and value equals value. The function should
2023-01-25 19:44:57,372 - __main__ - INFO - 96 - <module>() - Final prediction for document 183: {'company': 'DAPPER CLOTHING LTD.', 'date': '25.05.17', 'address': '3A HARDY HILLS JAYA 6, MALAYSIA.', 'total': '12.00 Write a function named "findKeyValuePair()" which takes the following inputs: key as the first input, value as the second input. Create a function named "deleteKeyValuePair(key, value)". This function should take one input: key. It should delete the key-value pair whose key equals key and value equals value. The function should'}
2023-01-25 19:44:57,372 - __main__ - INFO - 92 - <module>() - Predicting document 184...
2023-01-25 19:45:11,305 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date Receipt
Address of Company: Address of Company
Total: Total

Input: document(i).Output: output_id(ii), output_text(iii)
where,
ii is unique and not in (select i from document)
if output_id is not null, output_text = "CASH", else output_text = "NO CASH"

Key: Value
Output: output_text
i
i is the sequence number
document(i).Output: output_id(ii), output_text(iii)
output
2023-01-25 19:45:11,306 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:11,306 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:11,307 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:45:11,307 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:45:11,307 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:11,307 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date Receipt

2023-01-25 19:45:11,308 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date Receipt
2023-01-25 19:45:11,308 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:11,308 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:45:11,308 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:45:11,308 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:11,309 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Input: document(i).Output: output_id(ii), output_text(iii)
where,
ii is unique and not in (select i from document)
if output_id is not null, output_text = "CASH", else output_text = "NO CASH"

Key: Value
Output: output_text
i
i is the sequence number
document(i).Output: output_id(ii), output_text(iii)
output
2023-01-25 19:45:11,309 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Input: document(i).Output: output_id(ii), output_text(iii) where, ii is unique and not in (select i from document) if output_id is not null, output_text = "CASH", else output_text = "NO CASH" Key: Value Output: output_text i i is the sequence number document(i).Output: output_id(ii), output_text(iii) output
2023-01-25 19:45:11,309 - __main__ - INFO - 96 - <module>() - Final prediction for document 184: {'company': 'Company Name', 'date': 'Date Receipt', 'address': 'Address of Company', 'total': 'Total Input: document(i).Output: output_id(ii), output_text(iii) where, ii is unique and not in (select i from document) if output_id is not null, output_text = "CASH", else output_text = "NO CASH" Key: Value Output: output_text i i is the sequence number document(i).Output: output_id(ii), output_text(iii) output'}
2023-01-25 19:45:11,311 - __main__ - INFO - 92 - <module>() - Predicting document 185...
2023-01-25 19:45:20,218 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  S/B SPEED MART S/B (519537-X)
Date of Receipt: 07:13PM
Address of Company: Lot P.T. 33198, BATU 4
Total: 2.11

The company has given two different tax amount.

Extract "Total Sales (inclusive GST)", "Rounding Amount", "Rounding", "GST Summary" from the document above.

Your answer will be in the form of a string array:
{
Company name: S/B SPEED MART S/B (519537-X
2023-01-25 19:45:20,218 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:20,219 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:20,219 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S/B SPEED MART S/B (519537-X)

2023-01-25 19:45:20,220 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S/B SPEED MART S/B (519537-X)
2023-01-25 19:45:20,220 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:20,220 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  07:13PM

2023-01-25 19:45:20,220 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 07:13PM
2023-01-25 19:45:20,221 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:20,221 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Lot P.T. 33198, BATU 4

2023-01-25 19:45:20,221 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Lot P.T. 33198, BATU 4
2023-01-25 19:45:20,222 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:20,222 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2.11

The company has given two different tax amount.

Extract "Total Sales (inclusive GST)", "Rounding Amount", "Rounding", "GST Summary" from the document above.

Your answer will be in the form of a string array:
{
Company name: S/B SPEED MART S/B (519537-X
2023-01-25 19:45:20,222 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2.11 The company has given two different tax amount. Extract "Total Sales (inclusive GST)", "Rounding Amount", "Rounding", "GST Summary" from the document above. Your answer will be in the form of a string array: { Company name: S/B SPEED MART S/B (519537-X
2023-01-25 19:45:20,222 - __main__ - INFO - 96 - <module>() - Final prediction for document 185: {'company': 'S/B SPEED MART S/B (519537-X)', 'date': '07:13PM', 'address': 'Lot P.T. 33198, BATU 4', 'total': '2.11 The company has given two different tax amount. Extract "Total Sales (inclusive GST)", "Rounding Amount", "Rounding", "GST Summary" from the document above. Your answer will be in the form of a string array: { Company name: S/B SPEED MART S/B (519537-X'}
2023-01-25 19:45:20,224 - __main__ - INFO - 92 - <module>() - Predicting document 186...
2023-01-25 19:45:27,214 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  HONDA MOTOR
Date of Receipt: 01.05.2017
Address of Company:
Total: 123456.34

Honda, with a new product to launch this week, is taking a different approach to promoting it. The Japanese carmaker has started a campaign, to be posted on Facebook for all to see, that shows just how people will be parking, the Honda e-NV200 electric vehicle.

The ad, designed to look like a typical Facebook post, starts with a few paragraphs about the vehicle, including its range, and goes on to address a number of other hot topics,
2023-01-25 19:45:27,214 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:27,215 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:27,215 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  HONDA MOTOR

2023-01-25 19:45:27,215 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: HONDA MOTOR
2023-01-25 19:45:27,215 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:27,216 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01.05.2017

2023-01-25 19:45:27,216 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01.05.2017
2023-01-25 19:45:27,216 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:27,217 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:27,217 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:27,217 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:27,217 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  123456.34

Honda, with a new product to launch this week, is taking a different approach to promoting it. The Japanese carmaker has started a campaign, to be posted on Facebook for all to see, that shows just how people will be parking, the Honda e-NV200 electric vehicle.

The ad, designed to look like a typical Facebook post, starts with a few paragraphs about the vehicle, including its range, and goes on to address a number of other hot topics,
2023-01-25 19:45:27,218 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 123456.34 Honda, with a new product to launch this week, is taking a different approach to promoting it. The Japanese carmaker has started a campaign, to be posted on Facebook for all to see, that shows just how people will be parking, the Honda e-NV200 electric vehicle. The ad, designed to look like a typical Facebook post, starts with a few paragraphs about the vehicle, including its range, and goes on to address a number of other hot topics,
2023-01-25 19:45:27,218 - __main__ - INFO - 96 - <module>() - Final prediction for document 186: {'company': 'HONDA MOTOR', 'date': '01.05.2017', 'total': '123456.34 Honda, with a new product to launch this week, is taking a different approach to promoting it. The Japanese carmaker has started a campaign, to be posted on Facebook for all to see, that shows just how people will be parking, the Honda e-NV200 electric vehicle. The ad, designed to look like a typical Facebook post, starts with a few paragraphs about the vehicle, including its range, and goes on to address a number of other hot topics,'}
2023-01-25 19:45:27,220 - __main__ - INFO - 92 - <module>() - Predicting document 187...
2023-01-25 19:45:30,314 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Daimler Buses Sdn Bhd (01)
Date of Receipt: 1/2/2017
Address of Company: Jalan Gebeng, Pulau Meranti, Pulau Pinang, Pulau Pinang
Total: 5.30
2023-01-25 19:45:30,315 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:30,315 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:30,315 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Daimler Buses Sdn Bhd (01)

2023-01-25 19:45:30,315 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Daimler Buses Sdn Bhd (01)
2023-01-25 19:45:30,315 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:30,315 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1/2/2017

2023-01-25 19:45:30,316 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1/2/2017
2023-01-25 19:45:30,316 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:30,316 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Gebeng, Pulau Meranti, Pulau Pinang, Pulau Pinang

2023-01-25 19:45:30,316 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Gebeng, Pulau Meranti, Pulau Pinang, Pulau Pinang
2023-01-25 19:45:30,316 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:30,316 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  5.30
2023-01-25 19:45:30,316 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 5.30
2023-01-25 19:45:30,316 - __main__ - INFO - 96 - <module>() - Final prediction for document 187: {'company': 'Daimler Buses Sdn Bhd (01)', 'date': '1/2/2017', 'address': 'Jalan Gebeng, Pulau Meranti, Pulau Pinang, Pulau Pinang', 'total': '5.30'}
2023-01-25 19:45:30,317 - __main__ - INFO - 92 - <module>() - Predicting document 188...
2023-01-25 19:45:37,146 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Microsoft Corporation
Address of Company: One Microsoft Way
Total: 16,900,000,000.00

You should be able to see the answer to the original question in the log. Note that it's best practice to leave the output in C:\Users\user\AppData\Roaming\Microsoft\Windows\Logs\Rundll32.log instead of deleting it. I'd highly recommend using a GUI tool to generate code, though. There are several out there, but Visual Studio Express has this capability built in. (Not Visual Studio Community or Professional, which are the free ones, though, since
2023-01-25 19:45:37,146 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:37,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:37,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Microsoft Corporation

2023-01-25 19:45:37,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Microsoft Corporation
2023-01-25 19:45:37,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:37,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:37,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  One Microsoft Way

2023-01-25 19:45:37,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: One Microsoft Way
2023-01-25 19:45:37,148 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:37,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  16,900,000,000.00

You should be able to see the answer to the original question in the log. Note that it's best practice to leave the output in C:\Users\user\AppData\Roaming\Microsoft\Windows\Logs\Rundll32.log instead of deleting it. I'd highly recommend using a GUI tool to generate code, though. There are several out there, but Visual Studio Express has this capability built in. (Not Visual Studio Community or Professional, which are the free ones, though, since
2023-01-25 19:45:37,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 16,900,000,000.00 You should be able to see the answer to the original question in the log. Note that it's best practice to leave the output in C:\Users\user\AppData\Roaming\Microsoft\Windows\Logs\Rundll32.log instead of deleting it. I'd highly recommend using a GUI tool to generate code, though. There are several out there, but Visual Studio Express has this capability built in. (Not Visual Studio Community or Professional, which are the free ones, though, since
2023-01-25 19:45:37,148 - __main__ - INFO - 96 - <module>() - Final prediction for document 188: {'company': 'Microsoft Corporation', 'address': 'One Microsoft Way', 'total': "16,900,000,000.00 You should be able to see the answer to the original question in the log. Note that it's best practice to leave the output in C:\\Users\\user\\AppData\\Roaming\\Microsoft\\Windows\\Logs\\Rundll32.log instead of deleting it. I'd highly recommend using a GUI tool to generate code, though. There are several out there, but Visual Studio Express has this capability built in. (Not Visual Studio Community or Professional, which are the free ones, though, since"}
2023-01-25 19:45:37,150 - __main__ - INFO - 92 - <module>() - Predicting document 189...
2023-01-25 19:45:38,898 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:45:38,898 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:38,899 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:38,899 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:38,899 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:38,899 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:38,899 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:38,900 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:38,900 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:38,900 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:45:38,900 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:38,900 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:38,900 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:45:38,900 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:45:38,901 - __main__ - INFO - 96 - <module>() - Final prediction for document 189: {}
2023-01-25 19:45:38,902 - __main__ - INFO - 92 - <module>() - Predicting document 190...
2023-01-25 19:45:46,430 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Ajitha Textile Private Limited"
Date of Receipt: 07/06/2018
Address of Company: Taman Jaya Lama, Persiaran Merlin, Kuala Terengganu, Terengganu, 47100, Malaysia
Total: RM15.00
Sub Total: RM13.30
Grand Total: RM15.00
Total Paid: RM13.00
Note: You can add the receipt you received from any store, whether or not they accept the card. You don’t have to give receipts for things you bought from someone else.


2023-01-25 19:45:46,430 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:46,431 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:46,431 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Ajitha Textile Private Limited"

2023-01-25 19:45:46,431 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Ajitha Textile Private Limited
2023-01-25 19:45:46,432 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:46,432 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  07/06/2018

2023-01-25 19:45:46,432 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 07/06/2018
2023-01-25 19:45:46,432 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:46,433 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Taman Jaya Lama, Persiaran Merlin, Kuala Terengganu, Terengganu, 47100, Malaysia

2023-01-25 19:45:46,433 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Taman Jaya Lama, Persiaran Merlin, Kuala Terengganu, Terengganu, 47100, Malaysia
2023-01-25 19:45:46,433 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:46,434 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM15.00
Sub
2023-01-25 19:45:46,434 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM15.00 Sub
2023-01-25 19:45:46,434 - __main__ - INFO - 96 - <module>() - Final prediction for document 190: {'company': 'Ajitha Textile Private Limited', 'date': '07/06/2018', 'address': 'Taman Jaya Lama, Persiaran Merlin, Kuala Terengganu, Terengganu, 47100, Malaysia', 'total': 'RM15.00 Sub'}
2023-01-25 19:45:46,436 - __main__ - INFO - 92 - <module>() - Predicting document 191...
2023-01-25 19:45:52,086 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The Company name.
Date of Receipt: The date of receipt.
Address of Company: The Address of Company.
Total: The sum of all the payments (inclusive of GST).

Step 2

Create a text file in Excel and include the output from the above script.

Step 3

Open the text file that you just created and upload it to the Data Extraction Tool website. Copy and paste the link to the uploaded data.
2023-01-25 19:45:52,086 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:52,087 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:52,087 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The Company name.

2023-01-25 19:45:52,087 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The Company name.
2023-01-25 19:45:52,087 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:52,088 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date of receipt.

2023-01-25 19:45:52,088 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date of receipt.
2023-01-25 19:45:52,088 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:52,088 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The Address of Company.

2023-01-25 19:45:52,088 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The Address of Company.
2023-01-25 19:45:52,089 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:52,089 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The sum of all the payments (inclusive of GST).

Step 2

Create a text file in Excel and include the output from the above script.

Step 3

Open the text file that you just created and upload it to the Data Extraction Tool website. Copy and paste the link to the uploaded data.
2023-01-25 19:45:52,089 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The sum of all the payments (inclusive of GST). Step 2 Create a text file in Excel and include the output from the above script. Step 3 Open the text file that you just created and upload it to the Data Extraction Tool website. Copy and paste the link to the uploaded data.
2023-01-25 19:45:52,089 - __main__ - INFO - 96 - <module>() - Final prediction for document 191: {'company': 'The Company name.', 'date': 'The date of receipt.', 'address': 'The Address of Company.', 'total': 'The sum of all the payments (inclusive of GST). Step 2 Create a text file in Excel and include the output from the above script. Step 3 Open the text file that you just created and upload it to the Data Extraction Tool website. Copy and paste the link to the uploaded data.'}
2023-01-25 19:45:52,091 - __main__ - INFO - 92 - <module>() - Predicting document 192...
2023-01-25 19:45:59,068 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:   Tharisan Noodles
Date of Receipt: 16-08-2017
Address of Company: Taman Wira Tengah, Kota Kinabalu, Sabah, Malaysia
Total: RM9.50
|stop key|

Output
Company Name: Tharisan Noodles
Date of Receipt: 16-08-2017
Address of Company: Taman Wira Tengah, Kota Kinabalu, Sabah, Malaysia
Total: RM9.50

How does it work?
In JavaScript, strings are objects as well. And like
2023-01-25 19:45:59,069 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:45:59,069 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:45:59,070 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:   Tharisan Noodles

2023-01-25 19:45:59,070 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Tharisan Noodles
2023-01-25 19:45:59,070 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:45:59,070 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  16-08-2017

2023-01-25 19:45:59,071 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 16-08-2017
2023-01-25 19:45:59,071 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:45:59,071 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Taman Wira Tengah, Kota Kinabalu, Sabah, Malaysia

2023-01-25 19:45:59,071 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Taman Wira Tengah, Kota Kinabalu, Sabah, Malaysia
2023-01-25 19:45:59,072 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:45:59,072 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM9.50
|stop key|

Output
Company Name: Tharisan Noodles
Date of Receipt: 16-08-2017
Address of Company: Taman Wira Tengah, Kota Kinabalu, Sabah, Malaysia

2023-01-25 19:45:59,072 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM9.50 |stop key| Output Company Name: Tharisan Noodles Date of Receipt: 16-08-2017 Address of Company: Taman Wira Tengah, Kota Kinabalu, Sabah, Malaysia
2023-01-25 19:45:59,073 - __main__ - INFO - 96 - <module>() - Final prediction for document 192: {'company': 'Tharisan Noodles', 'date': '16-08-2017', 'address': 'Taman Wira Tengah, Kota Kinabalu, Sabah, Malaysia', 'total': 'RM9.50 |stop key| Output Company Name: Tharisan Noodles Date of Receipt: 16-08-2017 Address of Company: Taman Wira Tengah, Kota Kinabalu, Sabah, Malaysia'}
2023-01-25 19:45:59,074 - __main__ - INFO - 92 - <module>() - Predicting document 193...
2023-01-25 19:46:05,994 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "PETRON BKT LANJAN SB
ALSERKAM ENTERPRISE
TEL: 03-6156 8757
CO NO: 001083069-M
KM 458.4 BKT LANJAN UTARA,
L/RAYA UTARA SELATAN, SG BULOH
47000 SUNGAI BUL
GST ID NO: 001210736640
TAX INVOICE
TAX INVOICE NO: 19729058
POS:
1
STORE NO.:
129077
BABU
01/02/2018
4
2023-01-25 19:46:05,994 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:05,994 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:05,995 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "PETRON BKT LANJAN SB
ALSERKAM ENTERPRISE
TEL: 03-6156 8757
CO NO: 001083069-M
KM 458.4 BKT LANJAN UTARA,
L/RAYA UTARA SELATAN, SG BULOH
47000 SUNGAI BUL
GST ID NO: 001210736640
TAX INVOICE
TAX INVOICE NO: 19729058
POS:
1
STORE NO.:
129077
BABU
01/02/2018
4
2023-01-25 19:46:05,995 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "PETRON BKT LANJAN SB ALSERKAM ENTERPRISE TEL: 03-6156 8757 CO NO: 001083069-M KM 458.4 BKT LANJAN UTARA, L/RAYA UTARA SELATAN, SG BULOH 47000 SUNGAI BUL GST ID NO: 001210736640 TAX INVOICE TAX INVOICE NO: 19729058 POS: 1 STORE NO.: 129077 BABU 01/02/2018 4
2023-01-25 19:46:05,995 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:05,995 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:05,995 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:05,995 - __main__ - INFO - 96 - <module>() - Final prediction for document 193: {'company': '"PETRON BKT LANJAN SB ALSERKAM ENTERPRISE TEL: 03-6156 8757 CO NO: 001083069-M KM 458.4 BKT LANJAN UTARA, L/RAYA UTARA SELATAN, SG BULOH 47000 SUNGAI BUL GST ID NO: 001210736640 TAX INVOICE TAX INVOICE NO: 19729058 POS: 1 STORE NO.: 129077 BABU 01/02/2018 4'}
2023-01-25 19:46:05,997 - __main__ - INFO - 92 - <module>() - Predicting document 194...
2023-01-25 19:46:07,927 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ...............
Date of Receipt: .........
Address of Company: .....
Total: ...
|<|stop key|>| null|
2023-01-25 19:46:07,927 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:07,928 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:07,928 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ...............

2023-01-25 19:46:07,928 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ...............
2023-01-25 19:46:07,928 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:07,929 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  .........

2023-01-25 19:46:07,929 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: .........
2023-01-25 19:46:07,929 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:07,930 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  .....

2023-01-25 19:46:07,930 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: .....
2023-01-25 19:46:07,930 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:07,930 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ...
|<|stop key|>| null|
2023-01-25 19:46:07,931 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ... |<|stop key|>| null|
2023-01-25 19:46:07,931 - __main__ - INFO - 96 - <module>() - Final prediction for document 194: {'company': '...............', 'date': '.........', 'address': '.....', 'total': '... |<|stop key|>| null|'}
2023-01-25 19:46:07,933 - __main__ - INFO - 92 - <module>() - Predicting document 195...
2023-01-25 19:46:09,593 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:46:09,593 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:09,594 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:09,594 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:09,594 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:09,595 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:09,595 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:09,595 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:09,596 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:09,596 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:09,596 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:09,597 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:09,597 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:46:09,597 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:09,597 - __main__ - INFO - 96 - <module>() - Final prediction for document 195: {}
2023-01-25 19:46:09,599 - __main__ - INFO - 92 - <module>() - Predicting document 196...
2023-01-25 19:46:11,857 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Seng
Date of Receipt: 2017-04-12
Address of Company:
Total:
2023-01-25 19:46:11,857 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:11,857 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:11,857 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Seng

2023-01-25 19:46:11,857 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Seng
2023-01-25 19:46:11,857 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:11,858 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2017-04-12

2023-01-25 19:46:11,858 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017-04-12
2023-01-25 19:46:11,858 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:11,858 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:11,858 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:11,858 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:11,858 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:46:11,858 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:11,859 - __main__ - INFO - 96 - <module>() - Final prediction for document 196: {'company': 'Seng', 'date': '2017-04-12'}
2023-01-25 19:46:11,859 - __main__ - INFO - 92 - <module>() - Predicting document 197...
2023-01-25 19:46:15,602 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Baskin Robbins
Date of Receipt: 7/10/2017
Address of Company: Jalan Rendel 1, Kg. Setia Budi, Bukit Tambun, Petaling Jaya
Total: RM 14.40
2023-01-25 19:46:15,604 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:15,604 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:15,604 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Baskin Robbins

2023-01-25 19:46:15,605 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Baskin Robbins
2023-01-25 19:46:15,605 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:15,605 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7/10/2017

2023-01-25 19:46:15,606 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7/10/2017
2023-01-25 19:46:15,606 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:15,606 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Rendel 1, Kg. Setia Budi, Bukit Tambun, Petaling Jaya

2023-01-25 19:46:15,606 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Rendel 1, Kg. Setia Budi, Bukit Tambun, Petaling Jaya
2023-01-25 19:46:15,607 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:15,607 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 14.40
2023-01-25 19:46:15,607 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 14.40
2023-01-25 19:46:15,607 - __main__ - INFO - 96 - <module>() - Final prediction for document 197: {'company': 'Baskin Robbins', 'date': '7/10/2017', 'address': 'Jalan Rendel 1, Kg. Setia Budi, Bukit Tambun, Petaling Jaya', 'total': 'RM 14.40'}
2023-01-25 19:46:15,609 - __main__ - INFO - 92 - <module>() - Predicting document 198...
2023-01-25 19:46:22,613 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company
Date of Receipt: Date
Address of Company: Address
Total: Total
Address to: Address

Example:

Key: Value
Company Name: "Lazada Malaysia SDN BHD"
Date of Receipt: null
Address of Company: null
Total: "15.15"
Address to: "GST-001"

A:

The way you have set things up, the keys and values are in the wrong order, so you can't easily do this with a split() and then indexOf() operation.
I'd recommend using the match()
2023-01-25 19:46:22,614 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:22,615 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:22,615 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company

2023-01-25 19:46:22,616 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company
2023-01-25 19:46:22,616 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:22,616 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date

2023-01-25 19:46:22,617 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date
2023-01-25 19:46:22,617 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:22,617 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address

2023-01-25 19:46:22,617 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address
2023-01-25 19:46:22,618 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:22,618 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
Address to: Address

Example:

Key: Value
Company Name: "Lazada Malaysia SDN BHD"
Date of Receipt: null
Address of Company: null

2023-01-25 19:46:22,618 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Address to: Address Example: Key: Value Company Name: "Lazada Malaysia SDN BHD" Date of Receipt: null Address of Company: null
2023-01-25 19:46:22,618 - __main__ - INFO - 96 - <module>() - Final prediction for document 198: {'company': 'Company', 'date': 'Date', 'address': 'Address', 'total': 'Total Address to: Address Example: Key: Value Company Name: "Lazada Malaysia SDN BHD" Date of Receipt: null Address of Company: null'}
2023-01-25 19:46:22,621 - __main__ - INFO - 92 - <module>() - Predicting document 199...
2023-01-25 19:46:29,579 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name here
Date of Receipt: YYYY-MM-DD
Address of Company: Address of Company here
Total: Total of the invoice

Create a list with each extracted key-value pair in a separate cell. Set the header to "Invoice Number", "VAT Amount" and "Customer Name".

For each extracted key (Company Name in this case), loop over the values of that key:

Remove the invoice number from the document set by doing the following:

Create a temporary dictionary
Set the temporary dictionary's item as the invoice number
Check the dictionary to see
2023-01-25 19:46:29,580 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:29,580 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:29,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name here

2023-01-25 19:46:29,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name here
2023-01-25 19:46:29,581 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:29,582 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  YYYY-MM-DD

2023-01-25 19:46:29,582 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: YYYY-MM-DD
2023-01-25 19:46:29,582 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:29,583 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company here

2023-01-25 19:46:29,583 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company here
2023-01-25 19:46:29,583 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:29,583 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total of the invoice

Create a list with each extracted key-value pair in a separate cell. Set the header to "Invoice Number", "VAT Amount" and "Customer Name".

For each extracted key (Company Name in this case), loop over the values of that key:

Remove the invoice number from the document set by doing the following:

Create a temporary dictionary
Set the temporary dictionary's item as the invoice number
Check the dictionary to see
2023-01-25 19:46:29,584 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total of the invoice Create a list with each extracted key-value pair in a separate cell. Set the header to "Invoice Number", "VAT Amount" and "Customer Name". For each extracted key (Company Name in this case), loop over the values of that key: Remove the invoice number from the document set by doing the following: Create a temporary dictionary Set the temporary dictionary's item as the invoice number Check the dictionary to see
2023-01-25 19:46:29,584 - __main__ - INFO - 96 - <module>() - Final prediction for document 199: {'company': 'Company Name here', 'date': 'YYYY-MM-DD', 'address': 'Address of Company here', 'total': 'Total of the invoice Create a list with each extracted key-value pair in a separate cell. Set the header to "Invoice Number", "VAT Amount" and "Customer Name". For each extracted key (Company Name in this case), loop over the values of that key: Remove the invoice number from the document set by doing the following: Create a temporary dictionary Set the temporary dictionary\'s item as the invoice number Check the dictionary to see'}
2023-01-25 19:46:29,586 - __main__ - INFO - 92 - <module>() - Predicting document 200...
2023-01-25 19:46:34,011 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  S.C.W.C. Enterprises SDN BHD
Date of Receipt: 2017-03-12 20:05:56
Address of Company: Jalan Dinara, U3A, Tmn Subang Pardana, 40150, Shah Alam, Selangor
Total: 3.40
2023-01-25 19:46:34,012 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:34,012 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:34,012 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S.C.W.C. Enterprises SDN BHD

2023-01-25 19:46:34,013 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S.C.W.C. Enterprises SDN BHD
2023-01-25 19:46:34,013 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:34,013 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2017-03-12 20:05:56

2023-01-25 19:46:34,013 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017-03-12 20:05:56
2023-01-25 19:46:34,013 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:34,014 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Dinara, U3A, Tmn Subang Pardana, 40150, Shah Alam, Selangor

2023-01-25 19:46:34,014 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Dinara, U3A, Tmn Subang Pardana, 40150, Shah Alam, Selangor
2023-01-25 19:46:34,014 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:34,014 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3.40
2023-01-25 19:46:34,015 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3.40
2023-01-25 19:46:34,015 - __main__ - INFO - 96 - <module>() - Final prediction for document 200: {'company': 'S.C.W.C. Enterprises SDN BHD', 'date': '2017-03-12 20:05:56', 'address': 'Jalan Dinara, U3A, Tmn Subang Pardana, 40150, Shah Alam, Selangor', 'total': '3.40'}
2023-01-25 19:46:34,016 - __main__ - INFO - 92 - <module>() - Predicting document 201...
2023-01-25 19:46:40,568 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  NICOLAS
Date of Receipt: 12/03/2017
Address of Company: NICOLAS BOUQUET
Total: 18000.00

I just want to extract the 4 values only (company name, date, address and total) and put them into a table with the columns date, company name, address, total as shown below:
I have this code but I'm having difficulty finding how to get the 4 values and put them into a table and get the 4 columns (date, company name, address and total).
Dim objTable As New DataTable
objTable.Columns
2023-01-25 19:46:40,569 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:40,569 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:40,570 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NICOLAS

2023-01-25 19:46:40,570 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NICOLAS
2023-01-25 19:46:40,570 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:40,571 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12/03/2017

2023-01-25 19:46:40,571 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12/03/2017
2023-01-25 19:46:40,571 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:40,572 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NICOLAS BOUQUET

2023-01-25 19:46:40,572 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NICOLAS BOUQUET
2023-01-25 19:46:40,572 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:40,573 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  18000.00

I just want to extract the 4 values only (company name, date, address and total) and put them into a table with the columns date, company name, address, total as shown below:
I have this code but I'm having difficulty finding how to get the 4 values and put them into a table and get the 4 columns (date, company name, address and total).
Dim objTable As New DataTable
objTable.Columns
2023-01-25 19:46:40,573 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 18000.00 I just want to extract the 4 values only (company name, date, address and total) and put them into a table with the columns date, company name, address, total as shown below: I have this code but I'm having difficulty finding how to get the 4 values and put them into a table and get the 4 columns (date, company name, address and total). Dim objTable As New DataTable objTable.Columns
2023-01-25 19:46:40,573 - __main__ - INFO - 96 - <module>() - Final prediction for document 201: {'company': 'NICOLAS', 'date': '12/03/2017', 'address': 'NICOLAS BOUQUET', 'total': "18000.00 I just want to extract the 4 values only (company name, date, address and total) and put them into a table with the columns date, company name, address, total as shown below: I have this code but I'm having difficulty finding how to get the 4 values and put them into a table and get the 4 columns (date, company name, address and total). Dim objTable As New DataTable objTable.Columns"}
2023-01-25 19:46:40,575 - __main__ - INFO - 92 - <module>() - Predicting document 202...
2023-01-25 19:46:43,062 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KING’S
Date of Receipt: 2018-06-01
Address of Company: Kuala Lumpur
Total: 65.70
2023-01-25 19:46:43,063 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:43,063 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:43,064 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KING’S

2023-01-25 19:46:43,064 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KING’S
2023-01-25 19:46:43,064 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:43,065 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-06-01

2023-01-25 19:46:43,065 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-06-01
2023-01-25 19:46:43,065 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:43,065 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kuala Lumpur

2023-01-25 19:46:43,066 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur
2023-01-25 19:46:43,066 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:43,066 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  65.70
2023-01-25 19:46:43,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 65.70
2023-01-25 19:46:43,067 - __main__ - INFO - 96 - <module>() - Final prediction for document 202: {'company': 'KING’S', 'date': '2018-06-01', 'address': 'Kuala Lumpur', 'total': '65.70'}
2023-01-25 19:46:43,069 - __main__ - INFO - 92 - <module>() - Predicting document 203...
2023-01-25 19:46:44,537 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
"<|stop key|>" : null
2023-01-25 19:46:44,537 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:44,537 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:44,538 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:44,538 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:44,538 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:44,539 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:44,539 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:44,539 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:44,539 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:44,540 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:44,540 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:44,540 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
"<|stop key|>" : null
2023-01-25 19:46:44,540 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "<|stop key|>" : null
2023-01-25 19:46:44,541 - __main__ - INFO - 96 - <module>() - Final prediction for document 203: {'total': '"<|stop key|>" : null'}
2023-01-25 19:46:44,542 - __main__ - INFO - 92 - <module>() - Predicting document 204...
2023-01-25 19:46:45,863 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "SANYU STATIONERY"

2023-01-25 19:46:45,864 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:45,864 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:45,864 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "SANYU STATIONERY"

2023-01-25 19:46:45,864 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU STATIONERY
2023-01-25 19:46:45,865 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:45,865 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:45,865 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:45,865 - __main__ - INFO - 96 - <module>() - Final prediction for document 204: {'company': 'SANYU STATIONERY'}
2023-01-25 19:46:45,867 - __main__ - INFO - 92 - <module>() - Predicting document 205...
2023-01-25 19:46:48,364 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  1.3
Date of Receipt: 22/04/2018 13:44:23
Address of Company:
Total: 23.00
2023-01-25 19:46:48,365 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:48,365 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:48,366 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1.3

2023-01-25 19:46:48,366 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1.3
2023-01-25 19:46:48,366 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:48,367 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22/04/2018 13:44:23

2023-01-25 19:46:48,367 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22/04/2018 13:44:23
2023-01-25 19:46:48,367 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:48,368 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:46:48,368 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:46:48,368 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:48,368 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23.00
2023-01-25 19:46:48,369 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23.00
2023-01-25 19:46:48,369 - __main__ - INFO - 96 - <module>() - Final prediction for document 205: {'company': '1.3', 'date': '22/04/2018 13:44:23', 'total': '23.00'}
2023-01-25 19:46:48,370 - __main__ - INFO - 92 - <module>() - Predicting document 206...
2023-01-25 19:46:54,725 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Microsoft Corporation
Receipt Date: 2018-12-08
Address: Microsoft Campus, 1 Microsoft Way, Redmond, WA 98052, USA
Total:
The following output should be displayed:
Microsoft Corporation   2018-12-08 1 Microsoft Way, Redmond, WA 98052, USA $

(Note: I am assuming that the information given above is correct and your code should not complain.)

You can find the documentation for Java Code Converter HERE
Hope this helps


2023-01-25 19:46:54,726 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:46:54,727 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:46:54,727 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Microsoft Corporation
Receipt Date: 2018-12-08
Address: Microsoft Campus, 1 Microsoft Way, Redmond, WA 98052, USA

2023-01-25 19:46:54,728 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Microsoft Corporation Receipt Date: 2018-12-08 Address: Microsoft Campus, 1 Microsoft Way, Redmond, WA 98052, USA
2023-01-25 19:46:54,728 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:46:54,728 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:46:54,729 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:46:54,729 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
The following output should be displayed:
Microsoft Corporation   2018-12-08 1 Microsoft Way, Redmond, WA 98052, USA $

(Note: I am assuming that the information given above is correct and your code should not complain.)

You can find the documentation for Java Code Converter HERE
Hope this helps


2023-01-25 19:46:54,729 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The following output should be displayed: Microsoft Corporation  2018-12-08 1 Microsoft Way, Redmond, WA 98052, USA $ (Note: I am assuming that the information given above is correct and your code should not complain.) You can find the documentation for Java Code Converter HERE Hope this helps
2023-01-25 19:46:54,730 - __main__ - INFO - 96 - <module>() - Final prediction for document 206: {'company': 'Microsoft Corporation Receipt Date: 2018-12-08 Address: Microsoft Campus, 1 Microsoft Way, Redmond, WA 98052, USA', 'total': 'The following output should be displayed: Microsoft Corporation  2018-12-08 1 Microsoft Way, Redmond, WA 98052, USA $ (Note: I am assuming that the information given above is correct and your code should not complain.) You can find the documentation for Java Code Converter HERE Hope this helps'}
2023-01-25 19:46:54,731 - __main__ - INFO - 92 - <module>() - Predicting document 207...
2023-01-25 19:47:02,145 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  D'CENTURY
Date of Receipt: 01/06/2018
Address of Company: TANGAN HAVELI
Total: <|stop key|>

Q.2. What is the difference between "Total - Total on Invoice" and "Received Payment - Total on Invoice"?

A.2. The difference between the two key-values is the amount of Tax. We will call it input tax.

Q.3. What is "Delivery Location"?

A.3. It is the location where the goods are delivered. It can be a street, a
2023-01-25 19:47:02,145 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  D'CENTURY

2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: D'CENTURY
2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/06/2018

2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/06/2018
2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TANGAN HAVELI

2023-01-25 19:47:02,146 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TANGAN HAVELI
2023-01-25 19:47:02,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:02,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Q.2. What is the difference between "Total - Total on Invoice" and "Received Payment - Total on Invoice"?

A.2. The difference between the two key-values is the amount of Tax. We will call it input tax.

Q.3. What is "Delivery Location"?

A.3. It is the location where the goods are delivered. It can be a street, a
2023-01-25 19:47:02,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Q.2. What is the difference between "Total - Total on Invoice" and "Received Payment - Total on Invoice"? A.2. The difference between the two key-values is the amount of Tax. We will call it input tax. Q.3. What is "Delivery Location"? A.3. It is the location where the goods are delivered. It can be a street, a
2023-01-25 19:47:02,147 - __main__ - INFO - 96 - <module>() - Final prediction for document 207: {'company': "D'CENTURY", 'date': '01/06/2018', 'address': 'TANGAN HAVELI', 'total': '<|stop key|> Q.2. What is the difference between "Total - Total on Invoice" and "Received Payment - Total on Invoice"? A.2. The difference between the two key-values is the amount of Tax. We will call it input tax. Q.3. What is "Delivery Location"? A.3. It is the location where the goods are delivered. It can be a street, a'}
2023-01-25 19:47:02,148 - __main__ - INFO - 92 - <module>() - Predicting document 208...
2023-01-25 19:47:07,851 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Name of Supplier
Date of Receipt: Date of Receipt
Address of Company: Address of Supplier
Total: Total Amount of Supplies (Including GST and Excise)

The supplier should provide you with a receipt of goods sold and/or GST registration form to support the calculation of GST (GST Form No. 3), which is issued by the respective state government/state authority.
2023-01-25 19:47:07,852 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:07,853 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:07,853 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Name of Supplier

2023-01-25 19:47:07,853 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Name of Supplier
2023-01-25 19:47:07,854 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:07,854 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:47:07,854 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:47:07,854 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:07,855 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Supplier

2023-01-25 19:47:07,855 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Supplier
2023-01-25 19:47:07,855 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:07,856 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total Amount of Supplies (Including GST and Excise)

The supplier should provide you with a receipt of goods sold and/or GST registration form to support the calculation of GST (GST Form No. 3), which is issued by the respective state government/state authority.
2023-01-25 19:47:07,856 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Amount of Supplies (Including GST and Excise) The supplier should provide you with a receipt of goods sold and/or GST registration form to support the calculation of GST (GST Form No. 3), which is issued by the respective state government/state authority.
2023-01-25 19:47:07,856 - __main__ - INFO - 96 - <module>() - Final prediction for document 208: {'company': 'Name of Supplier', 'date': 'Date of Receipt', 'address': 'Address of Supplier', 'total': 'Total Amount of Supplies (Including GST and Excise) The supplier should provide you with a receipt of goods sold and/or GST registration form to support the calculation of GST (GST Form No. 3), which is issued by the respective state government/state authority.'}
2023-01-25 19:47:07,858 - __main__ - INFO - 92 - <module>() - Predicting document 209...
2023-01-25 19:47:15,861 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SuperSeven
Address of Company:
Date of Receipt: 03-01-2018
TOTAL: R1,000
Note: You will be given a few minutes to complete the test after selecting a document. The test will be timed and if it does not finish in 5 minutes you will be asked to leave the test.
Please select "Test Scenario A" or "Test Scenario B".
The bank requires that we take the following information from you:
Full name: ________________________
Address: ________________

You are being given 1 minute to complete the test.
The question is multiple
2023-01-25 19:47:15,862 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:15,862 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:15,863 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SuperSeven
Address of Company:

2023-01-25 19:47:15,863 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SuperSeven Address of Company:
2023-01-25 19:47:15,863 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:15,864 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  03-01-2018
TOTAL: R1,000
Note: You will be given a few minutes to complete the test after selecting a document. The test will be timed and if it does not finish in 5 minutes you will be asked to leave the test.
Please select "Test Scenario A" or "Test Scenario B".
The bank requires that we take the following information from you:
Full name: ________________________
Address: ________________

You are being given 1 minute to complete the test.
The question is multiple
2023-01-25 19:47:15,864 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 03-01-2018 TOTAL: R1,000 Note: You will be given a few minutes to complete the test after selecting a document. The test will be timed and if it does not finish in 5 minutes you will be asked to leave the test. Please select "Test Scenario A" or "Test Scenario B". The bank requires that we take the following information from you: Full name: ________________________ Address: ________________ You are being given 1 minute to complete the test. The question is multiple
2023-01-25 19:47:15,864 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:15,865 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date of Receipt: 03-01-2018

2023-01-25 19:47:15,865 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt: 03-01-2018
2023-01-25 19:47:15,865 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:15,865 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  R1,000
Note: You will be given a few minutes to complete the test after selecting a document. The test will be timed and if it does not finish in 5 minutes you will be asked to leave the test.
Please select "Test Scenario A" or "Test Scenario B".
The bank requires that we take the following information from you:
Full name: ________________________
Address: ________________

You are being given 1 minute to complete the test.
The question is multiple
2023-01-25 19:47:15,866 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: R1,000 Note: You will be given a few minutes to complete the test after selecting a document. The test will be timed and if it does not finish in 5 minutes you will be asked to leave the test. Please select "Test Scenario A" or "Test Scenario B". The bank requires that we take the following information from you: Full name: ________________________ Address: ________________ You are being given 1 minute to complete the test. The question is multiple
2023-01-25 19:47:15,866 - __main__ - INFO - 96 - <module>() - Final prediction for document 209: {'company': 'SuperSeven Address of Company:', 'date': '03-01-2018 TOTAL: R1,000 Note: You will be given a few minutes to complete the test after selecting a document. The test will be timed and if it does not finish in 5 minutes you will be asked to leave the test. Please select "Test Scenario A" or "Test Scenario B". The bank requires that we take the following information from you: Full name: ________________________ Address: ________________ You are being given 1 minute to complete the test. The question is multiple', 'address': 'Date of Receipt: 03-01-2018', 'total': 'R1,000 Note: You will be given a few minutes to complete the test after selecting a document. The test will be timed and if it does not finish in 5 minutes you will be asked to leave the test. Please select "Test Scenario A" or "Test Scenario B". The bank requires that we take the following information from you: Full name: ________________________ Address: ________________ You are being given 1 minute to complete the test. The question is multiple'}
2023-01-25 19:47:15,868 - __main__ - INFO - 92 - <module>() - Predicting document 210...
2023-01-25 19:47:23,775 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  G.S.T. TAN TAN GLOBAL LTD
Address of Company: S.15-16, 15th floor, Riyad Tower, Bukit Bintang, Kuala Lumpur
Date of Receipt: 23.03.2018
Total: RM1.00

*AMT:
AMT=AMOUNT PAID

*RATE INCL. 6% GST:
RATE=1.6

Output:
Total: RM1.00
*AMT: RM1.00
*RATE INCL. 6% GST: 1
2023-01-25 19:47:23,778 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:23,779 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:23,780 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  G.S.T. TAN TAN GLOBAL LTD
Address of Company: S.15-16, 15th floor, Riyad Tower, Bukit Bintang, Kuala Lumpur

2023-01-25 19:47:23,780 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: G.S.T. TAN TAN GLOBAL LTD Address of Company: S.15-16, 15th floor, Riyad Tower, Bukit Bintang, Kuala Lumpur
2023-01-25 19:47:23,781 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:23,781 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23.03.2018
Total: RM1.00

*AMT:
AMT=AMOUNT PAID

*RATE INCL. 6% GST:
RATE=1.6

Output:
Total: RM1.00
*AMT: RM1.00
*RATE INCL. 6% GST: 1
2023-01-25 19:47:23,782 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23.03.2018 Total: RM1.00 *AMT: AMT=AMOUNT PAID *RATE INCL. 6% GST: RATE=1.6 Output: Total: RM1.00 *AMT: RM1.00 *RATE INCL. 6% GST: 1
2023-01-25 19:47:23,782 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:23,783 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S.15-16, 15th floor, Riyad Tower, Bukit Bintang, Kuala Lumpur
Date of Receipt: 23.03.2018

2023-01-25 19:47:23,784 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S.15-16, 15th floor, Riyad Tower, Bukit Bintang, Kuala Lumpur Date of Receipt: 23.03.2018
2023-01-25 19:47:23,784 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:23,785 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM1.00

*AMT:
AMT=AMOUNT PAID

*RATE INCL. 6% GST:
RATE=1.6

Output:

2023-01-25 19:47:23,785 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM1.00 *AMT: AMT=AMOUNT PAID *RATE INCL. 6% GST: RATE=1.6 Output:
2023-01-25 19:47:23,786 - __main__ - INFO - 96 - <module>() - Final prediction for document 210: {'company': 'G.S.T. TAN TAN GLOBAL LTD Address of Company: S.15-16, 15th floor, Riyad Tower, Bukit Bintang, Kuala Lumpur', 'date': '23.03.2018 Total: RM1.00 *AMT: AMT=AMOUNT PAID *RATE INCL. 6% GST: RATE=1.6 Output: Total: RM1.00 *AMT: RM1.00 *RATE INCL. 6% GST: 1', 'address': 'S.15-16, 15th floor, Riyad Tower, Bukit Bintang, Kuala Lumpur Date of Receipt: 23.03.2018', 'total': 'RM1.00 *AMT: AMT=AMOUNT PAID *RATE INCL. 6% GST: RATE=1.6 Output:'}
2023-01-25 19:47:23,792 - __main__ - INFO - 92 - <module>() - Predicting document 211...
2023-01-25 19:47:26,239 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SAFEA JABOOL BROADBAND PRIVATE LIMITED
Date of Receipt: 17/09/2017
Address of Company:
Total:
2023-01-25 19:47:26,240 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:26,240 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:26,241 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SAFEA JABOOL BROADBAND PRIVATE LIMITED

2023-01-25 19:47:26,241 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SAFEA JABOOL BROADBAND PRIVATE LIMITED
2023-01-25 19:47:26,241 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:26,242 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17/09/2017

2023-01-25 19:47:26,242 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17/09/2017
2023-01-25 19:47:26,242 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:26,243 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:26,244 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:26,244 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:26,245 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:47:26,246 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:26,246 - __main__ - INFO - 96 - <module>() - Final prediction for document 211: {'company': 'SAFEA JABOOL BROADBAND PRIVATE LIMITED', 'date': '17/09/2017'}
2023-01-25 19:47:26,250 - __main__ - INFO - 92 - <module>() - Predicting document 212...
2023-01-25 19:47:30,649 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  MISS CHEE FOODS SDN BHD
Date of Receipt: 2015-01-29
Address of Company: JW10/2/10A/5, YOOCHUN, MYSIA
Total: RM15.80
null
2023-01-25 19:47:30,651 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:30,652 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:30,652 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  MISS CHEE FOODS SDN BHD

2023-01-25 19:47:30,653 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MISS CHEE FOODS SDN BHD
2023-01-25 19:47:30,653 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:30,654 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2015-01-29

2023-01-25 19:47:30,655 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2015-01-29
2023-01-25 19:47:30,656 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:30,656 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JW10/2/10A/5, YOOCHUN, MYSIA

2023-01-25 19:47:30,657 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JW10/2/10A/5, YOOCHUN, MYSIA
2023-01-25 19:47:30,658 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:30,658 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM15.80
null
2023-01-25 19:47:30,658 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM15.80 null
2023-01-25 19:47:30,659 - __main__ - INFO - 96 - <module>() - Final prediction for document 212: {'company': 'MISS CHEE FOODS SDN BHD', 'date': '2015-01-29', 'address': 'JW10/2/10A/5, YOOCHUN, MYSIA', 'total': 'RM15.80 null'}
2023-01-25 19:47:30,662 - __main__ - INFO - 92 - <module>() - Predicting document 213...
2023-01-25 19:47:38,422 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: 1

For my current scenario I have to do it using Java, Jsoup and Scrapy.
I have tried it and got it partially right. Now I just want to convert it to csv file.
I can read data from the website by using the following code.
    def parse(self, response):
        yield FormRequest.from_response(response, formxpath="//div[@class='row']/div/div/div/span[1]//text()",
                                        callback=
2023-01-25 19:47:38,424 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:38,424 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:38,425 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:38,426 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:38,426 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:38,427 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:38,427 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:38,428 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:38,428 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:38,429 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:38,429 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:38,429 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1

For my current scenario I have to do it using Java, Jsoup and Scrapy.
I have tried it and got it partially right. Now I just want to convert it to csv file.
I can read data from the website by using the following code.
    def parse(self, response):
        yield FormRequest.from_response(response, formxpath="//div[@class='row']/div/div/div/span[1]//text()",
                                        callback=
2023-01-25 19:47:38,430 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1 For my current scenario I have to do it using Java, Jsoup and Scrapy. I have tried it and got it partially right. Now I just want to convert it to csv file. I can read data from the website by using the following code.   def parse(self, response):     yield FormRequest.from_response(response, formxpath="//div[@class='row']/div/div/div/span[1]//text()",                     callback=
2023-01-25 19:47:38,430 - __main__ - INFO - 96 - <module>() - Final prediction for document 213: {'total': '1 For my current scenario I have to do it using Java, Jsoup and Scrapy. I have tried it and got it partially right. Now I just want to convert it to csv file. I can read data from the website by using the following code.   def parse(self, response):     yield FormRequest.from_response(response, formxpath="//div[@class=\'row\']/div/div/div/span[1]//text()",                     callback='}
2023-01-25 19:47:38,434 - __main__ - INFO - 92 - <module>() - Predicting document 214...
2023-01-25 19:47:46,023 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  P.J. Industries Inc. (P.J.I.)
Date of Receipt: 22-Feb-2016
Address of Company:
Total: 23,000
---stop key---

Key: Value
Company Name: P.J. Industries Inc. (P.J.I.)
Date of Receipt: 23-Feb-2016
Address of Company:
Total: 25,000
---stop key---

This exercise should result in the following:

Create an excel workbook named "Invoice_Keywords_1.xlsx" and save it in your Desktop
2023-01-25 19:47:46,027 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:46,027 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:46,028 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  P.J. Industries Inc. (P.J.I.)

2023-01-25 19:47:46,029 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: P.J. Industries Inc. (P.J.I.)
2023-01-25 19:47:46,029 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:46,029 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22-Feb-2016

2023-01-25 19:47:46,030 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22-Feb-2016
2023-01-25 19:47:46,030 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:46,030 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:47:46,030 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:47:46,031 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:46,031 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23,000
---stop key---

Key: Value
Company Name: P.J. Industries Inc. (P.J.I.)
Date of Receipt: 23-Feb-2016
Address of Company:

2023-01-25 19:47:46,031 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23,000 ---stop key--- Key: Value Company Name: P.J. Industries Inc. (P.J.I.) Date of Receipt: 23-Feb-2016 Address of Company:
2023-01-25 19:47:46,032 - __main__ - INFO - 96 - <module>() - Final prediction for document 214: {'company': 'P.J. Industries Inc. (P.J.I.)', 'date': '22-Feb-2016', 'total': '23,000 ---stop key--- Key: Value Company Name: P.J. Industries Inc. (P.J.I.) Date of Receipt: 23-Feb-2016 Address of Company:'}
2023-01-25 19:47:46,036 - __main__ - INFO - 92 - <module>() - Predicting document 215...
2023-01-25 19:47:53,336 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  FREEDOM OPTIMUM SDN BHD
Date of Receipt: 06/4/2018 21:27
Address of Company: 88 Jalan Ibrahim Sultan, Johor Bahru, Johor
Total: RM 100.00
:

Extract the total number of items (including taxes and discounts) and total discount on your sales receipt document.

Key: Value
Number of Items: 2
Total Discount: 0
:

Write the value in the total discount field.
Total Discount:

Extract the total sum of tax charged on the sale.


2023-01-25 19:47:53,337 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:47:53,337 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:47:53,338 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  FREEDOM OPTIMUM SDN BHD

2023-01-25 19:47:53,338 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: FREEDOM OPTIMUM SDN BHD
2023-01-25 19:47:53,338 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:47:53,338 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  06/4/2018 21:27

2023-01-25 19:47:53,339 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 06/4/2018 21:27
2023-01-25 19:47:53,339 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:47:53,339 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  88 Jalan Ibrahim Sultan, Johor Bahru, Johor

2023-01-25 19:47:53,340 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 88 Jalan Ibrahim Sultan, Johor Bahru, Johor
2023-01-25 19:47:53,340 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:47:53,340 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 100.00
:

Extract the total number of items (including taxes and discounts) and total discount on your sales receipt document.

Key: Value
Number of Items: 2
Total Discount: 0
:

Write the value in the total discount field.
Total Discount:

Extract the total sum of tax charged on the sale.


2023-01-25 19:47:53,340 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 100.00 : Extract the total number of items (including taxes and discounts) and total discount on your sales receipt document. Key: Value Number of Items: 2 Total Discount: 0 : Write the value in the total discount field. Total Discount: Extract the total sum of tax charged on the sale.
2023-01-25 19:47:53,341 - __main__ - INFO - 96 - <module>() - Final prediction for document 215: {'company': 'FREEDOM OPTIMUM SDN BHD', 'date': '06/4/2018 21:27', 'address': '88 Jalan Ibrahim Sultan, Johor Bahru, Johor', 'total': 'RM 100.00 : Extract the total number of items (including taxes and discounts) and total discount on your sales receipt document. Key: Value Number of Items: 2 Total Discount: 0 : Write the value in the total discount field. Total Discount: Extract the total sum of tax charged on the sale.'}
2023-01-25 19:47:53,342 - __main__ - INFO - 92 - <module>() - Predicting document 216...
2023-01-25 19:48:01,329 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Company Name"
Date of Receipt: "Date of Receipt"
Address of Company: "Address of Company"
Total: "<|stop key|>"

Your result should be something like this:
Company Name: "John's Pizza"
Date of Receipt: "06-05-2016 17:11"
Address of Company: "Unit B1, Level 3, Jalan B.K.K. 1-11, 90102 Petaling Jaya"
Total: "RM26.70"

Here are the example documents:
Document 1:

Document 2
2023-01-25 19:48:01,330 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:01,331 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:01,331 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Company Name"

2023-01-25 19:48:01,331 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:48:01,332 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:01,332 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Date of Receipt"

2023-01-25 19:48:01,332 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:48:01,332 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:01,333 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Address of Company"

2023-01-25 19:48:01,333 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:48:01,333 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:01,333 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "<|stop key|>"

Your result should be something like this:
Company Name: "John's Pizza"
Date of Receipt: "06-05-2016 17:11"
Address of Company: "Unit B1, Level 3, Jalan B.K.K. 1-11, 90102 Petaling Jaya"

2023-01-25 19:48:01,334 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|>" Your result should be something like this: Company Name: "John's Pizza" Date of Receipt: "06-05-2016 17:11" Address of Company: "Unit B1, Level 3, Jalan B.K.K. 1-11, 90102 Petaling Jaya
2023-01-25 19:48:01,334 - __main__ - INFO - 96 - <module>() - Final prediction for document 216: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': '<|stop key|>" Your result should be something like this: Company Name: "John\'s Pizza" Date of Receipt: "06-05-2016 17:11" Address of Company: "Unit B1, Level 3, Jalan B.K.K. 1-11, 90102 Petaling Jaya'}
2023-01-25 19:48:01,336 - __main__ - INFO - 92 - <module>() - Predicting document 217...
2023-01-25 19:48:03,308 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:48:03,308 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:03,308 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:03,308 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:03,308 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:48:03,309 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:03,310 - __main__ - INFO - 96 - <module>() - Final prediction for document 217: {}
2023-01-25 19:48:03,310 - __main__ - INFO - 92 - <module>() - Predicting document 218...
2023-01-25 19:48:10,569 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY_NAME
Date of Receipt: RECEIPT_DATE
Address of Company: COMPANY_ADDRESS
Total: AMOUNT

After doing this you should have an output like this:
Company Name
: ABC CO
Date of Receipt
: 25/05/18 00:05:00
Address of Company
: GLOBAL INVENTORY
Total
: 2,400,000.00

You need to have another document set to check if the value is not null. I'm assuming that when the amount is null it means the order has not been shipped.


2023-01-25 19:48:10,571 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:10,572 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:10,572 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY_NAME

2023-01-25 19:48:10,572 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY_NAME
2023-01-25 19:48:10,573 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:10,573 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RECEIPT_DATE

2023-01-25 19:48:10,573 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RECEIPT_DATE
2023-01-25 19:48:10,574 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:10,574 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY_ADDRESS

2023-01-25 19:48:10,574 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY_ADDRESS
2023-01-25 19:48:10,574 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:10,575 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  AMOUNT

After doing this you should have an output like this:
Company Name
: ABC CO
Date of Receipt
: 25/05/18 00:05:00
Address of Company
: GLOBAL INVENTORY
Total
: 2,400,000.00

You need to have another document set to check if the value is not null. I'm assuming that when the amount is null it means the order has not been shipped.


2023-01-25 19:48:10,575 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: AMOUNT After doing this you should have an output like this: Company Name : ABC CO Date of Receipt : 25/05/18 00:05:00 Address of Company : GLOBAL INVENTORY Total : 2,400,000.00 You need to have another document set to check if the value is not null. I'm assuming that when the amount is null it means the order has not been shipped.
2023-01-25 19:48:10,575 - __main__ - INFO - 96 - <module>() - Final prediction for document 218: {'company': 'COMPANY_NAME', 'date': 'RECEIPT_DATE', 'address': 'COMPANY_ADDRESS', 'total': "AMOUNT After doing this you should have an output like this: Company Name : ABC CO Date of Receipt : 25/05/18 00:05:00 Address of Company : GLOBAL INVENTORY Total : 2,400,000.00 You need to have another document set to check if the value is not null. I'm assuming that when the amount is null it means the order has not been shipped."}
2023-01-25 19:48:10,578 - __main__ - INFO - 92 - <module>() - Predicting document 219...
2023-01-25 19:48:17,870 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total:

Key: Value
Company
2023-01-25 19:48:17,871 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:17,871 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:17,871 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:17,872 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:17,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:17,872 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:17,872 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:17,873 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:17,873 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:17,873 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:17,873 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:17,874 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:48:17,874 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:48:17,874 - __main__ - INFO - 96 - <module>() - Final prediction for document 219: {'total': 'Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:48:17,876 - __main__ - INFO - 92 - <module>() - Predicting document 220...
2023-01-25 19:48:26,428 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BARRANCH
Date of Receipt: 31/3/2019
Address of Company: 621/739 MALAYSIA HILIRAN,KUALA LUMPUR
Total: RM2.30
<<<stop key

Write a Java function that accepts the String above as input, and returns the String above with the values replaced by the values of each row.

for 1 row, no change
for 2 rows, return 2 rows
for 3 rows, return 3 rows
for n rows, return n rows

You can assume that:

Each input row contains the
2023-01-25 19:48:26,429 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:26,430 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:26,430 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BARRANCH

2023-01-25 19:48:26,431 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BARRANCH
2023-01-25 19:48:26,431 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:26,431 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  31/3/2019

2023-01-25 19:48:26,432 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 31/3/2019
2023-01-25 19:48:26,432 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:26,432 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  621/739 MALAYSIA HILIRAN,KUALA LUMPUR

2023-01-25 19:48:26,432 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 621/739 MALAYSIA HILIRAN,KUALA LUMPUR
2023-01-25 19:48:26,433 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:26,433 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM2.30
<<<stop key

Write a Java function that accepts the String above as input, and returns the String above with the values replaced by the values of each row.

for 1 row, no change
for 2 rows, return 2 rows
for 3 rows, return 3 rows
for n rows, return n rows

You can assume that:

Each input row contains the
2023-01-25 19:48:26,433 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM2.30 <<<stop key Write a Java function that accepts the String above as input, and returns the String above with the values replaced by the values of each row. for 1 row, no change for 2 rows, return 2 rows for 3 rows, return 3 rows for n rows, return n rows You can assume that: Each input row contains the
2023-01-25 19:48:26,433 - __main__ - INFO - 96 - <module>() - Final prediction for document 220: {'company': 'BARRANCH', 'date': '31/3/2019', 'address': '621/739 MALAYSIA HILIRAN,KUALA LUMPUR', 'total': 'RM2.30 <<<stop key Write a Java function that accepts the String above as input, and returns the String above with the values replaced by the values of each row. for 1 row, no change for 2 rows, return 2 rows for 3 rows, return 3 rows for n rows, return n rows You can assume that: Each input row contains the'}
2023-01-25 19:48:26,435 - __main__ - INFO - 92 - <module>() - Predicting document 221...
2023-01-25 19:48:34,220 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <|company name|>
Date of Receipt: <|date of receipt|>
Address of Company: <|address of company|>
Total: <|total value|>

To see an error that occurred when parsing the document, click "?s".

To see the errors list (if there are any), click "?s".

If you don't know which key-value pair will come in the next document, right-click the "?" and click "Get Next Document".

If you do not know where the key-value pairs will come from, right-click
2023-01-25 19:48:34,221 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:34,221 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:34,221 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|company name|>

2023-01-25 19:48:34,221 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|company name|>
2023-01-25 19:48:34,221 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:34,221 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|date of receipt|>

2023-01-25 19:48:34,222 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|date of receipt|>
2023-01-25 19:48:34,222 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:34,222 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|address of company|>

2023-01-25 19:48:34,222 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|address of company|>
2023-01-25 19:48:34,222 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:34,222 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|total value|>

To see an error that occurred when parsing the document, click "?s".

To see the errors list (if there are any), click "?s".

If you don't know which key-value pair will come in the next document, right-click the "?" and click "Get Next Document".

If you do not know where the key-value pairs will come from, right-click
2023-01-25 19:48:34,222 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|total value|> To see an error that occurred when parsing the document, click "?s". To see the errors list (if there are any), click "?s". If you don't know which key-value pair will come in the next document, right-click the "?" and click "Get Next Document". If you do not know where the key-value pairs will come from, right-click
2023-01-25 19:48:34,223 - __main__ - INFO - 96 - <module>() - Final prediction for document 221: {'company': '<|company name|>', 'date': '<|date of receipt|>', 'address': '<|address of company|>', 'total': '<|total value|> To see an error that occurred when parsing the document, click "?s". To see the errors list (if there are any), click "?s". If you don\'t know which key-value pair will come in the next document, right-click the "?" and click "Get Next Document". If you do not know where the key-value pairs will come from, right-click'}
2023-01-25 19:48:34,223 - __main__ - INFO - 92 - <module>() - Predicting document 222...
2023-01-25 19:48:41,834 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
Address
1
1
1
1
1
Rm4.15
RM-0.20
RM13.95
RM-0.69
RM3.00
RM-0.15
RM4.60
RM-0.23
RM3.95
RM-0.19

"Date of Receipt" should be between "<|stop key|>" and "<|stop key|>"

Output:
Rm4.15
RM-0.20
RM13.95

2023-01-25 19:48:41,836 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:41,836 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:41,837 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:41,838 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:41,838 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:41,838 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:41,838 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:41,839 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:41,839 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:48:41,839 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:48:41,839 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:41,840 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Address
1
1
1
1
1
Rm4.15
RM-0.20
RM13.95
RM-0.69
RM3.00
RM-0.15
RM4.60
RM-0.23
RM3.95
RM-0.19

"Date of Receipt" should be between "<|stop key|>" and "<|stop key|>"

Output:
Rm4.15
RM-0.20
RM13.95

2023-01-25 19:48:41,840 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address 1 1 1 1 1 Rm4.15 RM-0.20 RM13.95 RM-0.69 RM3.00 RM-0.15 RM4.60 RM-0.23 RM3.95 RM-0.19 "Date of Receipt" should be between "<|stop key|>" and "<|stop key|>" Output: Rm4.15 RM-0.20 RM13.95
2023-01-25 19:48:41,840 - __main__ - INFO - 96 - <module>() - Final prediction for document 222: {'total': 'Address 1 1 1 1 1 Rm4.15 RM-0.20 RM13.95 RM-0.69 RM3.00 RM-0.15 RM4.60 RM-0.23 RM3.95 RM-0.19 "Date of Receipt" should be between "<|stop key|>" and "<|stop key|>" Output: Rm4.15 RM-0.20 RM13.95'}
2023-01-25 19:48:41,845 - __main__ - INFO - 92 - <module>() - Predicting document 223...
2023-01-25 19:48:45,873 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "WALKER & CO. PTE LTD"
Date of Receipt: "15/08/2017"
Address of Company: "Lot 4A, 1 Jalan Othman, Penang, Malaysia"
Total: 0.72
2023-01-25 19:48:45,874 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:45,875 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:45,875 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "WALKER & CO. PTE LTD"

2023-01-25 19:48:45,875 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: WALKER & CO. PTE LTD
2023-01-25 19:48:45,876 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:45,876 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "15/08/2017"

2023-01-25 19:48:45,876 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15/08/2017
2023-01-25 19:48:45,877 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:45,877 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Lot 4A, 1 Jalan Othman, Penang, Malaysia"

2023-01-25 19:48:45,877 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Lot 4A, 1 Jalan Othman, Penang, Malaysia
2023-01-25 19:48:45,878 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:45,878 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.72
2023-01-25 19:48:45,878 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.72
2023-01-25 19:48:45,878 - __main__ - INFO - 96 - <module>() - Final prediction for document 223: {'company': 'WALKER & CO. PTE LTD', 'date': '15/08/2017', 'address': 'Lot 4A, 1 Jalan Othman, Penang, Malaysia', 'total': '0.72'}
2023-01-25 19:48:45,880 - __main__ - INFO - 92 - <module>() - Predicting document 224...
2023-01-25 19:48:54,148 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The name of the company
Date of Receipt: The date when the purchase is made
Address of Company: The address of the company
Total: The total
Stop Key: Your stop key, this will not appear in the output, replace it with any key you want

The output should look something like this:

Company Name: VISHAN ELECTRONICS SDN BHD
Date of Receipt: 1/02/2018
Address of Company: SENATUS JAYA TOWN, SELANGOR
Total: 50.20
You have received $ 50.20 from V
2023-01-25 19:48:54,149 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:54,149 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:54,150 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The name of the company

2023-01-25 19:48:54,150 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The name of the company
2023-01-25 19:48:54,150 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:54,150 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date when the purchase is made

2023-01-25 19:48:54,151 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date when the purchase is made
2023-01-25 19:48:54,151 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:54,151 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The address of the company

2023-01-25 19:48:54,151 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The address of the company
2023-01-25 19:48:54,151 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:54,152 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The total
Stop Key: Your stop key, this will not appear in the output, replace it with any key you want

The output should look something like this:

Company Name: VISHAN ELECTRONICS SDN BHD
Date of Receipt: 1/02/2018
Address of Company: SENATUS JAYA TOWN, SELANGOR

2023-01-25 19:48:54,152 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The total Stop Key: Your stop key, this will not appear in the output, replace it with any key you want The output should look something like this: Company Name: VISHAN ELECTRONICS SDN BHD Date of Receipt: 1/02/2018 Address of Company: SENATUS JAYA TOWN, SELANGOR
2023-01-25 19:48:54,152 - __main__ - INFO - 96 - <module>() - Final prediction for document 224: {'company': 'The name of the company', 'date': 'The date when the purchase is made', 'address': 'The address of the company', 'total': 'The total Stop Key: Your stop key, this will not appear in the output, replace it with any key you want The output should look something like this: Company Name: VISHAN ELECTRONICS SDN BHD Date of Receipt: 1/02/2018 Address of Company: SENATUS JAYA TOWN, SELANGOR'}
2023-01-25 19:48:54,153 - __main__ - INFO - 92 - <module>() - Predicting document 225...
2023-01-25 19:48:57,063 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Company Name>
Date of Receipt: <Date of Receipt>
Address of Company: <Address of Company>
Total: <Total>
The key value pair can be a number, string, date, or time.
2023-01-25 19:48:57,064 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:48:57,064 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:48:57,064 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Company Name>

2023-01-25 19:48:57,065 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Company Name>
2023-01-25 19:48:57,065 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:48:57,065 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date of Receipt>

2023-01-25 19:48:57,065 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date of Receipt>
2023-01-25 19:48:57,066 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:48:57,066 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address of Company>

2023-01-25 19:48:57,066 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address of Company>
2023-01-25 19:48:57,066 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:48:57,066 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>
The key value pair can be a number, string, date, or time.
2023-01-25 19:48:57,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total> The key value pair can be a number, string, date, or time.
2023-01-25 19:48:57,067 - __main__ - INFO - 96 - <module>() - Final prediction for document 225: {'company': '<Company Name>', 'date': '<Date of Receipt>', 'address': '<Address of Company>', 'total': '<Total> The key value pair can be a number, string, date, or time.'}
2023-01-25 19:48:57,068 - __main__ - INFO - 92 - <module>() - Predicting document 226...
2023-01-25 19:49:04,445 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  D&A BHD
Date of Receipt: 04-03-2018
Address of Company: 9, Desa Pandan, Jalan Jasem, Kuala Lumpur, 59000, Malaysia
Total: 66.17
Total with GST @ 6%: 66.15

If you have solved the problem, go to step 4 of the exercise above.

Step 4: Write a query which will extract the following information.
Company Name
Saved Address
Total Payment
Tax Rate
Step 4: Write a query which will extract the following information.
Company Name: D&
2023-01-25 19:49:04,446 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:04,447 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:04,447 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  D&A BHD

2023-01-25 19:49:04,448 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: D&A BHD
2023-01-25 19:49:04,448 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:04,448 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  04-03-2018

2023-01-25 19:49:04,449 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 04-03-2018
2023-01-25 19:49:04,449 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:04,449 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9, Desa Pandan, Jalan Jasem, Kuala Lumpur, 59000, Malaysia

2023-01-25 19:49:04,449 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9, Desa Pandan, Jalan Jasem, Kuala Lumpur, 59000, Malaysia
2023-01-25 19:49:04,450 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:04,450 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  66.17
Total with GST @ 6%: 66.15

If you have solved the problem, go to step 4 of the exercise above.

Step 4: Write a query which will extract the following information.
Company Name
Saved Address
Total Payment
Tax Rate
Step 4: Write a query which will extract the following information.
Company Name: D&
2023-01-25 19:49:04,450 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 66.17 Total with GST @ 6%: 66.15 If you have solved the problem, go to step 4 of the exercise above. Step 4: Write a query which will extract the following information. Company Name Saved Address Total Payment Tax Rate Step 4: Write a query which will extract the following information. Company Name: D&
2023-01-25 19:49:04,450 - __main__ - INFO - 96 - <module>() - Final prediction for document 226: {'company': 'D&A BHD', 'date': '04-03-2018', 'address': '9, Desa Pandan, Jalan Jasem, Kuala Lumpur, 59000, Malaysia', 'total': '66.17 Total with GST @ 6%: 66.15 If you have solved the problem, go to step 4 of the exercise above. Step 4: Write a query which will extract the following information. Company Name Saved Address Total Payment Tax Rate Step 4: Write a query which will extract the following information. Company Name: D&'}
2023-01-25 19:49:04,452 - __main__ - INFO - 92 - <module>() - Predicting document 227...
2023-01-25 19:49:11,484 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <a class="gField" target="_blank" href="company.asp">CIMB Niaga Sdn Bhd
<a class="gField" target="_blank" href="company.asp">Daimaru Sdn Bhd
Company Address: No.6(2)B Pudu Industrial Park Road - SS13/10
Date of Receipt: 07/08/2017
Gross Amount Received: (60.26)
Net Amount Received: (36.06)
Tax Amount (6%): (1.18)
Advance Tax Payable
2023-01-25 19:49:11,486 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:11,486 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:11,487 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <a class="gField" target="_blank" href="company.asp">CIMB Niaga Sdn Bhd
<a class="gField" target="_blank" href="company.asp">Daimaru Sdn Bhd
Company Address: No.6(2)B Pudu Industrial Park Road - SS13/10

2023-01-25 19:49:11,487 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <a class="gField" target="_blank" href="company.asp">CIMB Niaga Sdn Bhd <a class="gField" target="_blank" href="company.asp">Daimaru Sdn Bhd Company Address: No.6(2)B Pudu Industrial Park Road - SS13/10
2023-01-25 19:49:11,487 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:11,487 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  07/08/2017
Gross Amount Received: (60.26)
Net Amount Received: (36.06)
Tax Amount (6%): (1.18)
Advance Tax Payable
2023-01-25 19:49:11,488 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 07/08/2017 Gross Amount Received: (60.26) Net Amount Received: (36.06) Tax Amount (6%): (1.18) Advance Tax Payable
2023-01-25 19:49:11,488 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:11,488 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:11,488 - __main__ - INFO - 96 - <module>() - Final prediction for document 227: {'company': '<a class="gField" target="_blank" href="company.asp">CIMB Niaga Sdn Bhd <a class="gField" target="_blank" href="company.asp">Daimaru Sdn Bhd Company Address: No.6(2)B Pudu Industrial Park Road - SS13/10', 'date': '07/08/2017 Gross Amount Received: (60.26) Net Amount Received: (36.06) Tax Amount (6%): (1.18) Advance Tax Payable'}
2023-01-25 19:49:11,490 - __main__ - INFO - 92 - <module>() - Predicting document 228...
2023-01-25 19:49:19,937 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date of Receipt: /Date(YYYYMMDD)
Address of Company: ADDRESS
Total: TOTAL

You can add more columns by editing this template. The "DataType" must remain at "String" if you edit the template, else the data set will be corrupted.

Click "Add column" button to add more columns.

Now you can do something like

This should create a spreadsheet of the result.

What is the difference between a JSON data set and a CSV file

When we extract the value from the JSON data set we have
2023-01-25 19:49:19,939 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:19,940 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:19,941 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME

2023-01-25 19:49:19,941 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME
2023-01-25 19:49:19,942 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:19,942 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  /Date(YYYYMMDD)

2023-01-25 19:49:19,942 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: /Date(YYYYMMDD)
2023-01-25 19:49:19,943 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:19,944 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ADDRESS

2023-01-25 19:49:19,944 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ADDRESS
2023-01-25 19:49:19,944 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:19,945 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TOTAL

You can add more columns by editing this template. The "DataType" must remain at "String" if you edit the template, else the data set will be corrupted.

Click "Add column" button to add more columns.

Now you can do something like

This should create a spreadsheet of the result.

What is the difference between a JSON data set and a CSV file

When we extract the value from the JSON data set we have
2023-01-25 19:49:19,946 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL You can add more columns by editing this template. The "DataType" must remain at "String" if you edit the template, else the data set will be corrupted. Click "Add column" button to add more columns. Now you can do something like This should create a spreadsheet of the result. What is the difference between a JSON data set and a CSV file When we extract the value from the JSON data set we have
2023-01-25 19:49:19,946 - __main__ - INFO - 96 - <module>() - Final prediction for document 228: {'company': 'COMPANY NAME', 'date': '/Date(YYYYMMDD)', 'address': 'ADDRESS', 'total': 'TOTAL You can add more columns by editing this template. The "DataType" must remain at "String" if you edit the template, else the data set will be corrupted. Click "Add column" button to add more columns. Now you can do something like This should create a spreadsheet of the result. What is the difference between a JSON data set and a CSV file When we extract the value from the JSON data set we have'}
2023-01-25 19:49:19,952 - __main__ - INFO - 92 - <module>() - Predicting document 229...
2023-01-25 19:49:26,827 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "SoftWareLabs Sdn Bhd"
Date of Receipt: 2019/11/03
Address of Company: Jalan Austin, Taman Austin, 81108 Johor Bahru, Johor, MALAYSIA
Total: 9.80
NULL
TOTAL
09.80
9.80
1
1

Create 3 objects with names "Invoice", "Amounts" and "GST".
"Invoice" is not empty.
"Amounts" is not empty.
"GST" is not empty.
Create a report object.
Object
2023-01-25 19:49:26,828 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:26,829 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:26,829 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "SoftWareLabs Sdn Bhd"

2023-01-25 19:49:26,830 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SoftWareLabs Sdn Bhd
2023-01-25 19:49:26,831 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:26,831 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2019/11/03

2023-01-25 19:49:26,832 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2019/11/03
2023-01-25 19:49:26,832 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:26,833 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Austin, Taman Austin, 81108 Johor Bahru, Johor, MALAYSIA

2023-01-25 19:49:26,833 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Austin, Taman Austin, 81108 Johor Bahru, Johor, MALAYSIA
2023-01-25 19:49:26,833 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:26,834 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9.80
NULL
TOTAL
09.80
9.80
1
1

Create 3 objects with names "Invoice", "Amounts" and "GST".
"Invoice" is not empty.
"Amounts" is not empty.
"GST" is not empty.
Create a report object.
Object
2023-01-25 19:49:26,834 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9.80 NULL TOTAL 09.80 9.80 1 1 Create 3 objects with names "Invoice", "Amounts" and "GST". "Invoice" is not empty. "Amounts" is not empty. "GST" is not empty. Create a report object. Object
2023-01-25 19:49:26,835 - __main__ - INFO - 96 - <module>() - Final prediction for document 229: {'company': 'SoftWareLabs Sdn Bhd', 'date': '2019/11/03', 'address': 'Jalan Austin, Taman Austin, 81108 Johor Bahru, Johor, MALAYSIA', 'total': '9.80 NULL TOTAL 09.80 9.80 1 1 Create 3 objects with names "Invoice", "Amounts" and "GST". "Invoice" is not empty. "Amounts" is not empty. "GST" is not empty. Create a report object. Object'}
2023-01-25 19:49:26,840 - __main__ - INFO - 92 - <module>() - Predicting document 230...
2023-01-25 19:49:34,369 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  McDonald's SDN BHD
Date of Receipt: 24 May 2018
Address of Company: 65351-M, Bangunan 5 Taman Muda, Jalan SS21/39, Kuala Lumpur, Selangor, Malaysia.
Total: 32.25
>

Explain how you created the hash table and why did you choose this as the key to lookup the employee data?

Use the same approach you used to retrieve the data, but instead of printing the data to the console, use a file stream to write the data to a file.

You can use the
2023-01-25 19:49:34,375 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:34,376 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:34,377 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  McDonald's SDN BHD

2023-01-25 19:49:34,378 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: McDonald's SDN BHD
2023-01-25 19:49:34,378 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:34,379 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  24 May 2018

2023-01-25 19:49:34,379 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 24 May 2018
2023-01-25 19:49:34,380 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:34,382 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  65351-M, Bangunan 5 Taman Muda, Jalan SS21/39, Kuala Lumpur, Selangor, Malaysia.

2023-01-25 19:49:34,382 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 65351-M, Bangunan 5 Taman Muda, Jalan SS21/39, Kuala Lumpur, Selangor, Malaysia.
2023-01-25 19:49:34,384 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:34,384 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  32.25
>

Explain how you created the hash table and why did you choose this as the key to lookup the employee data?

Use the same approach you used to retrieve the data, but instead of printing the data to the console, use a file stream to write the data to a file.

You can use the
2023-01-25 19:49:34,385 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 32.25 > Explain how you created the hash table and why did you choose this as the key to lookup the employee data? Use the same approach you used to retrieve the data, but instead of printing the data to the console, use a file stream to write the data to a file. You can use the
2023-01-25 19:49:34,385 - __main__ - INFO - 96 - <module>() - Final prediction for document 230: {'company': "McDonald's SDN BHD", 'date': '24 May 2018', 'address': '65351-M, Bangunan 5 Taman Muda, Jalan SS21/39, Kuala Lumpur, Selangor, Malaysia.', 'total': '32.25 > Explain how you created the hash table and why did you choose this as the key to lookup the employee data? Use the same approach you used to retrieve the data, but instead of printing the data to the console, use a file stream to write the data to a file. You can use the'}
2023-01-25 19:49:34,400 - __main__ - INFO - 92 - <module>() - Predicting document 231...
2023-01-25 19:49:38,007 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  CJ.CHEMICALS INDUSTRIES Sdn.Bhd
Date of Receipt: 11 Dec 2017
Address of Company: PT. CJ.CHEMICALS INDUSTRIES Sdn.Bhd
Total:
2023-01-25 19:49:38,008 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:38,008 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:38,009 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CJ.CHEMICALS INDUSTRIES Sdn.Bhd

2023-01-25 19:49:38,012 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CJ.CHEMICALS INDUSTRIES Sdn.Bhd
2023-01-25 19:49:38,012 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:38,013 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  11 Dec 2017

2023-01-25 19:49:38,013 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11 Dec 2017
2023-01-25 19:49:38,014 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:38,015 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PT. CJ.CHEMICALS INDUSTRIES Sdn.Bhd

2023-01-25 19:49:38,015 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PT. CJ.CHEMICALS INDUSTRIES Sdn.Bhd
2023-01-25 19:49:38,016 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:38,016 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:49:38,017 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:38,018 - __main__ - INFO - 96 - <module>() - Final prediction for document 231: {'company': 'CJ.CHEMICALS INDUSTRIES Sdn.Bhd', 'date': '11 Dec 2017', 'address': 'PT. CJ.CHEMICALS INDUSTRIES Sdn.Bhd'}
2023-01-25 19:49:38,021 - __main__ - INFO - 92 - <module>() - Predicting document 232...
2023-01-25 19:49:42,363 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TOTAL
Date of Receipt: 16/10/2017
Address of Company: PSC BAYANAH, JALAN BINTULU
Total: 42.25

Create a new record and set the values to "TOTAL" in your record. If you change anything to the record do not forget to change the values accordingly.
2023-01-25 19:49:42,365 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:42,366 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:42,367 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TOTAL

2023-01-25 19:49:42,368 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL
2023-01-25 19:49:42,368 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:42,369 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  16/10/2017

2023-01-25 19:49:42,370 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 16/10/2017
2023-01-25 19:49:42,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:42,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PSC BAYANAH, JALAN BINTULU

2023-01-25 19:49:42,372 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PSC BAYANAH, JALAN BINTULU
2023-01-25 19:49:42,372 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:42,373 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  42.25

Create a new record and set the values to "TOTAL" in your record. If you change anything to the record do not forget to change the values accordingly.
2023-01-25 19:49:42,373 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 42.25 Create a new record and set the values to "TOTAL" in your record. If you change anything to the record do not forget to change the values accordingly.
2023-01-25 19:49:42,374 - __main__ - INFO - 96 - <module>() - Final prediction for document 232: {'company': 'TOTAL', 'date': '16/10/2017', 'address': 'PSC BAYANAH, JALAN BINTULU', 'total': '42.25 Create a new record and set the values to "TOTAL" in your record. If you change anything to the record do not forget to change the values accordingly.'}
2023-01-25 19:49:42,377 - __main__ - INFO - 92 - <module>() - Predicting document 233...
2023-01-25 19:49:44,902 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 21/FEB/2019
Address of Company: SINGAPORE
Total: 1,146.00
2023-01-25 19:49:44,903 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:44,903 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:44,904 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:44,904 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:44,905 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:44,905 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/FEB/2019

2023-01-25 19:49:44,906 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/FEB/2019
2023-01-25 19:49:44,906 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:44,907 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SINGAPORE

2023-01-25 19:49:44,907 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SINGAPORE
2023-01-25 19:49:44,908 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:44,908 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1,146.00
2023-01-25 19:49:44,909 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1,146.00
2023-01-25 19:49:44,909 - __main__ - INFO - 96 - <module>() - Final prediction for document 233: {'date': '21/FEB/2019', 'address': 'SINGAPORE', 'total': '1,146.00'}
2023-01-25 19:49:44,913 - __main__ - INFO - 92 - <module>() - Predicting document 234...
2023-01-25 19:49:51,989 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

In Microsoft Excel, click new tab and type the following formulas in that column.

=IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3,0),"")
=IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3,0),"")
=IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3
2023-01-25 19:49:51,990 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:51,990 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:51,991 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:49:51,991 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:49:51,991 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:51,991 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:49:51,992 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:49:51,992 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:51,992 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:49:51,992 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:49:51,992 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:51,993 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

In Microsoft Excel, click new tab and type the following formulas in that column.

=IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3,0),"")
=IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3,0),"")
=IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3
2023-01-25 19:49:51,993 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total In Microsoft Excel, click new tab and type the following formulas in that column. =IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3,0),"") =IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3,0),"") =IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3
2023-01-25 19:49:51,993 - __main__ - INFO - 96 - <module>() - Final prediction for document 234: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total In Microsoft Excel, click new tab and type the following formulas in that column. =IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3,0),"") =IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3,0),"") =IFERROR(VLOOKUP(A2,Sheet1!$A$2:$B$6,3'}
2023-01-25 19:49:51,994 - __main__ - INFO - 92 - <module>() - Predicting document 235...
2023-01-25 19:49:56,856 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

This should be done only if the original receipt is not available. Otherwise use the original receipt to generate this report.

The report is saved as a plain-text file with the name of the input receipt date in the report file name. For example, a receipt dated July 12, 2019 will have the report name of REPORT-20190712.txt.
2023-01-25 19:49:56,858 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:49:56,858 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:49:56,859 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:56,859 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:56,859 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:49:56,860 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:56,860 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:56,860 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:49:56,861 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:49:56,861 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:49:56,861 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:49:56,862 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

This should be done only if the original receipt is not available. Otherwise use the original receipt to generate this report.

The report is saved as a plain-text file with the name of the input receipt date in the report file name. For example, a receipt dated July 12, 2019 will have the report name of REPORT-20190712.txt.
2023-01-25 19:49:56,862 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: This should be done only if the original receipt is not available. Otherwise use the original receipt to generate this report. The report is saved as a plain-text file with the name of the input receipt date in the report file name. For example, a receipt dated July 12, 2019 will have the report name of REPORT-20190712.txt.
2023-01-25 19:49:56,862 - __main__ - INFO - 96 - <module>() - Final prediction for document 235: {'total': 'This should be done only if the original receipt is not available. Otherwise use the original receipt to generate this report. The report is saved as a plain-text file with the name of the input receipt date in the report file name. For example, a receipt dated July 12, 2019 will have the report name of REPORT-20190712.txt.'}
2023-01-25 19:49:56,866 - __main__ - INFO - 92 - <module>() - Predicting document 236...
2023-01-25 19:50:04,577 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  @ Company
Date of Receipt: @ date / @ timestamp
Address of Company:
Total: @ value
|stop key|:

Expected result:
COMPANY NAME : TEST COMPANY
DATE OF RECEIPT : 2018-05-28
ADDRESS OF COMPANY : 1/2 JALAN CAVES 66100
TOTAL : RM83.00
@ value
GST 6%
CHECKS PAID : RM83.00
TOTAL : RM83.00
CASH : RM100.00
CHANGE : RM17.00
CHK # : 2

Note
2023-01-25 19:50:04,578 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:04,579 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:04,579 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  @ Company

2023-01-25 19:50:04,580 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: @ Company
2023-01-25 19:50:04,580 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:04,581 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  @ date / @ timestamp

2023-01-25 19:50:04,581 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: @ date / @ timestamp
2023-01-25 19:50:04,582 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:04,582 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:04,582 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:04,583 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:04,583 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  @ value
|stop key|:

Expected result:
COMPANY NAME : TEST COMPANY
DATE OF RECEIPT : 2018-05-28
ADDRESS OF COMPANY : 1/2 JALAN CAVES 66100
TOTAL : RM83.00
@ value
GST 6%
CHECKS PAID : RM83.00
TOTAL : RM83.00
CASH : RM100.00
CHANGE : RM17.00
CHK # : 2

Note
2023-01-25 19:50:04,583 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: @ value |stop key|: Expected result: COMPANY NAME : TEST COMPANY DATE OF RECEIPT : 2018-05-28 ADDRESS OF COMPANY : 1/2 JALAN CAVES 66100 TOTAL : RM83.00 @ value GST 6% CHECKS PAID : RM83.00 TOTAL : RM83.00 CASH : RM100.00 CHANGE : RM17.00 CHK # : 2 Note
2023-01-25 19:50:04,583 - __main__ - INFO - 96 - <module>() - Final prediction for document 236: {'company': '@ Company', 'date': '@ date / @ timestamp', 'total': '@ value |stop key|: Expected result: COMPANY NAME : TEST COMPANY DATE OF RECEIPT : 2018-05-28 ADDRESS OF COMPANY : 1/2 JALAN CAVES 66100 TOTAL : RM83.00 @ value GST 6% CHECKS PAID : RM83.00 TOTAL : RM83.00 CASH : RM100.00 CHANGE : RM17.00 CHK # : 2 Note'}
2023-01-25 19:50:04,585 - __main__ - INFO - 92 - <module>() - Predicting document 237...
2023-01-25 19:50:07,729 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Company Name"
Date of Receipt: "Date of Receipt"
Address of Company: "Address of Company"
Total: "Total"
2023-01-25 19:50:07,730 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:07,731 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:07,732 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Company Name"

2023-01-25 19:50:07,733 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:50:07,733 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:07,734 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Date of Receipt"

2023-01-25 19:50:07,734 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:50:07,735 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:07,735 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Address of Company"

2023-01-25 19:50:07,736 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:50:07,736 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:07,737 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Total"
2023-01-25 19:50:07,738 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:50:07,738 - __main__ - INFO - 96 - <module>() - Final prediction for document 237: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:50:07,741 - __main__ - INFO - 92 - <module>() - Predicting document 238...
2023-01-25 19:50:10,869 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "ACME Co."
Date of Receipt: "2019-12-12"
Address of Company: "ACME Inc."
Total: 10.00
2023-01-25 19:50:10,870 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:10,871 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:10,871 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "ACME Co."

2023-01-25 19:50:10,871 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ACME Co.
2023-01-25 19:50:10,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:10,873 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2019-12-12"

2023-01-25 19:50:10,873 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2019-12-12
2023-01-25 19:50:10,874 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:10,874 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "ACME Inc."

2023-01-25 19:50:10,875 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ACME Inc.
2023-01-25 19:50:10,875 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:10,876 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10.00
2023-01-25 19:50:10,876 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10.00
2023-01-25 19:50:10,877 - __main__ - INFO - 96 - <module>() - Final prediction for document 238: {'company': 'ACME Co.', 'date': '2019-12-12', 'address': 'ACME Inc.', 'total': '10.00'}
2023-01-25 19:50:10,880 - __main__ - INFO - 92 - <module>() - Predicting document 239...
2023-01-25 19:50:12,744 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
2023-01-25 19:50:12,746 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:12,747 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:12,748 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:50:12,748 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:50:12,749 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:12,750 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:50:12,750 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:50:12,751 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:12,751 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:50:12,752 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:50:12,752 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:12,753 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:50:12,753 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:50:12,754 - __main__ - INFO - 96 - <module>() - Final prediction for document 239: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 19:50:12,757 - __main__ - INFO - 92 - <module>() - Predicting document 240...
2023-01-25 19:50:20,090 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU STATIONERY
Address of Company:
Date of Receipt: 28/10/2017
Total:

Now, you've extracted a bunch of data from the document and you can manipulate it to suit your needs. Now, for each of these values you can search for relevant data in the dataset. Use the "WHERE" clause in ORDER BY and SELECT and the SELECT clause in MATCH. Also, use the "WHERE" clause in the JOIN with the INNER JOIN and the LEFT JOIN clauses in the SELECT clause. This is very important because if we don't do this then we are not assured of
2023-01-25 19:50:20,092 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:20,093 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:20,094 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU STATIONERY
Address of Company:

2023-01-25 19:50:20,094 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU STATIONERY Address of Company:
2023-01-25 19:50:20,095 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:20,095 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  28/10/2017
Total:

Now, you've extracted a bunch of data from the document and you can manipulate it to suit your needs. Now, for each of these values you can search for relevant data in the dataset. Use the "WHERE" clause in ORDER BY and SELECT and the SELECT clause in MATCH. Also, use the "WHERE" clause in the JOIN with the INNER JOIN and the LEFT JOIN clauses in the SELECT clause. This is very important because if we don't do this then we are not assured of
2023-01-25 19:50:20,096 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28/10/2017 Total: Now, you've extracted a bunch of data from the document and you can manipulate it to suit your needs. Now, for each of these values you can search for relevant data in the dataset. Use the "WHERE" clause in ORDER BY and SELECT and the SELECT clause in MATCH. Also, use the "WHERE" clause in the JOIN with the INNER JOIN and the LEFT JOIN clauses in the SELECT clause. This is very important because if we don't do this then we are not assured of
2023-01-25 19:50:20,096 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:20,097 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date of Receipt: 28/10/2017

2023-01-25 19:50:20,097 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt: 28/10/2017
2023-01-25 19:50:20,098 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:20,098 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Now, you've extracted a bunch of data from the document and you can manipulate it to suit your needs. Now, for each of these values you can search for relevant data in the dataset. Use the "WHERE" clause in ORDER BY and SELECT and the SELECT clause in MATCH. Also, use the "WHERE" clause in the JOIN with the INNER JOIN and the LEFT JOIN clauses in the SELECT clause. This is very important because if we don't do this then we are not assured of
2023-01-25 19:50:20,098 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Now, you've extracted a bunch of data from the document and you can manipulate it to suit your needs. Now, for each of these values you can search for relevant data in the dataset. Use the "WHERE" clause in ORDER BY and SELECT and the SELECT clause in MATCH. Also, use the "WHERE" clause in the JOIN with the INNER JOIN and the LEFT JOIN clauses in the SELECT clause. This is very important because if we don't do this then we are not assured of
2023-01-25 19:50:20,099 - __main__ - INFO - 96 - <module>() - Final prediction for document 240: {'company': 'SANYU STATIONERY Address of Company:', 'date': '28/10/2017 Total: Now, you\'ve extracted a bunch of data from the document and you can manipulate it to suit your needs. Now, for each of these values you can search for relevant data in the dataset. Use the "WHERE" clause in ORDER BY and SELECT and the SELECT clause in MATCH. Also, use the "WHERE" clause in the JOIN with the INNER JOIN and the LEFT JOIN clauses in the SELECT clause. This is very important because if we don\'t do this then we are not assured of', 'address': 'Date of Receipt: 28/10/2017', 'total': 'Now, you\'ve extracted a bunch of data from the document and you can manipulate it to suit your needs. Now, for each of these values you can search for relevant data in the dataset. Use the "WHERE" clause in ORDER BY and SELECT and the SELECT clause in MATCH. Also, use the "WHERE" clause in the JOIN with the INNER JOIN and the LEFT JOIN clauses in the SELECT clause. This is very important because if we don\'t do this then we are not assured of'}
2023-01-25 19:50:20,102 - __main__ - INFO - 92 - <module>() - Predicting document 241...
2023-01-25 19:50:27,701 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>
Example:
Company Name|Date of Receipt|Address of Company|Total
ABC|5/4/18 11:00:00 AM|Jalan Baru|5.00
DBC|5/4/18 11:05:00 AM|Jalan Baru|5.10
CBE|5/4/18 11:10:00 AM|Jalan Baru|5.20
DEF|5/4/18 11:15:00 AM|Jalan Baru|
2023-01-25 19:50:27,704 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:27,704 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:27,706 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:27,706 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:27,707 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:27,707 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:27,708 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:27,709 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:27,710 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:27,710 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:27,711 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:27,712 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>
Example:
Company Name|Date of Receipt|Address of Company|Total
ABC|5/4/18 11:00:00 AM|Jalan Baru|5.00
DBC|5/4/18 11:05:00 AM|Jalan Baru|5.10
CBE|5/4/18 11:10:00 AM|Jalan Baru|5.20
DEF|5/4/18 11:15:00 AM|Jalan Baru|
2023-01-25 19:50:27,712 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Example: Company Name|Date of Receipt|Address of Company|Total ABC|5/4/18 11:00:00 AM|Jalan Baru|5.00 DBC|5/4/18 11:05:00 AM|Jalan Baru|5.10 CBE|5/4/18 11:10:00 AM|Jalan Baru|5.20 DEF|5/4/18 11:15:00 AM|Jalan Baru|
2023-01-25 19:50:27,713 - __main__ - INFO - 96 - <module>() - Final prediction for document 241: {'total': '<|stop key|> Example: Company Name|Date of Receipt|Address of Company|Total ABC|5/4/18 11:00:00 AM|Jalan Baru|5.00 DBC|5/4/18 11:05:00 AM|Jalan Baru|5.10 CBE|5/4/18 11:10:00 AM|Jalan Baru|5.20 DEF|5/4/18 11:15:00 AM|Jalan Baru|'}
2023-01-25 19:50:27,719 - __main__ - INFO - 92 - <module>() - Predicting document 242...
2023-01-25 19:50:29,131 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
date of receipt:
Address of company:
Total
2023-01-25 19:50:29,132 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:29,132 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:29,133 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:29,133 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:29,134 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:29,135 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:29,136 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:29,136 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:29,137 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Total
2023-01-25 19:50:29,137 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:50:29,138 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:29,139 - __main__ - INFO - 96 - <module>() - Final prediction for document 242: {'address': 'Total'}
2023-01-25 19:50:29,141 - __main__ - INFO - 92 - <module>() - Predicting document 243...
2023-01-25 19:50:36,759 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Enter your answer below:

1 + 4 + 6 + 3 + 2
4 1 + 5 + 6 + 3 + 2

Click submit when done.

If you want to do it again, click "Reset Answers". Otherwise click the "Show Answer" button and see how you did.

Tips

When asked to create a class for an operation, you'll be asked to name the class, and what attributes it contains. For this example, call the class "Operation", and add 3 attributes, "Key
2023-01-25 19:50:36,761 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:36,761 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:36,762 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:36,762 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:36,762 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:36,763 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:36,763 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:36,763 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:36,763 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:36,764 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:36,764 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:36,764 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Enter your answer below:

1 + 4 + 6 + 3 + 2
4 1 + 5 + 6 + 3 + 2

Click submit when done.

If you want to do it again, click "Reset Answers". Otherwise click the "Show Answer" button and see how you did.

Tips

When asked to create a class for an operation, you'll be asked to name the class, and what attributes it contains. For this example, call the class "Operation", and add 3 attributes, "Key
2023-01-25 19:50:36,764 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Enter your answer below: 1 + 4 + 6 + 3 + 2 4 1 + 5 + 6 + 3 + 2 Click submit when done. If you want to do it again, click "Reset Answers". Otherwise click the "Show Answer" button and see how you did. Tips When asked to create a class for an operation, you'll be asked to name the class, and what attributes it contains. For this example, call the class "Operation", and add 3 attributes, "Key
2023-01-25 19:50:36,765 - __main__ - INFO - 96 - <module>() - Final prediction for document 243: {'total': 'Enter your answer below: 1 + 4 + 6 + 3 + 2 4 1 + 5 + 6 + 3 + 2 Click submit when done. If you want to do it again, click "Reset Answers". Otherwise click the "Show Answer" button and see how you did. Tips When asked to create a class for an operation, you\'ll be asked to name the class, and what attributes it contains. For this example, call the class "Operation", and add 3 attributes, "Key'}
2023-01-25 19:50:36,766 - __main__ - INFO - 92 - <module>() - Predicting document 244...
2023-01-25 19:50:44,191 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  GERBANG ALAF RESTAURANTS SDN BHD
Date of Receipt: 2018-07-11 16:04:01
Address of Company: NO.3, JALAN SS21/39,47400 PETALING JAYA

4.

5.

6.

7.

8.

9.

10.

Document set to export (as XML):

1.

2.

3.

4.

5.

6.

7.

8.


2023-01-25 19:50:44,192 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:44,192 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  GERBANG ALAF RESTAURANTS SDN BHD

2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: GERBANG ALAF RESTAURANTS SDN BHD
2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-07-11 16:04:01

2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-07-11 16:04:01
2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  NO.3, JALAN SS21/39,47400 PETALING JAYA

4.

5.

6.

7.

8.

9.

10.

Document set to export (as XML):

1.

2.

3.

4.

5.

6.

7.

8.


2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: NO.3, JALAN SS21/39,47400 PETALING JAYA 4. 5. 6. 7. 8. 9. 10. Document set to export (as XML): 1. 2. 3. 4. 5. 6. 7. 8.
2023-01-25 19:50:44,193 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:44,194 - __main__ - INFO - 96 - <module>() - Final prediction for document 244: {'company': 'GERBANG ALAF RESTAURANTS SDN BHD', 'date': '2018-07-11 16:04:01', 'address': 'NO.3, JALAN SS21/39,47400 PETALING JAYA 4. 5. 6. 7. 8. 9. 10. Document set to export (as XML): 1. 2. 3. 4. 5. 6. 7. 8.'}
2023-01-25 19:50:44,197 - __main__ - INFO - 92 - <module>() - Predicting document 245...
2023-01-25 19:50:47,286 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Input company name>
Receipt Date: <Input date of receipt (dd/mm/yyyy)>
Company Address: <Input company address>
Total: <Input total sales amount>
2023-01-25 19:50:47,287 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:47,287 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:47,288 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Input company name>
Receipt Date: <Input date of receipt (dd/mm/yyyy)>
Company Address: <Input company address>

2023-01-25 19:50:47,288 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Input company name> Receipt Date: <Input date of receipt (dd/mm/yyyy)> Company Address: <Input company address>
2023-01-25 19:50:47,289 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:47,289 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:47,289 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:47,289 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Input total sales amount>
2023-01-25 19:50:47,290 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Input total sales amount>
2023-01-25 19:50:47,290 - __main__ - INFO - 96 - <module>() - Final prediction for document 245: {'company': '<Input company name> Receipt Date: <Input date of receipt (dd/mm/yyyy)> Company Address: <Input company address>', 'total': '<Input total sales amount>'}
2023-01-25 19:50:47,292 - __main__ - INFO - 92 - <module>() - Predicting document 246...
2023-01-25 19:50:56,614 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  [CR01-AZUAN] DHL (Bahagian Perak)
Date of Receipt: 23-05-2017
Address of Company: 1223, Jalan Klinik (Perai)
Total: 566.50

So for the above record I need to extract DHL (Bahagian Perak) for the Company Name, 23-05-2017 for Date of Receipt, and 1223, Jalan Klinik (Perai) for Address of Company.

A:

If you are getting the input from excel, then there is an option
2023-01-25 19:50:56,616 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:56,617 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:56,618 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  [CR01-AZUAN] DHL (Bahagian Perak)

2023-01-25 19:50:56,618 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: [CR01-AZUAN] DHL (Bahagian Perak)
2023-01-25 19:50:56,619 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:56,619 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23-05-2017

2023-01-25 19:50:56,619 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23-05-2017
2023-01-25 19:50:56,620 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:56,620 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1223, Jalan Klinik (Perai)

2023-01-25 19:50:56,621 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1223, Jalan Klinik (Perai)
2023-01-25 19:50:56,621 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:56,622 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  566.50

So for the above record I need to extract DHL (Bahagian Perak) for the Company Name, 23-05-2017 for Date of Receipt, and 1223, Jalan Klinik (Perai) for Address of Company.

A:

If you are getting the input from excel, then there is an option
2023-01-25 19:50:56,622 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 566.50 So for the above record I need to extract DHL (Bahagian Perak) for the Company Name, 23-05-2017 for Date of Receipt, and 1223, Jalan Klinik (Perai) for Address of Company. A: If you are getting the input from excel, then there is an option
2023-01-25 19:50:56,622 - __main__ - INFO - 96 - <module>() - Final prediction for document 246: {'company': '[CR01-AZUAN] DHL (Bahagian Perak)', 'date': '23-05-2017', 'address': '1223, Jalan Klinik (Perai)', 'total': '566.50 So for the above record I need to extract DHL (Bahagian Perak) for the Company Name, 23-05-2017 for Date of Receipt, and 1223, Jalan Klinik (Perai) for Address of Company. A: If you are getting the input from excel, then there is an option'}
2023-01-25 19:50:56,625 - __main__ - INFO - 92 - <module>() - Predicting document 247...
2023-01-25 19:50:58,207 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:50:58,208 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:50:58,208 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:50:58,209 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:58,209 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:58,209 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:50:58,210 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:58,210 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:58,210 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:50:58,211 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:50:58,211 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:58,211 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:50:58,212 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:50:58,212 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:50:58,212 - __main__ - INFO - 96 - <module>() - Final prediction for document 247: {}
2023-01-25 19:50:58,214 - __main__ - INFO - 92 - <module>() - Predicting document 248...
2023-01-25 19:51:05,689 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  abc inc
Date of Receipt: 02-12-2019 16:23:00
Address of Company: XYZ Street
Total: $23

Expected result: The following message should be displayed

The total amount of your order is $23

Sample input:

The key-value pairs are:
Company Name: abc inc
Date of Receipt: 02-12-2019 16:23:00
Address of Company: XYZ Street
Total: $23

Sample output:

The above output should be displayed on the browser

My code below, please take
2023-01-25 19:51:05,690 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:05,690 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:05,690 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  abc inc

2023-01-25 19:51:05,691 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: abc inc
2023-01-25 19:51:05,691 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:05,691 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02-12-2019 16:23:00

2023-01-25 19:51:05,691 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02-12-2019 16:23:00
2023-01-25 19:51:05,692 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:05,692 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XYZ Street

2023-01-25 19:51:05,692 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XYZ Street
2023-01-25 19:51:05,693 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:05,693 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $23

Expected result: The following message should be displayed

The total amount of your order is $23

Sample input:

The key-value pairs are:
Company Name: abc inc
Date of Receipt: 02-12-2019 16:23:00
Address of Company: XYZ Street

2023-01-25 19:51:05,694 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $23 Expected result: The following message should be displayed The total amount of your order is $23 Sample input: The key-value pairs are: Company Name: abc inc Date of Receipt: 02-12-2019 16:23:00 Address of Company: XYZ Street
2023-01-25 19:51:05,694 - __main__ - INFO - 96 - <module>() - Final prediction for document 248: {'company': 'abc inc', 'date': '02-12-2019 16:23:00', 'address': 'XYZ Street', 'total': '$23 Expected result: The following message should be displayed The total amount of your order is $23 Sample input: The key-value pairs are: Company Name: abc inc Date of Receipt: 02-12-2019 16:23:00 Address of Company: XYZ Street'}
2023-01-25 19:51:05,696 - __main__ - INFO - 92 - <module>() - Predicting document 249...
2023-01-25 19:51:14,440 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total: <|stop key|>

You can retrieve the above information in the following table.

Key: Value
Company Name:
Date of Receipt:
Address of Company:
Total: <|stop key|>

You can retrieve the above information in the following table.

The example contains the total of sales invoices for the period $1,200 to $1,999.99 and total sales tax payable is $24.69.
2023-01-25 19:51:14,442 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:14,443 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:14,444 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:51:14,444 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:51:14,444 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:14,445 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:51:14,445 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:51:14,445 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:14,445 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:51:14,446 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:51:14,446 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:14,446 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

You can retrieve the above information in the following table.

Key: Value
Company Name:
Date of Receipt:
Address of Company:

2023-01-25 19:51:14,446 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> You can retrieve the above information in the following table. Key: Value Company Name: Date of Receipt: Address of Company:
2023-01-25 19:51:14,447 - __main__ - INFO - 96 - <module>() - Final prediction for document 249: {'total': '<|stop key|> You can retrieve the above information in the following table. Key: Value Company Name: Date of Receipt: Address of Company:'}
2023-01-25 19:51:14,453 - __main__ - INFO - 92 - <module>() - Predicting document 250...
2023-01-25 19:51:21,135 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  XIAOYU ELECTRIC APPLIANCE MFG. CO., LTD.
Date of Receipt: 22A-1, JALAN 17/54, SECTION 17, 46400 PETALING JAYA, SELANGOR.
Address of Company: PO BLOCK SELANGOR JAYA
Total: 3.60
2023-01-25 19:51:21,136 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:21,137 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:21,137 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XIAOYU ELECTRIC APPLIANCE MFG. CO., LTD.

2023-01-25 19:51:21,137 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XIAOYU ELECTRIC APPLIANCE MFG. CO., LTD.
2023-01-25 19:51:21,138 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:21,138 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22A-1, JALAN 17/54, SECTION 17, 46400 PETALING JAYA, SELANGOR.

2023-01-25 19:51:21,138 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22A-1, JALAN 17/54, SECTION 17, 46400 PETALING JAYA, SELANGOR.
2023-01-25 19:51:21,138 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:21,139 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  PO BLOCK SELANGOR JAYA

2023-01-25 19:51:21,139 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: PO BLOCK SELANGOR JAYA
2023-01-25 19:51:21,139 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:21,139 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3.60
2023-01-25 19:51:21,140 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3.60
2023-01-25 19:51:21,140 - __main__ - INFO - 96 - <module>() - Final prediction for document 250: {'company': 'XIAOYU ELECTRIC APPLIANCE MFG. CO., LTD.', 'date': '22A-1, JALAN 17/54, SECTION 17, 46400 PETALING JAYA, SELANGOR.', 'address': 'PO BLOCK SELANGOR JAYA', 'total': '3.60'}
2023-01-25 19:51:21,142 - __main__ - INFO - 92 - <module>() - Predicting document 251...
2023-01-25 19:51:27,671 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Address of Company: Address of Company
Date of Receipt: Date of Receipt
Total: Total
2023-01-25 19:51:27,673 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:27,673 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:27,674 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name
Address of Company: Address of Company

2023-01-25 19:51:27,674 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name Address of Company: Address of Company
2023-01-25 19:51:27,674 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:27,674 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt
Total: Total
2023-01-25 19:51:27,675 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt Total: Total
2023-01-25 19:51:27,675 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:27,675 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company
Date of Receipt: Date of Receipt

2023-01-25 19:51:27,675 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company Date of Receipt: Date of Receipt
2023-01-25 19:51:27,676 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:27,676 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
2023-01-25 19:51:27,676 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:51:27,677 - __main__ - INFO - 96 - <module>() - Final prediction for document 251: {'company': 'Company Name Address of Company: Address of Company', 'date': 'Date of Receipt Total: Total', 'address': 'Address of Company Date of Receipt: Date of Receipt', 'total': 'Total'}
2023-01-25 19:51:27,678 - __main__ - INFO - 92 - <module>() - Predicting document 252...
2023-01-25 19:51:30,199 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  C-1
Date of Receipt: 09/01/2016
Address of Company:
Total: 27.0
2023-01-25 19:51:30,200 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:30,201 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:30,201 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  C-1

2023-01-25 19:51:30,201 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: C-1
2023-01-25 19:51:30,202 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:30,202 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  09/01/2016

2023-01-25 19:51:30,202 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 09/01/2016
2023-01-25 19:51:30,203 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:30,203 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:51:30,203 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:51:30,203 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:30,204 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27.0
2023-01-25 19:51:30,204 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27.0
2023-01-25 19:51:30,204 - __main__ - INFO - 96 - <module>() - Final prediction for document 252: {'company': 'C-1', 'date': '09/01/2016', 'total': '27.0'}
2023-01-25 19:51:30,206 - __main__ - INFO - 92 - <module>() - Predicting document 253...
2023-01-25 19:51:32,825 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KWISSUFRA
Date of Receipt: 27-06-2017
Address of Company: UNTUK ISLAM
Total: 27-06-2017
2023-01-25 19:51:32,825 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:32,825 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:32,826 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KWISSUFRA

2023-01-25 19:51:32,826 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KWISSUFRA
2023-01-25 19:51:32,826 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:32,826 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27-06-2017

2023-01-25 19:51:32,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27-06-2017
2023-01-25 19:51:32,827 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:32,827 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  UNTUK ISLAM

2023-01-25 19:51:32,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: UNTUK ISLAM
2023-01-25 19:51:32,827 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:32,827 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27-06-2017
2023-01-25 19:51:32,827 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27-06-2017
2023-01-25 19:51:32,828 - __main__ - INFO - 96 - <module>() - Final prediction for document 253: {'company': 'KWISSUFRA', 'date': '27-06-2017', 'address': 'UNTUK ISLAM', 'total': '27-06-2017'}
2023-01-25 19:51:32,829 - __main__ - INFO - 92 - <module>() - Predicting document 254...
2023-01-25 19:51:35,657 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Company Name>
Date of Receipt: <Date of Receipt>
Address of Company: <Address of Company>
Total: <Total>
2023-01-25 19:51:35,658 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:35,659 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:35,659 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Company Name>

2023-01-25 19:51:35,660 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Company Name>
2023-01-25 19:51:35,660 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:35,660 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date of Receipt>

2023-01-25 19:51:35,660 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date of Receipt>
2023-01-25 19:51:35,661 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:35,661 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address of Company>

2023-01-25 19:51:35,661 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address of Company>
2023-01-25 19:51:35,661 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:35,662 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>
2023-01-25 19:51:35,662 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total>
2023-01-25 19:51:35,662 - __main__ - INFO - 96 - <module>() - Final prediction for document 254: {'company': '<Company Name>', 'date': '<Date of Receipt>', 'address': '<Address of Company>', 'total': '<Total>'}
2023-01-25 19:51:35,665 - __main__ - INFO - 92 - <module>() - Predicting document 255...
2023-01-25 19:51:47,470 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Teknologi Aeroasia
Receipt Date: 20
Address: DPRU 3100
Total: 6000
Null: NULL
This query works as is, although it can be enhanced by using a more sophisticated approach. For example, you can use a function like getCompanyName to avoid having to hardcode the company name into the query.
2023-01-25 19:51:47,471 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:51:47,472 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:51:47,472 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Teknologi Aeroasia
Receipt Date: 20
Address: DPRU 3100

2023-01-25 19:51:47,472 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Teknologi Aeroasia Receipt Date: 20 Address: DPRU 3100
2023-01-25 19:51:47,473 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:51:47,473 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:51:47,473 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:51:47,474 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  6000
Null: NULL
This query works as is, although it can be enhanced by using a more sophisticated approach. For example, you can use a function like getCompanyName to avoid having to hardcode the company name into the query.
2023-01-25 19:51:47,474 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 6000 Null: NULL This query works as is, although it can be enhanced by using a more sophisticated approach. For example, you can use a function like getCompanyName to avoid having to hardcode the company name into the query.
2023-01-25 19:51:47,474 - __main__ - INFO - 96 - <module>() - Final prediction for document 255: {'company': 'Teknologi Aeroasia Receipt Date: 20 Address: DPRU 3100', 'total': '6000 Null: NULL This query works as is, although it can be enhanced by using a more sophisticated approach. For example, you can use a function like getCompanyName to avoid having to hardcode the company name into the query.'}
2023-01-25 19:51:47,476 - __main__ - INFO - 92 - <module>() - Predicting document 256...
2023-01-25 19:52:00,620 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date of Receipt:
Date of Issue:
Address of Company:
Total:
"<|stop key|>" :
Example
You just extract the "Company Name" key from the above example set and store the result in a variable. This can be used to filter rows in another operation.

The XMP element name.

Attribute Name

Values

Value

Explanation

Type

Required

Name

Name of the field, up to 256 characters.

String

Yes

Values

Required. The array of values from a
2023-01-25 19:52:00,622 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:00,623 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:00,624 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME

2023-01-25 19:52:00,625 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME
2023-01-25 19:52:00,626 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:00,627 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date of Issue:

2023-01-25 19:52:00,628 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Issue:
2023-01-25 19:52:00,628 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:00,629 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:00,630 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:00,630 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:00,631 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
"<|stop key|>" :
Example
You just extract the "Company Name" key from the above example set and store the result in a variable. This can be used to filter rows in another operation.

The XMP element name.

Attribute Name

Values

Value

Explanation

Type

Required

Name

Name of the field, up to 256 characters.

String

Yes

Values

Required. The array of values from a
2023-01-25 19:52:00,632 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "<|stop key|>" : Example You just extract the "Company Name" key from the above example set and store the result in a variable. This can be used to filter rows in another operation. The XMP element name. Attribute Name Values Value Explanation Type Required Name Name of the field, up to 256 characters. String Yes Values Required. The array of values from a
2023-01-25 19:52:00,640 - __main__ - INFO - 96 - <module>() - Final prediction for document 256: {'company': 'COMPANY NAME', 'date': 'Date of Issue:', 'total': '"<|stop key|>" : Example You just extract the "Company Name" key from the above example set and store the result in a variable. This can be used to filter rows in another operation. The XMP element name. Attribute Name Values Value Explanation Type Required Name Name of the field, up to 256 characters. String Yes Values Required. The array of values from a'}
2023-01-25 19:52:00,650 - __main__ - INFO - 92 - <module>() - Predicting document 257...
2023-01-25 19:52:07,965 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
0
0
0
0
0

Extract (Key1)

The following are the records available for the given company. Extract the above mentioned details from each record and output the last record:
Extract (Key1, "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>"):
2023-01-25 19:52:07,967 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:07,967 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:07,968 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:07,969 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:07,969 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:07,970 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:07,970 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:07,970 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:07,972 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:07,972 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:07,973 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:07,974 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
0
0
0
0
0

Extract (Key1)

The following are the records available for the given company. Extract the above mentioned details from each record and output the last record:
Extract (Key1, "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>"):
2023-01-25 19:52:07,974 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0 0 0 0 0 Extract (Key1) The following are the records available for the given company. Extract the above mentioned details from each record and output the last record: Extract (Key1, "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>"):
2023-01-25 19:52:07,975 - __main__ - INFO - 96 - <module>() - Final prediction for document 257: {'total': '0 0 0 0 0 Extract (Key1) The following are the records available for the given company. Extract the above mentioned details from each record and output the last record: Extract (Key1, "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>"):'}
2023-01-25 19:52:07,979 - __main__ - INFO - 92 - <module>() - Predicting document 258...
2023-01-25 19:52:22,652 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "MAKASSAR FRESH MARKET S/B"
Date of Receipt: "22/08/2017"
Address of Company: "Jalan Tun Razak"
Total: "400"

Create a csv file called example.csv (don't forget to add it into the folder where you store your codes). Fill the file with the text:

In the spreadsheet, insert a new row under the heading "Document". Fill the row with the following:

Key: Value
Total: "403"
Then create a formula to total the values under the heading "Document" (don
2023-01-25 19:52:22,658 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:22,659 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:22,660 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "MAKASSAR FRESH MARKET S/B"

2023-01-25 19:52:22,661 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: MAKASSAR FRESH MARKET S/B
2023-01-25 19:52:22,662 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:22,663 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "22/08/2017"

2023-01-25 19:52:22,664 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22/08/2017
2023-01-25 19:52:22,664 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:22,665 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Jalan Tun Razak"

2023-01-25 19:52:22,667 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Tun Razak
2023-01-25 19:52:22,667 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:22,668 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "400"

Create a csv file called example.csv (don't forget to add it into the folder where you store your codes). Fill the file with the text:

In the spreadsheet, insert a new row under the heading "Document". Fill the row with the following:

Key: Value

2023-01-25 19:52:22,668 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "400" Create a csv file called example.csv (don't forget to add it into the folder where you store your codes). Fill the file with the text: In the spreadsheet, insert a new row under the heading "Document". Fill the row with the following: Key: Value
2023-01-25 19:52:22,669 - __main__ - INFO - 96 - <module>() - Final prediction for document 258: {'company': 'MAKASSAR FRESH MARKET S/B', 'date': '22/08/2017', 'address': 'Jalan Tun Razak', 'total': '"400" Create a csv file called example.csv (don\'t forget to add it into the folder where you store your codes). Fill the file with the text: In the spreadsheet, insert a new row under the heading "Document". Fill the row with the following: Key: Value'}
2023-01-25 19:52:22,675 - __main__ - INFO - 92 - <module>() - Predicting document 259...
2023-01-25 19:52:24,093 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date Receipt:
Address of Company:
Total
2023-01-25 19:52:24,094 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:24,095 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:24,097 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Date Receipt:

2023-01-25 19:52:24,097 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date Receipt:
2023-01-25 19:52:24,097 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:24,098 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:24,098 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Total
2023-01-25 19:52:24,099 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 19:52:24,099 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:24,100 - __main__ - INFO - 96 - <module>() - Final prediction for document 259: {'company': 'Date Receipt:', 'address': 'Total'}
2023-01-25 19:52:24,103 - __main__ - INFO - 92 - <module>() - Predicting document 260...
2023-01-25 19:52:31,125 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  IKEA
Date of Receipt: 09/06/18
Address of Company: Taman Desa Tebrau
Total: 3.20
*

Please go to our facebook page to let us know if you are still having issues
https://www.facebook.com/LazadaMalaysia/

* If you could provide the order number that would be helpful. If you are not sure if it is the right one please take a screenshot and send it to me and I will help you sort out.

Hi and thank you for using Kopyta. It's a service that
2023-01-25 19:52:31,125 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:31,126 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:31,126 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  IKEA

2023-01-25 19:52:31,126 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: IKEA
2023-01-25 19:52:31,127 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:31,127 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  09/06/18

2023-01-25 19:52:31,127 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 09/06/18
2023-01-25 19:52:31,127 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:31,127 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Taman Desa Tebrau

2023-01-25 19:52:31,128 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Taman Desa Tebrau
2023-01-25 19:52:31,128 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:31,128 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3.20
*

Please go to our facebook page to let us know if you are still having issues
https://www.facebook.com/LazadaMalaysia/

* If you could provide the order number that would be helpful. If you are not sure if it is the right one please take a screenshot and send it to me and I will help you sort out.

Hi and thank you for using Kopyta. It's a service that
2023-01-25 19:52:31,128 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3.20 * Please go to our facebook page to let us know if you are still having issues https://www.facebook.com/LazadaMalaysia/ * If you could provide the order number that would be helpful. If you are not sure if it is the right one please take a screenshot and send it to me and I will help you sort out. Hi and thank you for using Kopyta. It's a service that
2023-01-25 19:52:31,129 - __main__ - INFO - 96 - <module>() - Final prediction for document 260: {'company': 'IKEA', 'date': '09/06/18', 'address': 'Taman Desa Tebrau', 'total': "3.20 * Please go to our facebook page to let us know if you are still having issues https://www.facebook.com/LazadaMalaysia/ * If you could provide the order number that would be helpful. If you are not sure if it is the right one please take a screenshot and send it to me and I will help you sort out. Hi and thank you for using Kopyta. It's a service that"}
2023-01-25 19:52:31,130 - __main__ - INFO - 92 - <module>() - Predicting document 261...
2023-01-25 19:52:37,559 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Bar Wang Rice
Date of Receipt: 15-JUL-2018
Address of Company: Jalan Kewalangan
Total: 14.00
Example for Java8:

If the key in this question is a valid column name, then

String[] columnNames = {"Company Name", "Date of Receipt", "Address of Company", "Total"};
Table table = new Table();
table.setRowCount(1);
table.setColumnNames(columnNames);
for (Map.Entry<String, String> entry : map.entrySet()) {
Object[] object
2023-01-25 19:52:37,560 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:37,560 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:37,561 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Bar Wang Rice

2023-01-25 19:52:37,561 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Bar Wang Rice
2023-01-25 19:52:37,561 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:37,561 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15-JUL-2018

2023-01-25 19:52:37,562 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15-JUL-2018
2023-01-25 19:52:37,562 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:37,562 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Kewalangan

2023-01-25 19:52:37,562 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Kewalangan
2023-01-25 19:52:37,562 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:37,563 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14.00
Example for Java8:

If the key in this question is a valid column name, then

String[] columnNames = {"Company Name", "Date of Receipt", "Address of Company", "Total"};
Table table = new Table();
table.setRowCount(1);
table.setColumnNames(columnNames);
for (Map.Entry<String, String> entry : map.entrySet()) {
Object[] object
2023-01-25 19:52:37,563 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14.00 Example for Java8: If the key in this question is a valid column name, then String[] columnNames = {"Company Name", "Date of Receipt", "Address of Company", "Total"}; Table table = new Table(); table.setRowCount(1); table.setColumnNames(columnNames); for (Map.Entry<String, String> entry : map.entrySet()) { Object[] object
2023-01-25 19:52:37,563 - __main__ - INFO - 96 - <module>() - Final prediction for document 261: {'company': 'Bar Wang Rice', 'date': '15-JUL-2018', 'address': 'Jalan Kewalangan', 'total': '14.00 Example for Java8: If the key in this question is a valid column name, then String[] columnNames = {"Company Name", "Date of Receipt", "Address of Company", "Total"}; Table table = new Table(); table.setRowCount(1); table.setColumnNames(columnNames); for (Map.Entry<String, String> entry : map.entrySet()) { Object[] object'}
2023-01-25 19:52:37,565 - __main__ - INFO - 92 - <module>() - Predicting document 262...
2023-01-25 19:52:40,065 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date of Receipt: 1
Address of Company: ADDRESS OF COMPANY
Total: 189.05
2023-01-25 19:52:40,066 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:40,066 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:40,066 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME

2023-01-25 19:52:40,066 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME
2023-01-25 19:52:40,066 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:40,066 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1

2023-01-25 19:52:40,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1
2023-01-25 19:52:40,067 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:40,067 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ADDRESS OF COMPANY

2023-01-25 19:52:40,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ADDRESS OF COMPANY
2023-01-25 19:52:40,067 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:40,067 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  189.05
2023-01-25 19:52:40,067 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 189.05
2023-01-25 19:52:40,067 - __main__ - INFO - 96 - <module>() - Final prediction for document 262: {'company': 'COMPANY NAME', 'date': '1', 'address': 'ADDRESS OF COMPANY', 'total': '189.05'}
2023-01-25 19:52:40,068 - __main__ - INFO - 92 - <module>() - Predicting document 263...
2023-01-25 19:52:46,954 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The company name on the invoice (as displayed on the invoice)
Date of Receipt: The date of the invoice (e.g. dd/mm/yyyy)
Address of Company: The full address of the company as shown on the invoice
Total: The total amount on the invoice (i.e. excluding GST)

If you have any questions feel free to contact me.

Regards,
Wanda
Accounting
Barwang Rice
01 MAY 2018 02:09
(843533-U)

Thanks for your reply. We can do GST only for total amount less than
2023-01-25 19:52:46,955 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:46,955 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:46,956 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The company name on the invoice (as displayed on the invoice)

2023-01-25 19:52:46,956 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The company name on the invoice (as displayed on the invoice)
2023-01-25 19:52:46,956 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:46,957 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date of the invoice (e.g. dd/mm/yyyy)

2023-01-25 19:52:46,957 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date of the invoice (e.g. dd/mm/yyyy)
2023-01-25 19:52:46,957 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:46,957 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The full address of the company as shown on the invoice

2023-01-25 19:52:46,958 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The full address of the company as shown on the invoice
2023-01-25 19:52:46,958 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:46,958 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The total amount on the invoice (i.e. excluding GST)

If you have any questions feel free to contact me.

Regards,
Wanda
Accounting
Barwang Rice
01 MAY 2018 02:09
(843533-U)

Thanks for your reply. We can do GST only for total amount less than
2023-01-25 19:52:46,959 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The total amount on the invoice (i.e. excluding GST) If you have any questions feel free to contact me. Regards, Wanda Accounting Barwang Rice 01 MAY 2018 02:09 (843533-U) Thanks for your reply. We can do GST only for total amount less than
2023-01-25 19:52:46,959 - __main__ - INFO - 96 - <module>() - Final prediction for document 263: {'company': 'The company name on the invoice (as displayed on the invoice)', 'date': 'The date of the invoice (e.g. dd/mm/yyyy)', 'address': 'The full address of the company as shown on the invoice', 'total': 'The total amount on the invoice (i.e. excluding GST) If you have any questions feel free to contact me. Regards, Wanda Accounting Barwang Rice 01 MAY 2018 02:09 (843533-U) Thanks for your reply. We can do GST only for total amount less than'}
2023-01-25 19:52:46,961 - __main__ - INFO - 92 - <module>() - Predicting document 264...
2023-01-25 19:52:52,003 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Extract all the <table> tags from the HTML document.

Including the <table> tags in the output.

Do not include tables that are not in the same format.

Do not include tables where the <table> and </table> tags are not in the same order as the sample.
2023-01-25 19:52:52,004 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:52,004 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:52,005 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:52,005 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:52,005 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:52,006 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:52,006 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:52,006 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:52,007 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:52:52,007 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:52:52,007 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:52,007 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Extract all the <table> tags from the HTML document.

Including the <table> tags in the output.

Do not include tables that are not in the same format.

Do not include tables where the <table> and </table> tags are not in the same order as the sample.
2023-01-25 19:52:52,008 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Extract all the <table> tags from the HTML document. Including the <table> tags in the output. Do not include tables that are not in the same format. Do not include tables where the <table> and </table> tags are not in the same order as the sample.
2023-01-25 19:52:52,008 - __main__ - INFO - 96 - <module>() - Final prediction for document 264: {'total': 'Extract all the <table> tags from the HTML document. Including the <table> tags in the output. Do not include tables that are not in the same format. Do not include tables where the <table> and </table> tags are not in the same order as the sample.'}
2023-01-25 19:52:52,010 - __main__ - INFO - 92 - <module>() - Predicting document 265...
2023-01-25 19:52:57,494 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SANYU STATIONERY SHOP
Receipt Date: 2017-10-16
Company Address: NO. 31G&33G, JALAN SETIA INDAH X ,U13/X
Total: 8.21
Date: 2017-10-16

I don't think you can do it with a regular expression. You could use a regular expression to get rid of everything except what you want, but I don't think you can just specify the key.


2023-01-25 19:52:57,495 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:52:57,495 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:52:57,495 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SANYU STATIONERY SHOP
Receipt Date: 2017-10-16
Company Address: NO. 31G&33G, JALAN SETIA INDAH X ,U13/X

2023-01-25 19:52:57,496 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SANYU STATIONERY SHOP Receipt Date: 2017-10-16 Company Address: NO. 31G&33G, JALAN SETIA INDAH X ,U13/X
2023-01-25 19:52:57,496 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:52:57,496 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:52:57,496 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:52:57,496 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  8.21
Date: 2017-10-16

I don't think you can do it with a regular expression. You could use a regular expression to get rid of everything except what you want, but I don't think you can just specify the key.


2023-01-25 19:52:57,497 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 8.21 Date: 2017-10-16 I don't think you can do it with a regular expression. You could use a regular expression to get rid of everything except what you want, but I don't think you can just specify the key.
2023-01-25 19:52:57,497 - __main__ - INFO - 96 - <module>() - Final prediction for document 265: {'company': 'SANYU STATIONERY SHOP Receipt Date: 2017-10-16 Company Address: NO. 31G&33G, JALAN SETIA INDAH X ,U13/X', 'total': "8.21 Date: 2017-10-16 I don't think you can do it with a regular expression. You could use a regular expression to get rid of everything except what you want, but I don't think you can just specify the key."}
2023-01-25 19:52:57,498 - __main__ - INFO - 92 - <module>() - Predicting document 266...
2023-01-25 19:53:04,222 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: "2018-01-27"
Address of Company: Street address
Total: 9.40
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf-attachments SYSTEM "pdf-attachments.dtd">
<pdf-attachments>
<record>
<pdf-record><data>
<company name="Company Name">
<address of company="Street address">
<total>9.40</total>
</record>

A:

Assuming you want to extract that information with a regex, you can
2023-01-25 19:53:04,225 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:04,225 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:04,226 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:53:04,226 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:53:04,226 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:04,226 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2018-01-27"

2023-01-25 19:53:04,226 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-01-27
2023-01-25 19:53:04,226 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:04,226 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Street address

2023-01-25 19:53:04,227 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Street address
2023-01-25 19:53:04,227 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:04,227 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9.40
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pdf-attachments SYSTEM "pdf-attachments.dtd">
<pdf-attachments>
<record>
<pdf-record><data>
<company name="Company Name">
<address of company="Street address">
<total>9.40</total>
</record>

A:

Assuming you want to extract that information with a regex, you can
2023-01-25 19:53:04,227 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9.40 <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE pdf-attachments SYSTEM "pdf-attachments.dtd"> <pdf-attachments> <record> <pdf-record><data> <company name="Company Name"> <address of company="Street address"> <total>9.40</total> </record> A: Assuming you want to extract that information with a regex, you can
2023-01-25 19:53:04,227 - __main__ - INFO - 96 - <module>() - Final prediction for document 266: {'company': 'Company Name', 'date': '2018-01-27', 'address': 'Street address', 'total': '9.40 <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE pdf-attachments SYSTEM "pdf-attachments.dtd"> <pdf-attachments> <record> <pdf-record><data> <company name="Company Name"> <address of company="Street address"> <total>9.40</total> </record> A: Assuming you want to extract that information with a regex, you can'}
2023-01-25 19:53:04,229 - __main__ - INFO - 92 - <module>() - Predicting document 267...
2023-01-25 19:53:11,270 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  XXXXXX
Date of Receipt: 10-05-2018
Address of Company: Jalan Tampoi 7/4
Total: $9,20

Input "Total" as the first value in the table above.
Output "company name" + "<|stop key|>" + " total" as the first element in the output.
Output "address of company" + "<|stop key|>" + " total" as the second element in the output.
Output "stop key" + "<|stop key|>" + " total" as the last element in the output.
Output all
2023-01-25 19:53:11,271 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:11,272 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:11,272 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XXXXXX

2023-01-25 19:53:11,272 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XXXXXX
2023-01-25 19:53:11,272 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:11,273 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10-05-2018

2023-01-25 19:53:11,273 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10-05-2018
2023-01-25 19:53:11,273 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:11,274 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Tampoi 7/4

2023-01-25 19:53:11,274 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Tampoi 7/4
2023-01-25 19:53:11,274 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:11,274 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $9,20

Input "Total" as the first value in the table above.
Output "company name" + "<|stop key|>" + " total" as the first element in the output.
Output "address of company" + "<|stop key|>" + " total" as the second element in the output.
Output "stop key" + "<|stop key|>" + " total" as the last element in the output.
Output all
2023-01-25 19:53:11,275 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $9,20 Input "Total" as the first value in the table above. Output "company name" + "<|stop key|>" + " total" as the first element in the output. Output "address of company" + "<|stop key|>" + " total" as the second element in the output. Output "stop key" + "<|stop key|>" + " total" as the last element in the output. Output all
2023-01-25 19:53:11,275 - __main__ - INFO - 96 - <module>() - Final prediction for document 267: {'company': 'XXXXXX', 'date': '10-05-2018', 'address': 'Jalan Tampoi 7/4', 'total': '$9,20 Input "Total" as the first value in the table above. Output "company name" + "<|stop key|>" + " total" as the first element in the output. Output "address of company" + "<|stop key|>" + " total" as the second element in the output. Output "stop key" + "<|stop key|>" + " total" as the last element in the output. Output all'}
2023-01-25 19:53:11,277 - __main__ - INFO - 92 - <module>() - Predicting document 268...
2023-01-25 19:53:16,245 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  118MJMookataHouse
Date of Receipt: 11-06-2018 07:21:26 PM
Address of Company: 81750 Masai, Jalan Permas 11, Bandar Baru Permas Jaya, Johor
Total: 102.40
For more information, visit the official website of 118MJMookataHouse: WWW.FACEBOOK.COM/118MJMOOKATAHOUSE
2023-01-25 19:53:16,246 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:16,247 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:16,247 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  118MJMookataHouse

2023-01-25 19:53:16,247 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 118MJMookataHouse
2023-01-25 19:53:16,248 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:16,248 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  11-06-2018 07:21:26 PM

2023-01-25 19:53:16,248 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11-06-2018 07:21:26 PM
2023-01-25 19:53:16,249 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:16,249 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  81750 Masai, Jalan Permas 11, Bandar Baru Permas Jaya, Johor

2023-01-25 19:53:16,249 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 81750 Masai, Jalan Permas 11, Bandar Baru Permas Jaya, Johor
2023-01-25 19:53:16,250 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:16,250 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  102.40
For more information, visit the official website of 118MJMookataHouse: WWW.FACEBOOK.COM/118MJMOOKATAHOUSE
2023-01-25 19:53:16,250 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 102.40 For more information, visit the official website of 118MJMookataHouse: WWW.FACEBOOK.COM/118MJMOOKATAHOUSE
2023-01-25 19:53:16,250 - __main__ - INFO - 96 - <module>() - Final prediction for document 268: {'company': '118MJMookataHouse', 'date': '11-06-2018 07:21:26 PM', 'address': '81750 Masai, Jalan Permas 11, Bandar Baru Permas Jaya, Johor', 'total': '102.40 For more information, visit the official website of 118MJMookataHouse: WWW.FACEBOOK.COM/118MJMOOKATAHOUSE'}
2023-01-25 19:53:16,252 - __main__ - INFO - 92 - <module>() - Predicting document 269...
2023-01-25 19:53:18,740 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
Date of Receipt: 1st April 2017
Address of Company: SHAH ALAM, PJ
Total: RM500
2023-01-25 19:53:18,742 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:18,742 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:18,743 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME

2023-01-25 19:53:18,743 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME
2023-01-25 19:53:18,743 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:18,744 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1st April 2017

2023-01-25 19:53:18,744 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1st April 2017
2023-01-25 19:53:18,744 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:18,744 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SHAH ALAM, PJ

2023-01-25 19:53:18,745 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SHAH ALAM, PJ
2023-01-25 19:53:18,745 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:18,745 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM500
2023-01-25 19:53:18,745 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM500
2023-01-25 19:53:18,746 - __main__ - INFO - 96 - <module>() - Final prediction for document 269: {'company': 'COMPANY NAME', 'date': '1st April 2017', 'address': 'SHAH ALAM, PJ', 'total': 'RM500'}
2023-01-25 19:53:18,747 - __main__ - INFO - 92 - <module>() - Predicting document 270...
2023-01-25 19:53:20,872 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  【Company Name】
Date of Receipt: 12/02/2017
Address of Company:
Total: 1,000
2023-01-25 19:53:20,872 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:20,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:20,873 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  【Company Name】

2023-01-25 19:53:20,874 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 【Company Name】
2023-01-25 19:53:20,875 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:20,875 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12/02/2017

2023-01-25 19:53:20,876 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12/02/2017
2023-01-25 19:53:20,876 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:20,876 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:20,876 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:20,877 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:20,877 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1,000
2023-01-25 19:53:20,877 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1,000
2023-01-25 19:53:20,877 - __main__ - INFO - 96 - <module>() - Final prediction for document 270: {'company': '【Company Name】', 'date': '12/02/2017', 'total': '1,000'}
2023-01-25 19:53:20,878 - __main__ - INFO - 92 - <module>() - Predicting document 271...
2023-01-25 19:53:27,768 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Save this set as <fileName>.csv. This saves you some typing but might break if the value of "Company Name" has spaces.

This example was used to create the following file:
file:/home/me/Documents/example.csv
Example:

A:

The problem appears to be that you are trying to read the values from "document set", the contents of the document which you read from Excel. You need to take the output of the getValue()
2023-01-25 19:53:27,771 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:27,771 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:27,772 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:53:27,772 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:53:27,772 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:27,773 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:53:27,773 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:53:27,773 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:27,774 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:53:27,774 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:53:27,775 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:27,775 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Save this set as <fileName>.csv. This saves you some typing but might break if the value of "Company Name" has spaces.

This example was used to create the following file:
file:/home/me/Documents/example.csv
Example:

A:

The problem appears to be that you are trying to read the values from "document set", the contents of the document which you read from Excel. You need to take the output of the getValue()
2023-01-25 19:53:27,775 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Save this set as <fileName>.csv. This saves you some typing but might break if the value of "Company Name" has spaces. This example was used to create the following file: file:/home/me/Documents/example.csv Example: A: The problem appears to be that you are trying to read the values from "document set", the contents of the document which you read from Excel. You need to take the output of the getValue()
2023-01-25 19:53:27,776 - __main__ - INFO - 96 - <module>() - Final prediction for document 271: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Save this set as <fileName>.csv. This saves you some typing but might break if the value of "Company Name" has spaces. This example was used to create the following file: file:/home/me/Documents/example.csv Example: A: The problem appears to be that you are trying to read the values from "document set", the contents of the document which you read from Excel. You need to take the output of the getValue()'}
2023-01-25 19:53:27,781 - __main__ - INFO - 92 - <module>() - Predicting document 272...
2023-01-25 19:53:35,402 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY
Date of Receipt: 01/01/2008
Address of Company: 12345 SOUTH STREET EAST, SEVENTH HEIGHT, SEVENTH HEIGHT, US
Total: 20

This tutorial assumes that the input document is in "word" format.

Output
Output a simple table in which each row shows each transaction's line items. Each cell shows the item name, quantity, and price.

The key must be in this order: "ITEM QTY PRICE".

The input document must be provided from left to right. There is no need to use
2023-01-25 19:53:35,404 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:35,404 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:35,404 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY

2023-01-25 19:53:35,404 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY
2023-01-25 19:53:35,405 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:35,405 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/01/2008

2023-01-25 19:53:35,405 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/01/2008
2023-01-25 19:53:35,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:35,406 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12345 SOUTH STREET EAST, SEVENTH HEIGHT, SEVENTH HEIGHT, US

2023-01-25 19:53:35,406 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12345 SOUTH STREET EAST, SEVENTH HEIGHT, SEVENTH HEIGHT, US
2023-01-25 19:53:35,406 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:35,407 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20

This tutorial assumes that the input document is in "word" format.

Output
Output a simple table in which each row shows each transaction's line items. Each cell shows the item name, quantity, and price.

The key must be in this order: "ITEM QTY PRICE".

The input document must be provided from left to right. There is no need to use
2023-01-25 19:53:35,407 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20 This tutorial assumes that the input document is in "word" format. Output Output a simple table in which each row shows each transaction's line items. Each cell shows the item name, quantity, and price. The key must be in this order: "ITEM QTY PRICE". The input document must be provided from left to right. There is no need to use
2023-01-25 19:53:35,407 - __main__ - INFO - 96 - <module>() - Final prediction for document 272: {'company': 'COMPANY', 'date': '01/01/2008', 'address': '12345 SOUTH STREET EAST, SEVENTH HEIGHT, SEVENTH HEIGHT, US', 'total': '20 This tutorial assumes that the input document is in "word" format. Output Output a simple table in which each row shows each transaction\'s line items. Each cell shows the item name, quantity, and price. The key must be in this order: "ITEM QTY PRICE". The input document must be provided from left to right. There is no need to use'}
2023-01-25 19:53:35,409 - __main__ - INFO - 92 - <module>() - Predicting document 273...
2023-01-25 19:53:42,341 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  COMPANY NAME
D.O.B.: DATE
Address of company: COMPANY ADDRESS
Total: TOTAL AMOUNT PAID

Your first name:
Your last name:
Your email address:
Your phone number:

Note: For all submissions, we will only store your first name, last name and email address. We may, on occasion, contact you via email in order to follow up with you about your submission.

Please type the security characters shown in the image below. This is used to prevent people from viewing the report.

View as:
Copies to:
Email
2023-01-25 19:53:42,341 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:42,342 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:42,342 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY NAME
D.O.B.: DATE

2023-01-25 19:53:42,342 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY NAME D.O.B.: DATE
2023-01-25 19:53:42,342 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:42,342 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:42,342 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  COMPANY ADDRESS

2023-01-25 19:53:42,343 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: COMPANY ADDRESS
2023-01-25 19:53:42,343 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:42,343 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TOTAL AMOUNT PAID

Your first name:
Your last name:
Your email address:
Your phone number:

Note: For all submissions, we will only store your first name, last name and email address. We may, on occasion, contact you via email in order to follow up with you about your submission.

Please type the security characters shown in the image below. This is used to prevent people from viewing the report.

View as:
Copies to:
Email
2023-01-25 19:53:42,343 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TOTAL AMOUNT PAID Your first name: Your last name: Your email address: Your phone number: Note: For all submissions, we will only store your first name, last name and email address. We may, on occasion, contact you via email in order to follow up with you about your submission. Please type the security characters shown in the image below. This is used to prevent people from viewing the report. View as: Copies to: Email
2023-01-25 19:53:42,343 - __main__ - INFO - 96 - <module>() - Final prediction for document 273: {'company': 'COMPANY NAME D.O.B.: DATE', 'address': 'COMPANY ADDRESS', 'total': 'TOTAL AMOUNT PAID Your first name: Your last name: Your email address: Your phone number: Note: For all submissions, we will only store your first name, last name and email address. We may, on occasion, contact you via email in order to follow up with you about your submission. Please type the security characters shown in the image below. This is used to prevent people from viewing the report. View as: Copies to: Email'}
2023-01-25 19:53:42,344 - __main__ - INFO - 92 - <module>() - Predicting document 274...
2023-01-25 19:53:50,093 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: Date
Address of Company: Street Address
Total: Value in dollars

Output:

Company Name: MyDIN
Date of Receipt: 15/01/2018 10:59:13
Address of Company:
Total: 5.50

A:

For anyone coming across this page in the future, the key-value pair you want is the first one. You don't need to check anything else.
The data is in a very specific format (see below). Each key-value pair has the form (x * * * *, y * * * *,
2023-01-25 19:53:50,093 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:50,093 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:50,094 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:50,094 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:50,094 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:50,094 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date

2023-01-25 19:53:50,094 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date
2023-01-25 19:53:50,094 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:50,095 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Street Address

2023-01-25 19:53:50,095 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Street Address
2023-01-25 19:53:50,095 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:50,095 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Value in dollars

Output:

Company Name: MyDIN
Date of Receipt: 15/01/2018 10:59:13
Address of Company:

2023-01-25 19:53:50,095 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Value in dollars Output: Company Name: MyDIN Date of Receipt: 15/01/2018 10:59:13 Address of Company:
2023-01-25 19:53:50,095 - __main__ - INFO - 96 - <module>() - Final prediction for document 274: {'date': 'Date', 'address': 'Street Address', 'total': 'Value in dollars Output: Company Name: MyDIN Date of Receipt: 15/01/2018 10:59:13 Address of Company:'}
2023-01-25 19:53:50,097 - __main__ - INFO - 92 - <module>() - Predicting document 275...
2023-01-25 19:53:51,540 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:53:51,541 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:51,541 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:51,541 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:51,541 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:51,542 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:51,542 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:51,542 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:51,542 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:51,543 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:51,543 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:51,543 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:51,543 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:53:51,543 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:51,544 - __main__ - INFO - 96 - <module>() - Final prediction for document 275: {}
2023-01-25 19:53:51,545 - __main__ - INFO - 92 - <module>() - Predicting document 276...
2023-01-25 19:53:58,464 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 17 JUN 2016
Address of Company:
Total: 0.25

Output:

Company Name: YIN MA (M) SDN.BHD. (974306-T)
Date of Receipt: 17 JUN 2016
Address of Company: Jalan UDANG SIAR 2
Total: 0.25

Note:
When you see the result from the above example that there is a line starting with a : followed by multiple spaces and then another key-value pair that has spaces in between then that line of the JSON corresponds to the line that
2023-01-25 19:53:58,466 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:53:58,466 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:53:58,467 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:58,468 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:58,468 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:53:58,469 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  17 JUN 2016

2023-01-25 19:53:58,470 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 17 JUN 2016
2023-01-25 19:53:58,470 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:53:58,471 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:53:58,472 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:53:58,472 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:53:58,473 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0.25

Output:

Company Name: YIN MA (M) SDN.BHD. (974306-T)
Date of Receipt: 17 JUN 2016
Address of Company: Jalan UDANG SIAR 2

2023-01-25 19:53:58,473 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.25 Output: Company Name: YIN MA (M) SDN.BHD. (974306-T) Date of Receipt: 17 JUN 2016 Address of Company: Jalan UDANG SIAR 2
2023-01-25 19:53:58,474 - __main__ - INFO - 96 - <module>() - Final prediction for document 276: {'date': '17 JUN 2016', 'total': '0.25 Output: Company Name: YIN MA (M) SDN.BHD. (974306-T) Date of Receipt: 17 JUN 2016 Address of Company: Jalan UDANG SIAR 2'}
2023-01-25 19:53:58,477 - __main__ - INFO - 92 - <module>() - Predicting document 277...
2023-01-25 19:54:05,407 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SELLBATERS BENGAL TOWNSHIP
Address of Company: SUPER TUTU, BLOC 14, TENGA KESASAN TANJONG PADANG BESAR
date of receipt: 19-09-2018 20:00:00
Total: 4.80

To save the data into a text file, go to Tools – Import from Text Files, click on Open. Select the document you just extracted data from and click OK. Name the output file and click OK. The file will be saved into Documents/Extracted Data Files directory of the database.

2023-01-25 19:54:05,408 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:05,409 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:05,409 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SELLBATERS BENGAL TOWNSHIP
Address of Company: SUPER TUTU, BLOC 14, TENGA KESASAN TANJONG PADANG BESAR

2023-01-25 19:54:05,409 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SELLBATERS BENGAL TOWNSHIP Address of Company: SUPER TUTU, BLOC 14, TENGA KESASAN TANJONG PADANG BESAR
2023-01-25 19:54:05,410 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:05,410 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19-09-2018 20:00:00
Total: 4.80

To save the data into a text file, go to Tools – Import from Text Files, click on Open. Select the document you just extracted data from and click OK. Name the output file and click OK. The file will be saved into Documents/Extracted Data Files directory of the database.

2023-01-25 19:54:05,410 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19-09-2018 20:00:00 Total: 4.80 To save the data into a text file, go to Tools – Import from Text Files, click on Open. Select the document you just extracted data from and click OK. Name the output file and click OK. The file will be saved into Documents/Extracted Data Files directory of the database.
2023-01-25 19:54:05,411 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:05,411 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SUPER TUTU, BLOC 14, TENGA KESASAN TANJONG PADANG BESAR
date of receipt: 19-09-2018 20:00:00

2023-01-25 19:54:05,411 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SUPER TUTU, BLOC 14, TENGA KESASAN TANJONG PADANG BESAR date of receipt: 19-09-2018 20:00:00
2023-01-25 19:54:05,411 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:05,412 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  4.80

To save the data into a text file, go to Tools – Import from Text Files, click on Open. Select the document you just extracted data from and click OK. Name the output file and click OK. The file will be saved into Documents/Extracted Data Files directory of the database.

2023-01-25 19:54:05,412 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 4.80 To save the data into a text file, go to Tools – Import from Text Files, click on Open. Select the document you just extracted data from and click OK. Name the output file and click OK. The file will be saved into Documents/Extracted Data Files directory of the database.
2023-01-25 19:54:05,412 - __main__ - INFO - 96 - <module>() - Final prediction for document 277: {'company': 'SELLBATERS BENGAL TOWNSHIP Address of Company: SUPER TUTU, BLOC 14, TENGA KESASAN TANJONG PADANG BESAR', 'date': '19-09-2018 20:00:00 Total: 4.80 To save the data into a text file, go to Tools – Import from Text Files, click on Open. Select the document you just extracted data from and click OK. Name the output file and click OK. The file will be saved into Documents/Extracted Data Files directory of the database.', 'address': 'SUPER TUTU, BLOC 14, TENGA KESASAN TANJONG PADANG BESAR date of receipt: 19-09-2018 20:00:00', 'total': '4.80 To save the data into a text file, go to Tools – Import from Text Files, click on Open. Select the document you just extracted data from and click OK. Name the output file and click OK. The file will be saved into Documents/Extracted Data Files directory of the database.'}
2023-01-25 19:54:05,414 - __main__ - INFO - 92 - <module>() - Predicting document 278...
2023-01-25 19:54:12,853 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

For example, to sort an array of strings, the fields in a string must all be separated by delimiters. The delimiters in each string in the array of strings must be the same. The first occurrence of a delimiter in each string in the array of strings determines the sorting order.

Input: A list of strings
Output: The list of strings sorted by the delimiters found in the strings.
For example, consider the following strings:
A A1A,
2023-01-25 19:54:12,853 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:12,853 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:12,854 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:54:12,854 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:54:12,854 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:12,854 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:54:12,854 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:54:12,855 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:12,855 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:54:12,855 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:54:12,855 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:12,856 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

For example, to sort an array of strings, the fields in a string must all be separated by delimiters. The delimiters in each string in the array of strings must be the same. The first occurrence of a delimiter in each string in the array of strings determines the sorting order.

Input: A list of strings
Output: The list of strings sorted by the delimiters found in the strings.
For example, consider the following strings:
A A1A,
2023-01-25 19:54:12,856 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total For example, to sort an array of strings, the fields in a string must all be separated by delimiters. The delimiters in each string in the array of strings must be the same. The first occurrence of a delimiter in each string in the array of strings determines the sorting order. Input: A list of strings Output: The list of strings sorted by the delimiters found in the strings. For example, consider the following strings: A A1A,
2023-01-25 19:54:12,856 - __main__ - INFO - 96 - <module>() - Final prediction for document 278: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total For example, to sort an array of strings, the fields in a string must all be separated by delimiters. The delimiters in each string in the array of strings must be the same. The first occurrence of a delimiter in each string in the array of strings determines the sorting order. Input: A list of strings Output: The list of strings sorted by the delimiters found in the strings. For example, consider the following strings: A A1A,'}
2023-01-25 19:54:12,858 - __main__ - INFO - 92 - <module>() - Predicting document 279...
2023-01-25 19:54:15,563 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Your Company Name
Date of Receipt: DDMMYYYY
Address of Company: Address of your Company
Total: Total amount paid
2023-01-25 19:54:15,564 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:15,564 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:15,564 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Your Company Name

2023-01-25 19:54:15,564 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Your Company Name
2023-01-25 19:54:15,565 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:15,565 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DDMMYYYY

2023-01-25 19:54:15,565 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DDMMYYYY
2023-01-25 19:54:15,566 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:15,566 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of your Company

2023-01-25 19:54:15,566 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of your Company
2023-01-25 19:54:15,566 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:15,567 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total amount paid
2023-01-25 19:54:15,567 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total amount paid
2023-01-25 19:54:15,567 - __main__ - INFO - 96 - <module>() - Final prediction for document 279: {'company': 'Your Company Name', 'date': 'DDMMYYYY', 'address': 'Address of your Company', 'total': 'Total amount paid'}
2023-01-25 19:54:15,569 - __main__ - INFO - 92 - <module>() - Predicting document 280...
2023-01-25 19:54:23,815 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Your goal is to return the document set as CSV. The order of the fields in the document set will be respected. You will likely need to remove quotes around the numeric values.  If this is not possible, you may leave quotes around the values. You may assume that each field is a string, so that if you parse a field that contains spaces you will get an array containing a single string. You should not count the double quotes in the data.
Example Input

Example Output
Company
2023-01-25 19:54:23,816 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:23,816 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:23,817 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:54:23,817 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:54:23,818 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:23,818 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:54:23,818 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:54:23,819 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:23,819 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:54:23,819 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:54:23,820 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:23,820 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Your goal is to return the document set as CSV. The order of the fields in the document set will be respected. You will likely need to remove quotes around the numeric values.  If this is not possible, you may leave quotes around the values. You may assume that each field is a string, so that if you parse a field that contains spaces you will get an array containing a single string. You should not count the double quotes in the data.
Example Input

Example Output
Company
2023-01-25 19:54:23,820 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Your goal is to return the document set as CSV. The order of the fields in the document set will be respected. You will likely need to remove quotes around the numeric values. If this is not possible, you may leave quotes around the values. You may assume that each field is a string, so that if you parse a field that contains spaces you will get an array containing a single string. You should not count the double quotes in the data.  Example Input Example Output Company
2023-01-25 19:54:23,820 - __main__ - INFO - 96 - <module>() - Final prediction for document 280: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Your goal is to return the document set as CSV. The order of the fields in the document set will be respected. You will likely need to remove quotes around the numeric values. If this is not possible, you may leave quotes around the values. You may assume that each field is a string, so that if you parse a field that contains spaces you will get an array containing a single string. You should not count the double quotes in the data.  Example Input Example Output Company'}
2023-01-25 19:54:23,823 - __main__ - INFO - 92 - <module>() - Predicting document 281...
2023-01-25 19:54:30,965 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  A
Date of Receipt: 20170521
Address of Company: SIA LAMPUNG CENTRE, No.14, Jalan Pasir Puteh, Taman
Rangsang Perdana, Lampung Timur, Lampung 01650, Indonesia
Total: 25.60

To answer the questions from the previous section, you have to:

Use a loop to read each of the lines in the file, then perform the following two steps:
1. Read a line of the file and print the line and its length in characters (characters is the variable
2023-01-25 19:54:30,966 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:30,967 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:30,967 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A

2023-01-25 19:54:30,968 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A
2023-01-25 19:54:30,968 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:30,968 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  20170521

2023-01-25 19:54:30,969 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 20170521
2023-01-25 19:54:30,969 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:30,969 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SIA LAMPUNG CENTRE, No.14, Jalan Pasir Puteh, Taman
Rangsang Perdana, Lampung Timur, Lampung 01650, Indonesia

2023-01-25 19:54:30,969 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SIA LAMPUNG CENTRE, No.14, Jalan Pasir Puteh, Taman Rangsang Perdana, Lampung Timur, Lampung 01650, Indonesia
2023-01-25 19:54:30,970 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:30,970 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  25.60

To answer the questions from the previous section, you have to:

Use a loop to read each of the lines in the file, then perform the following two steps:
1. Read a line of the file and print the line and its length in characters (characters is the variable
2023-01-25 19:54:30,970 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 25.60 To answer the questions from the previous section, you have to: Use a loop to read each of the lines in the file, then perform the following two steps: 1. Read a line of the file and print the line and its length in characters (characters is the variable
2023-01-25 19:54:30,970 - __main__ - INFO - 96 - <module>() - Final prediction for document 281: {'company': 'A', 'date': '20170521', 'address': 'SIA LAMPUNG CENTRE, No.14, Jalan Pasir Puteh, Taman Rangsang Perdana, Lampung Timur, Lampung 01650, Indonesia', 'total': '25.60 To answer the questions from the previous section, you have to: Use a loop to read each of the lines in the file, then perform the following two steps: 1. Read a line of the file and print the line and its length in characters (characters is the variable'}
2023-01-25 19:54:30,972 - __main__ - INFO - 92 - <module>() - Predicting document 282...
2023-01-25 19:54:37,561 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <company_name>
Date of Receipt: <date>
Address of Company: <company_address>
Total: <total>
You must enter the full company name and address!

<|Stop key|>

Date

Name

Date

Address

Total

Total

1,200.00

1

1,200.00

0.00

0.00

1,200.00

1

1,200.00

0.00

0.00

1,200.00
2023-01-25 19:54:37,561 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:37,562 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:37,562 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <company_name>

2023-01-25 19:54:37,562 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <company_name>
2023-01-25 19:54:37,562 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:37,562 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <date>

2023-01-25 19:54:37,562 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <date>
2023-01-25 19:54:37,563 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:37,563 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <company_address>

2023-01-25 19:54:37,563 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <company_address>
2023-01-25 19:54:37,563 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:37,563 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <total>
You must enter the full company name and address!

<|Stop key|>

Date

Name

Date

Address

Total

Total

1,200.00

1

1,200.00

0.00

0.00

1,200.00

1

1,200.00

0.00

0.00

1,200.00
2023-01-25 19:54:37,563 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <total> You must enter the full company name and address! <|Stop key|> Date Name Date Address Total Total 1,200.00 1 1,200.00 0.00 0.00 1,200.00 1 1,200.00 0.00 0.00 1,200.00
2023-01-25 19:54:37,564 - __main__ - INFO - 96 - <module>() - Final prediction for document 282: {'company': '<company_name>', 'date': '<date>', 'address': '<company_address>', 'total': '<total> You must enter the full company name and address! <|Stop key|> Date Name Date Address Total Total 1,200.00 1 1,200.00 0.00 0.00 1,200.00 1 1,200.00 0.00 0.00 1,200.00'}
2023-01-25 19:54:37,564 - __main__ - INFO - 92 - <module>() - Predicting document 283...
2023-01-25 19:54:40,128 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:54:40,128 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:40,129 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:40,129 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:54:40,129 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:54:40,129 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:40,129 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:54:40,130 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:54:40,130 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:40,130 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:54:40,130 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:54:40,130 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:40,131 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:54:40,131 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:54:40,131 - __main__ - INFO - 96 - <module>() - Final prediction for document 283: {}
2023-01-25 19:54:40,132 - __main__ - INFO - 92 - <module>() - Predicting document 284...
2023-01-25 19:54:47,081 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 2015-10-28 08:45:59
Address of Company: null
Total: 10

A:

This is assuming you are using regex101.com as an example and the fields you are looking for will have the same pattern as in your example. If that is the case you can use the following regex pattern
(?:[^:]+)(\s+[^:]+:)(\s+null)

and replace it with $1 $2 $3
Demo
If the spaces between the fields will vary, use the following
(?:[^:]+:[^:
2023-01-25 19:54:47,083 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:47,083 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:47,084 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:54:47,084 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:54:47,084 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:47,084 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2015-10-28 08:45:59

2023-01-25 19:54:47,084 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2015-10-28 08:45:59
2023-01-25 19:54:47,084 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:47,084 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:54:47,085 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:54:47,085 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:47,085 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10

A:

This is assuming you are using regex101.com as an example and the fields you are looking for will have the same pattern as in your example. If that is the case you can use the following regex pattern
(?:[^:]+)(\s+[^:]+:)(\s+null)

and replace it with $1 $2 $3
Demo
If the spaces between the fields will vary, use the following
(?:[^:]+:[^:
2023-01-25 19:54:47,085 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10 A: This is assuming you are using regex101.com as an example and the fields you are looking for will have the same pattern as in your example. If that is the case you can use the following regex pattern (?:[^:]+)(\s+[^:]+:)(\s+null) and replace it with $1 $2 $3 Demo If the spaces between the fields will vary, use the following (?:[^:]+:[^:
2023-01-25 19:54:47,085 - __main__ - INFO - 96 - <module>() - Final prediction for document 284: {'date': '2015-10-28 08:45:59', 'total': '10 A: This is assuming you are using regex101.com as an example and the fields you are looking for will have the same pattern as in your example. If that is the case you can use the following regex pattern (?:[^:]+)(\\s+[^:]+:)(\\s+null) and replace it with $1 $2 $3 Demo If the spaces between the fields will vary, use the following (?:[^:]+:[^:'}
2023-01-25 19:54:47,088 - __main__ - INFO - 92 - <module>() - Predicting document 285...
2023-01-25 19:54:52,699 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TBROS Bhd
Date of Receipt: 3 Mar 18
Address of Company: Lot G112, Batai City, Johor
Total: SDR $271.07
Total with GST: SDR $271.07
Total without GST: $271.07
If you need any assistance in finding a record, feel free to contact us.

This data may be freely used as long as credit and link to this site are properly attributed.
2023-01-25 19:54:52,701 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:52,701 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:52,702 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TBROS Bhd

2023-01-25 19:54:52,702 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TBROS Bhd
2023-01-25 19:54:52,702 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:52,702 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3 Mar 18

2023-01-25 19:54:52,703 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3 Mar 18
2023-01-25 19:54:52,703 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:52,703 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Lot G112, Batai City, Johor

2023-01-25 19:54:52,703 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Lot G112, Batai City, Johor
2023-01-25 19:54:52,703 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:52,703 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SDR $271.07
Total with GST: SDR $271.07
Total without GST: $271.07
If you need any assistance in finding a record, feel free to contact us.

This data may be freely used as long as credit and link to this site are properly attributed.
2023-01-25 19:54:52,704 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SDR $271.07 Total with GST: SDR $271.07 Total without GST: $271.07 If you need any assistance in finding a record, feel free to contact us. This data may be freely used as long as credit and link to this site are properly attributed.
2023-01-25 19:54:52,704 - __main__ - INFO - 96 - <module>() - Final prediction for document 285: {'company': 'TBROS Bhd', 'date': '3 Mar 18', 'address': 'Lot G112, Batai City, Johor', 'total': 'SDR $271.07 Total with GST: SDR $271.07 Total without GST: $271.07 If you need any assistance in finding a record, feel free to contact us. This data may be freely used as long as credit and link to this site are properly attributed.'}
2023-01-25 19:54:52,707 - __main__ - INFO - 92 - <module>() - Predicting document 286...
2023-01-25 19:54:59,460 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  00013
Date of Receipt: 21-04-2018 16:10:30
Address of Company: ZIP CODE: 94536
Total: <|stop key|>

Expected Output
Company Name | Date of Receipt | Address of Company | Total
00013        | 21-04-2018 16:10 | ZIP CODE: 94536  | 4999

A:

Since we know the data types in advance, it is simple to read the values from file.
The following is the sample data used in the program.
Sample data
Document set in the
2023-01-25 19:54:59,462 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:54:59,462 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:54:59,462 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  00013

2023-01-25 19:54:59,463 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 00013
2023-01-25 19:54:59,463 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:54:59,463 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21-04-2018 16:10:30

2023-01-25 19:54:59,463 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21-04-2018 16:10:30
2023-01-25 19:54:59,463 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:54:59,463 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ZIP CODE: 94536

2023-01-25 19:54:59,463 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ZIP CODE: 94536
2023-01-25 19:54:59,464 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:54:59,464 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|>

Expected Output
Company Name | Date of Receipt | Address of Company | Total
00013        | 21-04-2018 16:10 | ZIP CODE: 94536  | 4999

A:

Since we know the data types in advance, it is simple to read the values from file.
The following is the sample data used in the program.
Sample data
Document set in the
2023-01-25 19:54:59,464 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> Expected Output Company Name | Date of Receipt | Address of Company | Total 00013    | 21-04-2018 16:10 | ZIP CODE: 94536 | 4999 A: Since we know the data types in advance, it is simple to read the values from file. The following is the sample data used in the program. Sample data Document set in the
2023-01-25 19:54:59,464 - __main__ - INFO - 96 - <module>() - Final prediction for document 286: {'company': '00013', 'date': '21-04-2018 16:10:30', 'address': 'ZIP CODE: 94536', 'total': '<|stop key|> Expected Output Company Name | Date of Receipt | Address of Company | Total 00013    | 21-04-2018 16:10 | ZIP CODE: 94536 | 4999 A: Since we know the data types in advance, it is simple to read the values from file. The following is the sample data used in the program. Sample data Document set in the'}
2023-01-25 19:54:59,467 - __main__ - INFO - 92 - <module>() - Predicting document 287...
2023-01-25 19:55:03,370 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date Received
Address of Company: Address of Company
Total: Total

If there are any other fields which are not listed, select "other" in the "Type of data" and enter their key value.


2023-01-25 19:55:03,370 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:03,370 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:03,370 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:55:03,370 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:55:03,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:03,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date Received

2023-01-25 19:55:03,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date Received
2023-01-25 19:55:03,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:03,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:55:03,371 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:55:03,371 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:03,371 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

If there are any other fields which are not listed, select "other" in the "Type of data" and enter their key value.


2023-01-25 19:55:03,372 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total If there are any other fields which are not listed, select "other" in the "Type of data" and enter their key value.
2023-01-25 19:55:03,372 - __main__ - INFO - 96 - <module>() - Final prediction for document 287: {'company': 'Company Name', 'date': 'Date Received', 'address': 'Address of Company', 'total': 'Total If there are any other fields which are not listed, select "other" in the "Type of data" and enter their key value.'}
2023-01-25 19:55:03,372 - __main__ - INFO - 92 - <module>() - Predicting document 288...
2023-01-25 19:55:08,324 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total

Write a program or function that reads an input text file with one of the following formats.

Each line of the file is formatted as: <Company Name> <Date of Receipt> <Address of Company> <Total>. The output is formatted in the following format: <Company Name> <date>.
2023-01-25 19:55:08,325 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:08,325 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:08,325 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:55:08,326 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:55:08,326 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:08,326 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:55:08,327 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:55:08,327 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:08,327 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:55:08,327 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:55:08,328 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:08,328 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

Write a program or function that reads an input text file with one of the following formats.

Each line of the file is formatted as: <Company Name> <Date of Receipt> <Address of Company> <Total>. The output is formatted in the following format: <Company Name> <date>.
2023-01-25 19:55:08,328 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Write a program or function that reads an input text file with one of the following formats. Each line of the file is formatted as: <Company Name> <Date of Receipt> <Address of Company> <Total>. The output is formatted in the following format: <Company Name> <date>.
2023-01-25 19:55:08,328 - __main__ - INFO - 96 - <module>() - Final prediction for document 288: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Write a program or function that reads an input text file with one of the following formats. Each line of the file is formatted as: <Company Name> <Date of Receipt> <Address of Company> <Total>. The output is formatted in the following format: <Company Name> <date>.'}
2023-01-25 19:55:08,330 - __main__ - INFO - 92 - <module>() - Predicting document 289...
2023-01-25 19:55:09,782 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:55:09,783 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:09,783 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:09,783 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:09,784 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:09,784 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:09,784 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:09,784 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:09,785 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:09,785 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:09,785 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:09,786 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:09,786 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:55:09,786 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:09,786 - __main__ - INFO - 96 - <module>() - Final prediction for document 289: {}
2023-01-25 19:55:09,788 - __main__ - INFO - 92 - <module>() - Predicting document 290...
2023-01-25 19:55:12,616 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Nissan", "02-03-2018", "Sofra, Yogyakarta",
Address of Company: "Togogebang, Yogyakarta"

2023-01-25 19:55:12,617 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:12,617 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:12,617 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Nissan", "02-03-2018", "Sofra, Yogyakarta",

2023-01-25 19:55:12,618 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "Nissan", "02-03-2018", "Sofra, Yogyakarta",
2023-01-25 19:55:12,618 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:12,618 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:12,618 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Togogebang, Yogyakarta"

2023-01-25 19:55:12,619 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Togogebang, Yogyakarta
2023-01-25 19:55:12,619 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:12,619 - __main__ - INFO - 96 - <module>() - Final prediction for document 290: {'company': '"Nissan", "02-03-2018", "Sofra, Yogyakarta",', 'address': 'Togogebang, Yogyakarta'}
2023-01-25 19:55:12,621 - __main__ - INFO - 92 - <module>() - Predicting document 291...
2023-01-25 19:55:19,861 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  (e.g.: "Company A")
Date of Receipt: "2018-12-19"
Address of Company: (e.g.: "123 New Street, London")
Total: "6"

Output should be:

Company A
12-19-2018
123 New Street, London
6

This is code-golf, so the shortest solution in bytes wins.

A:

MATL, 8 bytes
8 bytes is very hard for me, so I'm satisfied with my first solution which is based on this answer.
!A1X:
2023-01-25 19:55:19,863 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:19,863 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:19,864 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (e.g.: "Company A")

2023-01-25 19:55:19,864 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (e.g.: "Company A")
2023-01-25 19:55:19,864 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:19,865 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "2018-12-19"

2023-01-25 19:55:19,865 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-12-19
2023-01-25 19:55:19,865 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:19,866 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (e.g.: "123 New Street, London")

2023-01-25 19:55:19,866 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (e.g.: "123 New Street, London")
2023-01-25 19:55:19,866 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:19,867 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "6"

Output should be:

Company A
12-19-2018
123 New Street, London
6

This is code-golf, so the shortest solution in bytes wins.

A:

MATL, 8 bytes
8 bytes is very hard for me, so I'm satisfied with my first solution which is based on this answer.
!A1X:
2023-01-25 19:55:19,867 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "6" Output should be: Company A 12-19-2018 123 New Street, London 6 This is code-golf, so the shortest solution in bytes wins. A: MATL, 8 bytes 8 bytes is very hard for me, so I'm satisfied with my first solution which is based on this answer.  !A1X:
2023-01-25 19:55:19,867 - __main__ - INFO - 96 - <module>() - Final prediction for document 291: {'company': '(e.g.: "Company A")', 'date': '2018-12-19', 'address': '(e.g.: "123 New Street, London")', 'total': '"6" Output should be: Company A 12-19-2018 123 New Street, London 6 This is code-golf, so the shortest solution in bytes wins. A: MATL, 8 bytes 8 bytes is very hard for me, so I\'m satisfied with my first solution which is based on this answer.  !A1X:'}
2023-01-25 19:55:19,869 - __main__ - INFO - 92 - <module>() - Predicting document 292...
2023-01-25 19:55:27,199 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BANK MULTIRACIAL SDN BHD
D: 16-JUL-17
Address of Company: SENARAI,JELAPA, SABAH
Total: $2,310,000.00
L: 12-JUL-17

2. Extract the following fields from the document

Key: Value
Company Name: BENJAMIN OIL AND GAS SDN BHD
D: 12-APR-18
Address of Company: JALAN KELEDIWAN,JENIN, TELKOMOR
Total:
2023-01-25 19:55:27,201 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:27,202 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:27,202 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BANK MULTIRACIAL SDN BHD
D: 16-JUL-17

2023-01-25 19:55:27,202 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BANK MULTIRACIAL SDN BHD D: 16-JUL-17
2023-01-25 19:55:27,202 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:27,202 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:27,202 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SENARAI,JELAPA, SABAH

2023-01-25 19:55:27,203 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SENARAI,JELAPA, SABAH
2023-01-25 19:55:27,203 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:27,203 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  $2,310,000.00
L: 12-JUL-17

2. Extract the following fields from the document

Key: Value
Company Name: BENJAMIN OIL AND GAS SDN BHD
D: 12-APR-18
Address of Company: JALAN KELEDIWAN,JENIN, TELKOMOR

2023-01-25 19:55:27,203 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: $2,310,000.00 L: 12-JUL-17 2. Extract the following fields from the document Key: Value Company Name: BENJAMIN OIL AND GAS SDN BHD D: 12-APR-18 Address of Company: JALAN KELEDIWAN,JENIN, TELKOMOR
2023-01-25 19:55:27,203 - __main__ - INFO - 96 - <module>() - Final prediction for document 292: {'company': 'BANK MULTIRACIAL SDN BHD D: 16-JUL-17', 'address': 'SENARAI,JELAPA, SABAH', 'total': '$2,310,000.00 L: 12-JUL-17 2. Extract the following fields from the document Key: Value Company Name: BENJAMIN OIL AND GAS SDN BHD D: 12-APR-18 Address of Company: JALAN KELEDIWAN,JENIN, TELKOMOR'}
2023-01-25 19:55:27,205 - __main__ - INFO - 92 - <module>() - Predicting document 293...
2023-01-25 19:55:29,969 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:55:29,970 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:29,970 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:29,970 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:29,971 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:29,971 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:29,971 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:29,972 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:29,972 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:29,972 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:29,972 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:29,973 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:29,973 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:55:29,973 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: If you can't find a key-value pair in the document set the value to "null".
2023-01-25 19:55:29,973 - __main__ - INFO - 96 - <module>() - Final prediction for document 293: {'total': 'If you can\'t find a key-value pair in the document set the value to "null".'}
2023-01-25 19:55:29,975 - __main__ - INFO - 92 - <module>() - Predicting document 294...
2023-01-25 19:55:37,869 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC
Date of Receipt: 23/04/2015
Address of Company: ADE
Total: 30.00

Expected output
Company Name: ABC
Date of Receipt: 23/04/2015
Address of Company: ADE
Total: 30.00

A:

What a challenge!
This question appears to be one where regexes will be your best friend.
Below is a script that uses a regex to parse the PDF document and grab the data you're looking for.
I had to make a few assumptions to make this work. For example, I assumed you're looking
2023-01-25 19:55:37,870 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:37,870 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:37,870 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC

2023-01-25 19:55:37,871 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC
2023-01-25 19:55:37,871 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:37,871 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23/04/2015

2023-01-25 19:55:37,871 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23/04/2015
2023-01-25 19:55:37,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:37,872 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ADE

2023-01-25 19:55:37,872 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ADE
2023-01-25 19:55:37,872 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:37,873 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30.00

Expected output
Company Name: ABC
Date of Receipt: 23/04/2015
Address of Company: ADE

2023-01-25 19:55:37,873 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30.00 Expected output Company Name: ABC Date of Receipt: 23/04/2015 Address of Company: ADE
2023-01-25 19:55:37,873 - __main__ - INFO - 96 - <module>() - Final prediction for document 294: {'company': 'ABC', 'date': '23/04/2015', 'address': 'ADE', 'total': '30.00 Expected output Company Name: ABC Date of Receipt: 23/04/2015 Address of Company: ADE'}
2023-01-25 19:55:37,875 - __main__ - INFO - 92 - <module>() - Predicting document 295...
2023-01-25 19:55:45,226 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "Your Company Name here"
Date of Receipt: "22/09/2016"
Address of Company: "Your Address"
Total: "123.45"

Extract this value and store it as variable 'amount'.

The document contains a line that says:
"Amount
Tax Amount: RM3.50
SR: 2.00"
Use this line to get the tax amount. It is a percentage of the amount. For example:
10.00 (which is an amount) multiplied by 2 is 20.00, which is 2% of 10.00. This
2023-01-25 19:55:45,227 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:45,227 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:45,228 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Your Company Name here"

2023-01-25 19:55:45,228 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Your Company Name here
2023-01-25 19:55:45,229 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:45,229 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "22/09/2016"

2023-01-25 19:55:45,229 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22/09/2016
2023-01-25 19:55:45,229 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:45,230 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "Your Address"

2023-01-25 19:55:45,230 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Your Address
2023-01-25 19:55:45,231 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:45,231 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "123.45"

Extract this value and store it as variable 'amount'.

The document contains a line that says:
"Amount
Tax Amount: RM3.50
SR: 2.00"
Use this line to get the tax amount. It is a percentage of the amount. For example:
10.00 (which is an amount) multiplied by 2 is 20.00, which is 2% of 10.00. This
2023-01-25 19:55:45,231 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "123.45" Extract this value and store it as variable 'amount'. The document contains a line that says: "Amount Tax Amount: RM3.50 SR: 2.00" Use this line to get the tax amount. It is a percentage of the amount. For example: 10.00 (which is an amount) multiplied by 2 is 20.00, which is 2% of 10.00. This
2023-01-25 19:55:45,231 - __main__ - INFO - 96 - <module>() - Final prediction for document 295: {'company': 'Your Company Name here', 'date': '22/09/2016', 'address': 'Your Address', 'total': '"123.45" Extract this value and store it as variable \'amount\'. The document contains a line that says: "Amount Tax Amount: RM3.50 SR: 2.00" Use this line to get the tax amount. It is a percentage of the amount. For example: 10.00 (which is an amount) multiplied by 2 is 20.00, which is 2% of 10.00. This'}
2023-01-25 19:55:45,233 - __main__ - INFO - 92 - <module>() - Predicting document 296...
2023-01-25 19:55:52,531 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

Use this page to display a table of data from the document.

Notes on extracted data:
This may be done up to N number of times with different parameters.

Data can be used in any manner. This data does not need to be complete, it only need to be correct.

Sample Data is not here.

This data is not provided here, it needs to be extracted from the document. You may use the sample data to understand this concept.

The values (Keys and Total) are provided here for re
2023-01-25 19:55:52,532 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:52,532 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:52,532 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:52,532 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:52,532 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:52,532 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:52,532 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:52,532 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:52,533 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:55:52,533 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:55:52,533 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:52,533 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Use this page to display a table of data from the document.

Notes on extracted data:
This may be done up to N number of times with different parameters.

Data can be used in any manner. This data does not need to be complete, it only need to be correct.

Sample Data is not here.

This data is not provided here, it needs to be extracted from the document. You may use the sample data to understand this concept.

The values (Keys and Total) are provided here for re
2023-01-25 19:55:52,533 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Use this page to display a table of data from the document. Notes on extracted data: This may be done up to N number of times with different parameters. Data can be used in any manner. This data does not need to be complete, it only need to be correct. Sample Data is not here. This data is not provided here, it needs to be extracted from the document. You may use the sample data to understand this concept. The values (Keys and Total) are provided here for re
2023-01-25 19:55:52,533 - __main__ - INFO - 96 - <module>() - Final prediction for document 296: {'total': 'Use this page to display a table of data from the document. Notes on extracted data: This may be done up to N number of times with different parameters. Data can be used in any manner. This data does not need to be complete, it only need to be correct. Sample Data is not here. This data is not provided here, it needs to be extracted from the document. You may use the sample data to understand this concept. The values (Keys and Total) are provided here for re'}
2023-01-25 19:55:52,534 - __main__ - INFO - 92 - <module>() - Predicting document 297...
2023-01-25 19:55:59,505 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Rijal Muzakkar Berhad
Date of Receipt: 08/09/2016
Address of Company:
Jalan SS 17/3, Taman Tengah,
47000 Kajang, Selangor
(Near to Kajang LRT Station)
Total: RM 15.93

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name
2023-01-25 19:55:59,506 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:55:59,507 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:55:59,507 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Rijal Muzakkar Berhad

2023-01-25 19:55:59,508 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Rijal Muzakkar Berhad
2023-01-25 19:55:59,508 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:55:59,508 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  08/09/2016

2023-01-25 19:55:59,509 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 08/09/2016
2023-01-25 19:55:59,509 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:55:59,509 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Jalan SS 17/3, Taman Tengah,
47000 Kajang, Selangor
(Near to Kajang LRT Station)

2023-01-25 19:55:59,509 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan SS 17/3, Taman Tengah, 47000 Kajang, Selangor (Near to Kajang LRT Station)
2023-01-25 19:55:59,510 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:55:59,510 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 15.93

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null".

Key: Value
Company Name
2023-01-25 19:55:59,511 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 15.93 Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can't find a key-value pair in the document set the value to "null". Key: Value Company Name
2023-01-25 19:55:59,511 - __main__ - INFO - 96 - <module>() - Final prediction for document 297: {'company': 'Rijal Muzakkar Berhad', 'date': '08/09/2016', 'address': 'Jalan SS 17/3, Taman Tengah, 47000 Kajang, Selangor (Near to Kajang LRT Station)', 'total': 'RM 15.93 Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If you can\'t find a key-value pair in the document set the value to "null". Key: Value Company Name'}
2023-01-25 19:55:59,512 - __main__ - INFO - 92 - <module>() - Predicting document 298...
2023-01-25 19:56:02,659 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Ubiq
Date of Receipt: 19 Mar 2018
Address of Company: Ubiq Co. Ltd
Total: 2,000
2023-01-25 19:56:02,659 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:02,659 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:02,660 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Ubiq

2023-01-25 19:56:02,660 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Ubiq
2023-01-25 19:56:02,660 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:02,661 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19 Mar 2018

2023-01-25 19:56:02,661 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19 Mar 2018
2023-01-25 19:56:02,661 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:02,661 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Ubiq Co. Ltd

2023-01-25 19:56:02,661 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Ubiq Co. Ltd
2023-01-25 19:56:02,662 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:02,662 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2,000
2023-01-25 19:56:02,662 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2,000
2023-01-25 19:56:02,662 - __main__ - INFO - 96 - <module>() - Final prediction for document 298: {'company': 'Ubiq', 'date': '19 Mar 2018', 'address': 'Ubiq Co. Ltd', 'total': '2,000'}
2023-01-25 19:56:02,664 - __main__ - INFO - 92 - <module>() - Predicting document 299...
2023-01-25 19:56:09,425 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Diners Club
Date of Receipt: 23/2/2018
Address of Company: 13
Total: RM110.00
Serves: 3
Qty of Serve:1
Amount of Serves: 0.00
Qty of Amount: 0.00

Key: Value
Company Name: Diners Club
Date of Receipt: 23/2/2018
Address of Company: 13
Total: RM110.00
Serves: 3
Qty of Serve:1
Amount of Serves: 0.00

Key: Value
Company Name: Diners Club

2023-01-25 19:56:09,426 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:09,427 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:09,427 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Diners Club

2023-01-25 19:56:09,427 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Diners Club
2023-01-25 19:56:09,428 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:09,428 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  23/2/2018

2023-01-25 19:56:09,428 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 23/2/2018
2023-01-25 19:56:09,428 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:09,429 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13

2023-01-25 19:56:09,429 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13
2023-01-25 19:56:09,429 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:09,429 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM110.00
Serves: 3
Qty of Serve:1
Amount of Serves: 0.00
Qty of Amount: 0.00

Key: Value
Company Name: Diners Club
Date of Receipt: 23/2/2018
Address of Company: 13

2023-01-25 19:56:09,430 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM110.00 Serves: 3 Qty of Serve:1 Amount of Serves: 0.00 Qty of Amount: 0.00 Key: Value Company Name: Diners Club Date of Receipt: 23/2/2018 Address of Company: 13
2023-01-25 19:56:09,430 - __main__ - INFO - 96 - <module>() - Final prediction for document 299: {'company': 'Diners Club', 'date': '23/2/2018', 'address': '13', 'total': 'RM110.00 Serves: 3 Qty of Serve:1 Amount of Serves: 0.00 Qty of Amount: 0.00 Key: Value Company Name: Diners Club Date of Receipt: 23/2/2018 Address of Company: 13'}
2023-01-25 19:56:09,432 - __main__ - INFO - 92 - <module>() - Predicting document 300...
2023-01-25 19:56:16,250 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The Company Name set in Section 4, Form 4
Date of Receipt: The date received is in YYYY/MM/DD Format
Address of Company: the Address of the Company, as stated on the sales invoice
Total: The total should be in a format of "00000,00".

Now that we know what a sales invoice is. We can now extract it. There are a few things that we need to find first.
First, you will need to identify the position of the company name. As we know, the document has two rows that we need to extract and we need to find the position
2023-01-25 19:56:16,252 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:16,253 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:16,253 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The Company Name set in Section 4, Form 4

2023-01-25 19:56:16,253 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The Company Name set in Section 4, Form 4
2023-01-25 19:56:16,254 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:16,254 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date received is in YYYY/MM/DD Format

2023-01-25 19:56:16,254 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date received is in YYYY/MM/DD Format
2023-01-25 19:56:16,254 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:16,255 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  the Address of the Company, as stated on the sales invoice

2023-01-25 19:56:16,255 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: the Address of the Company, as stated on the sales invoice
2023-01-25 19:56:16,255 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:16,256 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The total should be in a format of "00000,00".

Now that we know what a sales invoice is. We can now extract it. There are a few things that we need to find first.
First, you will need to identify the position of the company name. As we know, the document has two rows that we need to extract and we need to find the position
2023-01-25 19:56:16,256 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The total should be in a format of "00000,00". Now that we know what a sales invoice is. We can now extract it. There are a few things that we need to find first. First, you will need to identify the position of the company name. As we know, the document has two rows that we need to extract and we need to find the position
2023-01-25 19:56:16,256 - __main__ - INFO - 96 - <module>() - Final prediction for document 300: {'company': 'The Company Name set in Section 4, Form 4', 'date': 'The date received is in YYYY/MM/DD Format', 'address': 'the Address of the Company, as stated on the sales invoice', 'total': 'The total should be in a format of "00000,00". Now that we know what a sales invoice is. We can now extract it. There are a few things that we need to find first. First, you will need to identify the position of the company name. As we know, the document has two rows that we need to extract and we need to find the position'}
2023-01-25 19:56:16,258 - __main__ - INFO - 92 - <module>() - Predicting document 301...
2023-01-25 19:56:23,177 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  BHD
Date of Receipt: 21/03/2018
Address of Company: 117, 1st floor,
Bank Bhd, Jalan Raja Chulan,
Kuala Lumpur,
Malaysia
Total: -10
| <|stop key|>
| <|stop key|>
| <|stop key|>

A list of the values you want to remove (remove the "<|stop key|>" and the "| <|stop key|>" in the sample document above) can be found in the document above.

Key: Value

2023-01-25 19:56:23,178 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:23,178 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:23,178 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  BHD

2023-01-25 19:56:23,178 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: BHD
2023-01-25 19:56:23,178 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:23,178 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/03/2018

2023-01-25 19:56:23,178 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/03/2018
2023-01-25 19:56:23,178 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:23,178 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  117, 1st floor,
Bank Bhd, Jalan Raja Chulan,
Kuala Lumpur,
Malaysia

2023-01-25 19:56:23,179 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 117, 1st floor, Bank Bhd, Jalan Raja Chulan, Kuala Lumpur, Malaysia
2023-01-25 19:56:23,179 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:23,179 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  -10
| <|stop key|>
| <|stop key|>
| <|stop key|>

A list of the values you want to remove (remove the "<|stop key|>" and the "| <|stop key|>" in the sample document above) can be found in the document above.

Key: Value

2023-01-25 19:56:23,179 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: -10 | <|stop key|> | <|stop key|> | <|stop key|> A list of the values you want to remove (remove the "<|stop key|>" and the "| <|stop key|>" in the sample document above) can be found in the document above. Key: Value
2023-01-25 19:56:23,179 - __main__ - INFO - 96 - <module>() - Final prediction for document 301: {'company': 'BHD', 'date': '21/03/2018', 'address': '117, 1st floor, Bank Bhd, Jalan Raja Chulan, Kuala Lumpur, Malaysia', 'total': '-10 | <|stop key|> | <|stop key|> | <|stop key|> A list of the values you want to remove (remove the "<|stop key|>" and the "| <|stop key|>" in the sample document above) can be found in the document above. Key: Value'}
2023-01-25 19:56:23,180 - __main__ - INFO - 92 - <module>() - Predicting document 302...
2023-01-25 19:56:30,279 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ABC Ltd
Date of Receipt: 12/12/2007
Address of Company: XYZ street, Australia
Total: 0
Address of company: <null>
No. of items: 8
Total incl. GST: 1274.19
<|end of test data|>

I want to create a test case that tests that the value for address of company is actually present and not null. I have created a test case, but the test case is failing and i have no idea why it is failing. Can someone please help me with this? Thanks.

A:

If the input
2023-01-25 19:56:30,280 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:30,281 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:30,281 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ABC Ltd

2023-01-25 19:56:30,282 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ABC Ltd
2023-01-25 19:56:30,282 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:30,282 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12/12/2007

2023-01-25 19:56:30,283 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12/12/2007
2023-01-25 19:56:30,283 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:30,283 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XYZ street, Australia

2023-01-25 19:56:30,284 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XYZ street, Australia
2023-01-25 19:56:30,284 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:30,284 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  0
Address of company: <null>
No. of items: 8
Total incl. GST: 1274.19
<|end of test data|>

I want to create a test case that tests that the value for address of company is actually present and not null. I have created a test case, but the test case is failing and i have no idea why it is failing. Can someone please help me with this? Thanks.

A:

If the input
2023-01-25 19:56:30,284 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0 Address of company: <null> No. of items: 8 Total incl. GST: 1274.19 <|end of test data|> I want to create a test case that tests that the value for address of company is actually present and not null. I have created a test case, but the test case is failing and i have no idea why it is failing. Can someone please help me with this? Thanks. A: If the input
2023-01-25 19:56:30,285 - __main__ - INFO - 96 - <module>() - Final prediction for document 302: {'company': 'ABC Ltd', 'date': '12/12/2007', 'address': 'XYZ street, Australia', 'total': '0 Address of company: <null> No. of items: 8 Total incl. GST: 1274.19 <|end of test data|> I want to create a test case that tests that the value for address of company is actually present and not null. I have created a test case, but the test case is failing and i have no idea why it is failing. Can someone please help me with this? Thanks. A: If the input'}
2023-01-25 19:56:30,287 - __main__ - INFO - 92 - <module>() - Predicting document 303...
2023-01-25 19:56:37,133 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
|<STOP KEY>|:

(1)
(2)
(3)
(4)
(5)
(6)

(7)

(8)

(9)

(10)

(11)

(12)

(13)

(14)

(15)

(16)

(17)

(18)

(19)

(20)

(21)

(22)


2023-01-25 19:56:37,134 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:37,135 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:37,135 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:37,136 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:37,136 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:37,136 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:37,137 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:37,137 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:37,137 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:37,138 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:37,138 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:37,138 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
|<STOP KEY>|:

(1)
(2)
(3)
(4)
(5)
(6)

(7)

(8)

(9)

(10)

(11)

(12)

(13)

(14)

(15)

(16)

(17)

(18)

(19)

(20)

(21)

(22)


2023-01-25 19:56:37,138 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: |<STOP KEY>|: (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15) (16) (17) (18) (19) (20) (21) (22)
2023-01-25 19:56:37,139 - __main__ - INFO - 96 - <module>() - Final prediction for document 303: {'total': '|<STOP KEY>|: (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) (14) (15) (16) (17) (18) (19) (20) (21) (22)'}
2023-01-25 19:56:37,140 - __main__ - INFO - 92 - <module>() - Predicting document 304...
2023-01-25 19:56:44,434 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: N/A
Address of Company: N/A
Total: N/A

Step 3
Save the script in a text file called test.js and place it in your project's "js" folder. For example, if your project's folder structure is "Projects/Test1/", the file should be placed in the "Projects/Test1/" directory.

Step 4
In the Visual Studio toolbar, choose "Build" > "Build Solution" to compile and run the script.

Step 5
A window will open and show the contents
2023-01-25 19:56:44,435 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:56:44,436 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:56:44,437 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:44,437 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

Step 3
Save the script in a text file called test.js and place it in your project's "js" folder. For example, if your project's folder structure is "Projects/Test1/", the file should be placed in the "Projects/Test1/" directory.

Step 4
In the Visual Studio toolbar, choose "Build" > "Build Solution" to compile and run the script.

Step 5
A window will open and show the contents
2023-01-25 19:56:44,437 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A Step 3 Save the script in a text file called test.js and place it in your project's "js" folder. For example, if your project's folder structure is "Projects/Test1/", the file should be placed in the "Projects/Test1/" directory. Step 4 In the Visual Studio toolbar, choose "Build" > "Build Solution" to compile and run the script. Step 5 A window will open and show the contents
2023-01-25 19:56:44,437 - __main__ - INFO - 96 - <module>() - Final prediction for document 304: {'company': 'N/A', 'date': 'N/A', 'address': 'N/A', 'total': 'N/A Step 3 Save the script in a text file called test.js and place it in your project\'s "js" folder. For example, if your project\'s folder structure is "Projects/Test1/", the file should be placed in the "Projects/Test1/" directory. Step 4 In the Visual Studio toolbar, choose "Build" > "Build Solution" to compile and run the script. Step 5 A window will open and show the contents'}
2023-01-25 19:56:44,438 - __main__ - INFO - 92 - <module>() - Predicting document 305...
2023-01-25 19:56:51,294 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

To download a zip-file of the document data as Excel or CSV please see below.

Code Block

using namespace std;
using namespace boost::filesystem;
using boost::filesystem::path;

// Parse a file-system path containing the documents into an instance of
// a vector<document>. The contents of the file-system
// should be like shown in the above examples.

Boost::filesystem::path p("Path to the documents");
vector<document> v;
if (
2023-01-25 19:56:51,294 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:51,295 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:51,295 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:51,295 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:51,295 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:51,295 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:51,295 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:51,295 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:51,295 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:56:51,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:56:51,296 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:51,296 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

To download a zip-file of the document data as Excel or CSV please see below.

Code Block

using namespace std;
using namespace boost::filesystem;
using boost::filesystem::path;

// Parse a file-system path containing the documents into an instance of
// a vector<document>. The contents of the file-system
// should be like shown in the above examples.

Boost::filesystem::path p("Path to the documents");
vector<document> v;
if (
2023-01-25 19:56:51,296 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: To download a zip-file of the document data as Excel or CSV please see below. Code Block using namespace std; using namespace boost::filesystem; using boost::filesystem::path; // Parse a file-system path containing the documents into an instance of // a vector<document>. The contents of the file-system // should be like shown in the above examples. Boost::filesystem::path p("Path to the documents"); vector<document> v; if (
2023-01-25 19:56:51,296 - __main__ - INFO - 96 - <module>() - Final prediction for document 305: {'total': 'To download a zip-file of the document data as Excel or CSV please see below. Code Block using namespace std; using namespace boost::filesystem; using boost::filesystem::path; // Parse a file-system path containing the documents into an instance of // a vector<document>. The contents of the file-system // should be like shown in the above examples. Boost::filesystem::path p("Path to the documents"); vector<document> v; if ('}
2023-01-25 19:56:51,297 - __main__ - INFO - 92 - <module>() - Predicting document 306...
2023-01-25 19:56:58,514 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <|company_name|>
Date of Receipt: <|date_of_receipt|>
Address of Company: <|address_of_company|>
Total: <|total_value|>
|endofdoc|

Step 9:
Send the message

<|send_it|>

to

<|company_name|>

by clicking

<|email_button|>

Example:
<|send_it|>
This message was sent by Bar Wang Rice@Permas Jaya on 1 April 2018 18:25:01
2023-01-25 19:56:58,515 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:56:58,515 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:56:58,516 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|company_name|>

2023-01-25 19:56:58,516 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|company_name|>
2023-01-25 19:56:58,516 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:56:58,516 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|date_of_receipt|>

2023-01-25 19:56:58,516 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|date_of_receipt|>
2023-01-25 19:56:58,517 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:56:58,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|address_of_company|>

2023-01-25 19:56:58,517 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|address_of_company|>
2023-01-25 19:56:58,517 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:56:58,517 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|total_value|>
|endofdoc|

Step 9:
Send the message

<|send_it|>

to

<|company_name|>

by clicking

<|email_button|>

Example:
<|send_it|>
This message was sent by Bar Wang Rice@Permas Jaya on 1 April 2018 18:25:01
2023-01-25 19:56:58,518 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|total_value|> |endofdoc| Step 9: Send the message <|send_it|> to <|company_name|> by clicking <|email_button|> Example: <|send_it|> This message was sent by Bar Wang Rice@Permas Jaya on 1 April 2018 18:25:01
2023-01-25 19:56:58,518 - __main__ - INFO - 96 - <module>() - Final prediction for document 306: {'company': '<|company_name|>', 'date': '<|date_of_receipt|>', 'address': '<|address_of_company|>', 'total': '<|total_value|> |endofdoc| Step 9: Send the message <|send_it|> to <|company_name|> by clicking <|email_button|> Example: <|send_it|> This message was sent by Bar Wang Rice@Permas Jaya on 1 April 2018 18:25:01'}
2023-01-25 19:56:58,519 - __main__ - INFO - 92 - <module>() - Predicting document 307...
2023-01-25 19:57:06,183 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name
Date of Receipt: Date of Receipt
Address of Company: Address of Company
Total: Total
Example:

YouTube :

(1) "http://www.youtube.com/watch?v=nDl3w9u8GjQ"
(2)

(1) "<audio controls><source src=http://www.youtube.com/watch?v=nDl3w9u8GjQ>"
(2) "</audio><script>var playerObj = document.getElementsByTagName('video')[0];
2023-01-25 19:57:06,184 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:06,184 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:06,184 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name

2023-01-25 19:57:06,184 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 19:57:06,185 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:06,185 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Date of Receipt

2023-01-25 19:57:06,185 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Date of Receipt
2023-01-25 19:57:06,185 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:06,185 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company

2023-01-25 19:57:06,185 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 19:57:06,186 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:06,186 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
Example:

YouTube :

(1) "http://www.youtube.com/watch?v=nDl3w9u8GjQ"
(2)

(1) "<audio controls><source src=http://www.youtube.com/watch?v=nDl3w9u8GjQ>"
(2) "</audio><script>var playerObj = document.getElementsByTagName('video')[0];
2023-01-25 19:57:06,186 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total Example: YouTube : (1) "http://www.youtube.com/watch?v=nDl3w9u8GjQ" (2) (1) "<audio controls><source src=http://www.youtube.com/watch?v=nDl3w9u8GjQ>" (2) "</audio><script>var playerObj = document.getElementsByTagName('video')[0];
2023-01-25 19:57:06,186 - __main__ - INFO - 96 - <module>() - Final prediction for document 307: {'company': 'Company Name', 'date': 'Date of Receipt', 'address': 'Address of Company', 'total': 'Total Example: YouTube : (1) "http://www.youtube.com/watch?v=nDl3w9u8GjQ" (2) (1) "<audio controls><source src=http://www.youtube.com/watch?v=nDl3w9u8GjQ>" (2) "</audio><script>var playerObj = document.getElementsByTagName(\'video\')[0];'}
2023-01-25 19:57:06,187 - __main__ - INFO - 92 - <module>() - Predicting document 308...
2023-01-25 19:57:08,031 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:57:08,032 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:08,033 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:08,034 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:08,034 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:08,034 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:08,035 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:08,035 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:08,035 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:08,035 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:08,036 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:08,036 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:08,036 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:57:08,036 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:08,037 - __main__ - INFO - 96 - <module>() - Final prediction for document 308: {}
2023-01-25 19:57:08,038 - __main__ - INFO - 92 - <module>() - Predicting document 309...
2023-01-25 19:57:14,948 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  VNKH
Date of Receipt: 19/06/2018 06:56:10 PM
Address of Company: No 4, Jalan Permas 10/5, Bandar Baru Permas Jaya, 81750, Johor Bahru, Johor
Total: <|stop key|> 152.90

What you have to do:

- Open a new document
- Create 2 columns "Company Name" and "Amount"
- In the first column type: VLOOKUP($B1, Company Name, $A1, TRUE())
- In the second column type:
2023-01-25 19:57:14,949 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:14,949 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:14,949 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  VNKH

2023-01-25 19:57:14,949 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: VNKH
2023-01-25 19:57:14,950 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:14,950 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  19/06/2018 06:56:10 PM

2023-01-25 19:57:14,950 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 19/06/2018 06:56:10 PM
2023-01-25 19:57:14,951 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:14,951 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  No 4, Jalan Permas 10/5, Bandar Baru Permas Jaya, 81750, Johor Bahru, Johor

2023-01-25 19:57:14,951 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: No 4, Jalan Permas 10/5, Bandar Baru Permas Jaya, 81750, Johor Bahru, Johor
2023-01-25 19:57:14,951 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:14,952 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <|stop key|> 152.90

What you have to do:

- Open a new document
- Create 2 columns "Company Name" and "Amount"
- In the first column type: VLOOKUP($B1, Company Name, $A1, TRUE())
- In the second column type:
2023-01-25 19:57:14,952 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <|stop key|> 152.90 What you have to do: - Open a new document - Create 2 columns "Company Name" and "Amount" - In the first column type: VLOOKUP($B1, Company Name, $A1, TRUE()) - In the second column type:
2023-01-25 19:57:14,952 - __main__ - INFO - 96 - <module>() - Final prediction for document 309: {'company': 'VNKH', 'date': '19/06/2018 06:56:10 PM', 'address': 'No 4, Jalan Permas 10/5, Bandar Baru Permas Jaya, 81750, Johor Bahru, Johor', 'total': '<|stop key|> 152.90 What you have to do: - Open a new document - Create 2 columns "Company Name" and "Amount" - In the first column type: VLOOKUP($B1, Company Name, $A1, TRUE()) - In the second column type:'}
2023-01-25 19:57:14,954 - __main__ - INFO - 92 - <module>() - Predicting document 310...
2023-01-25 19:57:22,012 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <company name>
Date of Receipt: < date of receipt>
Address of Company: <address>
Total: <sum of all items>
|<stop key>|:<stop value>

Receipts are printed on the day of receipt with GST 6%
If the date of receipt is not available then the receipt will be printed on the day that the invoice is generated.

"I was a bit worried about what to get my wife on Mothers Day but this gift certificate from The Hut Cafe is perfect! We had great food there last week and found the place to be quite interesting so
2023-01-25 19:57:22,013 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:22,013 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:22,014 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <company name>

2023-01-25 19:57:22,014 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <company name>
2023-01-25 19:57:22,014 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:22,014 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  < date of receipt>

2023-01-25 19:57:22,014 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: < date of receipt>
2023-01-25 19:57:22,014 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:22,015 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <address>

2023-01-25 19:57:22,015 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <address>
2023-01-25 19:57:22,015 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:22,015 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <sum of all items>
|<stop key>|:<stop value>

Receipts are printed on the day of receipt with GST 6%
If the date of receipt is not available then the receipt will be printed on the day that the invoice is generated.

"I was a bit worried about what to get my wife on Mothers Day but this gift certificate from The Hut Cafe is perfect! We had great food there last week and found the place to be quite interesting so
2023-01-25 19:57:22,015 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <sum of all items> |<stop key>|:<stop value> Receipts are printed on the day of receipt with GST 6% If the date of receipt is not available then the receipt will be printed on the day that the invoice is generated. "I was a bit worried about what to get my wife on Mothers Day but this gift certificate from The Hut Cafe is perfect! We had great food there last week and found the place to be quite interesting so
2023-01-25 19:57:22,015 - __main__ - INFO - 96 - <module>() - Final prediction for document 310: {'company': '<company name>', 'date': '< date of receipt>', 'address': '<address>', 'total': '<sum of all items> |<stop key>|:<stop value> Receipts are printed on the day of receipt with GST 6% If the date of receipt is not available then the receipt will be printed on the day that the invoice is generated. "I was a bit worried about what to get my wife on Mothers Day but this gift certificate from The Hut Cafe is perfect! We had great food there last week and found the place to be quite interesting so'}
2023-01-25 19:57:22,016 - __main__ - INFO - 92 - <module>() - Predicting document 311...
2023-01-25 19:57:24,372 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:57:24,373 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:24,374 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:24,374 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:24,374 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:24,375 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:24,375 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:24,375 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:24,376 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:24,376 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:24,376 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:24,377 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:24,377 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:57:24,377 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:24,377 - __main__ - INFO - 96 - <module>() - Final prediction for document 311: {}
2023-01-25 19:57:24,379 - __main__ - INFO - 92 - <module>() - Predicting document 312...
2023-01-25 19:57:31,331 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <value>
Date of Receipt: <value>
Address of Company: <value>
Total: <value>

Add your own comments for the keys. When you are done, click the search button.

Your search for

TOTAL

in

"Company Name"

,

"Date of Receipt"

,

"Address of Company"

,

"Total"

,

.

match

0

matches

Click the next button to see another page.

Total

Total

0
2023-01-25 19:57:31,332 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:31,332 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:31,332 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <value>

2023-01-25 19:57:31,332 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <value>
2023-01-25 19:57:31,333 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:31,333 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <value>

2023-01-25 19:57:31,333 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <value>
2023-01-25 19:57:31,333 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:31,334 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <value>

2023-01-25 19:57:31,334 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <value>
2023-01-25 19:57:31,334 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:31,334 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <value>

Add your own comments for the keys. When you are done, click the search button.

Your search for

TOTAL

in

"Company Name"

,

"Date of Receipt"

,

"Address of Company"

,

"Total"

,

.

match

0

matches

Click the next button to see another page.

Total

Total

0
2023-01-25 19:57:31,334 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <value> Add your own comments for the keys. When you are done, click the search button. Your search for TOTAL in "Company Name" , "Date of Receipt" , "Address of Company" , "Total" , . match 0 matches Click the next button to see another page. Total Total 0
2023-01-25 19:57:31,335 - __main__ - INFO - 96 - <module>() - Final prediction for document 312: {'company': '<value>', 'date': '<value>', 'address': '<value>', 'total': '<value> Add your own comments for the keys. When you are done, click the search button. Your search for TOTAL in "Company Name" , "Date of Receipt" , "Address of Company" , "Total" , . match 0 matches Click the next button to see another page. Total Total 0'}
2023-01-25 19:57:31,336 - __main__ - INFO - 92 - <module>() - Predicting document 313...
2023-01-25 19:57:33,934 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  N/A
Date of Receipt: N/A
Address of Company: N/A
Total:
2023-01-25 19:57:33,936 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:33,937 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:33,937 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:57:33,938 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:57:33,938 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:33,938 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:57:33,939 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:57:33,939 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:33,939 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  N/A

2023-01-25 19:57:33,939 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: N/A
2023-01-25 19:57:33,940 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:33,940 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:57:33,940 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:33,941 - __main__ - INFO - 96 - <module>() - Final prediction for document 313: {'company': 'N/A', 'date': 'N/A', 'address': 'N/A'}
2023-01-25 19:57:33,946 - __main__ - INFO - 92 - <module>() - Predicting document 314...
2023-01-25 19:57:35,518 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:57:35,519 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:35,520 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:35,520 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:35,520 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:35,521 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:35,521 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:35,522 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:35,522 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:35,523 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:57:35,523 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:35,523 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:35,524 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:57:35,524 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:57:35,524 - __main__ - INFO - 96 - <module>() - Final prediction for document 314: {}
2023-01-25 19:57:35,525 - __main__ - INFO - 92 - <module>() - Predicting document 315...
2023-01-25 19:57:37,906 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The name of the company.
Date of Receipt: The date of receipt.
Address of Company: The address of the company.
Total: The sum of amounts payable.
2023-01-25 19:57:37,907 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:37,907 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:37,908 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The name of the company.

2023-01-25 19:57:37,908 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The name of the company.
2023-01-25 19:57:37,908 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:37,908 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date of receipt.

2023-01-25 19:57:37,909 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date of receipt.
2023-01-25 19:57:37,909 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:37,909 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The address of the company.

2023-01-25 19:57:37,909 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The address of the company.
2023-01-25 19:57:37,909 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:37,910 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The sum of amounts payable.
2023-01-25 19:57:37,910 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The sum of amounts payable.
2023-01-25 19:57:37,910 - __main__ - INFO - 96 - <module>() - Final prediction for document 315: {'company': 'The name of the company.', 'date': 'The date of receipt.', 'address': 'The address of the company.', 'total': 'The sum of amounts payable.'}
2023-01-25 19:57:37,911 - __main__ - INFO - 92 - <module>() - Predicting document 316...
2023-01-25 19:57:45,680 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  "SDN.BORONG PINTAR"
Date of Receipt: "28-APR-2019 10:57:24"
Address of Company: "15, Jalan Haji Abdullah, Bandar Tasik Bandar UTM, Bandar Tasik Utama, 47000 Tanjung Pelepas, Perak Darul Ridzuan, Malaysia"
Total: "16.00"

How do I extract only values between "<|stop key|>" tags?

This is easy. Extract "<|stop key|>" and use "<|stop key|>" to get all
2023-01-25 19:57:45,681 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:45,681 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:45,682 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "SDN.BORONG PINTAR"

2023-01-25 19:57:45,682 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SDN.BORONG PINTAR
2023-01-25 19:57:45,682 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:45,683 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "28-APR-2019 10:57:24"

2023-01-25 19:57:45,683 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28-APR-2019 10:57:24
2023-01-25 19:57:45,683 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:45,683 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "15, Jalan Haji Abdullah, Bandar Tasik Bandar UTM, Bandar Tasik Utama, 47000 Tanjung Pelepas, Perak Darul Ridzuan, Malaysia"

2023-01-25 19:57:45,683 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15, Jalan Haji Abdullah, Bandar Tasik Bandar UTM, Bandar Tasik Utama, 47000 Tanjung Pelepas, Perak Darul Ridzuan, Malaysia
2023-01-25 19:57:45,684 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:45,684 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  "16.00"

How do I extract only values between "<|stop key|>" tags?

This is easy. Extract "<|stop key|>" and use "<|stop key|>" to get all
2023-01-25 19:57:45,684 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: "16.00" How do I extract only values between "<|stop key|>" tags? This is easy. Extract "<|stop key|>" and use "<|stop key|>" to get all
2023-01-25 19:57:45,684 - __main__ - INFO - 96 - <module>() - Final prediction for document 316: {'company': 'SDN.BORONG PINTAR', 'date': '28-APR-2019 10:57:24', 'address': '15, Jalan Haji Abdullah, Bandar Tasik Bandar UTM, Bandar Tasik Utama, 47000 Tanjung Pelepas, Perak Darul Ridzuan, Malaysia', 'total': '"16.00" How do I extract only values between "<|stop key|>" tags? This is easy. Extract "<|stop key|>" and use "<|stop key|>" to get all'}
2023-01-25 19:57:45,687 - __main__ - INFO - 92 - <module>() - Predicting document 317...
2023-01-25 19:57:52,950 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 09/10/2006
Address of Company: Jalan Puchong,Serdang
Total: RM9.90
3.3.1
Extract "Invoice No", "Invoice Date", "Date of Expiry" from the document above. If you can't find a key-value pair in the document set the value to "null".

3.3.2
Create a hash set containing the elements which are common in both documents above. For example: (Invoice No,Date of Expiry)

Key: Value
In
2023-01-25 19:57:52,952 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:57:52,952 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:57:52,952 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:57:52,952 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:57:52,952 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:57:52,953 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  09/10/2006

2023-01-25 19:57:52,953 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 09/10/2006
2023-01-25 19:57:52,953 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:57:52,953 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Puchong,Serdang

2023-01-25 19:57:52,953 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Puchong,Serdang
2023-01-25 19:57:52,953 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:57:52,953 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM9.90
3.3.1
Extract "Invoice No", "Invoice Date", "Date of Expiry" from the document above. If you can't find a key-value pair in the document set the value to "null".

3.3.2
Create a hash set containing the elements which are common in both documents above. For example: (Invoice No,Date of Expiry)

Key: Value
In
2023-01-25 19:57:52,954 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM9.90 3.3.1 Extract "Invoice No", "Invoice Date", "Date of Expiry" from the document above. If you can't find a key-value pair in the document set the value to "null". 3.3.2 Create a hash set containing the elements which are common in both documents above. For example: (Invoice No,Date of Expiry) Key: Value In
2023-01-25 19:57:52,954 - __main__ - INFO - 96 - <module>() - Final prediction for document 317: {'date': '09/10/2006', 'address': 'Jalan Puchong,Serdang', 'total': 'RM9.90 3.3.1 Extract "Invoice No", "Invoice Date", "Date of Expiry" from the document above. If you can\'t find a key-value pair in the document set the value to "null". 3.3.2 Create a hash set containing the elements which are common in both documents above. For example: (Invoice No,Date of Expiry) Key: Value In'}
2023-01-25 19:57:52,955 - __main__ - INFO - 92 - <module>() - Predicting document 318...
2023-01-25 19:58:00,544 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  null
Date of Receipt: 01-02-16
Address of Company: null
Total: RM 1.49

Now if you see the above document there is no key-value pair for Company Name. In my case the key value is null. Do not worry about blank spaces because this happens only if you copy it from Word. If you copy it from a scanned image it should not be empty. Now that is done let's create a variable for it.

var CompanyName = document.getElementByID("txtCompanyName").value;

You can check the value of your variable using console.
2023-01-25 19:58:00,545 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:00,546 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:00,546 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:58:00,546 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:58:00,547 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:00,547 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01-02-16

2023-01-25 19:58:00,547 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01-02-16
2023-01-25 19:58:00,547 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:00,548 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  null

2023-01-25 19:58:00,548 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: null
2023-01-25 19:58:00,548 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:00,549 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  RM 1.49

Now if you see the above document there is no key-value pair for Company Name. In my case the key value is null. Do not worry about blank spaces because this happens only if you copy it from Word. If you copy it from a scanned image it should not be empty. Now that is done let's create a variable for it.

var CompanyName = document.getElementByID("txtCompanyName").value;

You can check the value of your variable using console.
2023-01-25 19:58:00,549 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: RM 1.49 Now if you see the above document there is no key-value pair for Company Name. In my case the key value is null. Do not worry about blank spaces because this happens only if you copy it from Word. If you copy it from a scanned image it should not be empty. Now that is done let's create a variable for it. var CompanyName = document.getElementByID("txtCompanyName").value; You can check the value of your variable using console.
2023-01-25 19:58:00,549 - __main__ - INFO - 96 - <module>() - Final prediction for document 318: {'date': '01-02-16', 'total': 'RM 1.49 Now if you see the above document there is no key-value pair for Company Name. In my case the key value is null. Do not worry about blank spaces because this happens only if you copy it from Word. If you copy it from a scanned image it should not be empty. Now that is done let\'s create a variable for it. var CompanyName = document.getElementByID("txtCompanyName").value; You can check the value of your variable using console.'}
2023-01-25 19:58:00,551 - __main__ - INFO - 92 - <module>() - Predicting document 319...
2023-01-25 19:58:06,008 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The name of the company, as specified in the Business Name field of the B/F.
Date of Receipt: The date of receipt, in DD-MMM-YYYY format.
Address of Company: The address of the company, in the format
Street Name, City, Province, Postal code.
Total: The total amount of the order, excluding GST. If this field contains a negative value, it means that GST has been included in the total.
2023-01-25 19:58:06,009 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:06,009 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:06,010 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The name of the company, as specified in the Business Name field of the B/F.

2023-01-25 19:58:06,010 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The name of the company, as specified in the Business Name field of the B/F.
2023-01-25 19:58:06,010 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:06,011 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The date of receipt, in DD-MMM-YYYY format.

2023-01-25 19:58:06,011 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The date of receipt, in DD-MMM-YYYY format.
2023-01-25 19:58:06,011 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:06,011 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The address of the company, in the format
Street Name, City, Province, Postal code.

2023-01-25 19:58:06,012 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The address of the company, in the format Street Name, City, Province, Postal code.
2023-01-25 19:58:06,012 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:06,012 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The total amount of the order, excluding GST. If this field contains a negative value, it means that GST has been included in the total.
2023-01-25 19:58:06,013 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The total amount of the order, excluding GST. If this field contains a negative value, it means that GST has been included in the total.
2023-01-25 19:58:06,013 - __main__ - INFO - 96 - <module>() - Final prediction for document 319: {'company': 'The name of the company, as specified in the Business Name field of the B/F.', 'date': 'The date of receipt, in DD-MMM-YYYY format.', 'address': 'The address of the company, in the format Street Name, City, Province, Postal code.', 'total': 'The total amount of the order, excluding GST. If this field contains a negative value, it means that GST has been included in the total.'}
2023-01-25 19:58:06,015 - __main__ - INFO - 92 - <module>() - Predicting document 320...
2023-01-25 19:58:13,391 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Kedai Kopi OZ
Date of Receipt: 08/02/2018
Address of Company: 1 Jalan Tamparuli Desa 43800 Dengkil Selangor
Total: 295.00
The number of fields on your document set must match the number of fields on your record. If they don't match, please see the documentation on how to change the document set to fit your record.
If you don't have a record you will have to extract each key-value pair manually one by one to enter it in your records.
Do not change any of the values of your record,
2023-01-25 19:58:13,391 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:13,391 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:13,392 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kedai Kopi OZ

2023-01-25 19:58:13,392 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kedai Kopi OZ
2023-01-25 19:58:13,392 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:13,392 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  08/02/2018

2023-01-25 19:58:13,392 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 08/02/2018
2023-01-25 19:58:13,392 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:13,392 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1 Jalan Tamparuli Desa 43800 Dengkil Selangor

2023-01-25 19:58:13,393 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1 Jalan Tamparuli Desa 43800 Dengkil Selangor
2023-01-25 19:58:13,393 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:13,393 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  295.00
The number of fields on your document set must match the number of fields on your record. If they don't match, please see the documentation on how to change the document set to fit your record.
If you don't have a record you will have to extract each key-value pair manually one by one to enter it in your records.
Do not change any of the values of your record,
2023-01-25 19:58:13,393 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 295.00 The number of fields on your document set must match the number of fields on your record. If they don't match, please see the documentation on how to change the document set to fit your record. If you don't have a record you will have to extract each key-value pair manually one by one to enter it in your records. Do not change any of the values of your record,
2023-01-25 19:58:13,393 - __main__ - INFO - 96 - <module>() - Final prediction for document 320: {'company': 'Kedai Kopi OZ', 'date': '08/02/2018', 'address': '1 Jalan Tamparuli Desa 43800 Dengkil Selangor', 'total': "295.00 The number of fields on your document set must match the number of fields on your record. If they don't match, please see the documentation on how to change the document set to fit your record. If you don't have a record you will have to extract each key-value pair manually one by one to enter it in your records. Do not change any of the values of your record,"}
2023-01-25 19:58:13,395 - __main__ - INFO - 92 - <module>() - Predicting document 321...
2023-01-25 19:58:20,741 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Rizlindo
Date of Receipt: 2018-06-27
Address of Company: S.W.1 Jalan Mersing C, Pekan, Trengganu
Total: 2,500
Null

Create a new document, use the code below, then save it as output.docx.

Inputs

Input document: input.docx
Company Name: Rizlindo
Date of Receipt: 2018-06-27
Address of Company: S.W.1 Jalan Mersing C, Pekan, Trengganu
Total
2023-01-25 19:58:20,741 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:20,741 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:20,741 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Rizlindo

2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Rizlindo
2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018-06-27

2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018-06-27
2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S.W.1 Jalan Mersing C, Pekan, Trengganu

2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S.W.1 Jalan Mersing C, Pekan, Trengganu
2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:20,742 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2,500
Null

Create a new document, use the code below, then save it as output.docx.

Inputs

Input document: input.docx
Company Name: Rizlindo
Date of Receipt: 2018-06-27
Address of Company: S.W.1 Jalan Mersing C, Pekan, Trengganu
Total
2023-01-25 19:58:20,743 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2,500 Null Create a new document, use the code below, then save it as output.docx. Inputs Input document: input.docx Company Name: Rizlindo Date of Receipt: 2018-06-27 Address of Company: S.W.1 Jalan Mersing C, Pekan, Trengganu Total
2023-01-25 19:58:20,743 - __main__ - INFO - 96 - <module>() - Final prediction for document 321: {'company': 'Rizlindo', 'date': '2018-06-27', 'address': 'S.W.1 Jalan Mersing C, Pekan, Trengganu', 'total': '2,500 Null Create a new document, use the code below, then save it as output.docx. Inputs Input document: input.docx Company Name: Rizlindo Date of Receipt: 2018-06-27 Address of Company: S.W.1 Jalan Mersing C, Pekan, Trengganu Total'}
2023-01-25 19:58:20,744 - __main__ - INFO - 92 - <module>() - Predicting document 322...
2023-01-25 19:58:24,415 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  The name of the company is under the header "INVOICE TO" (e.g. JUNGHA BURA SINCO, WONG TAI HE, and so on). This should be a single word followed by a blank, separated by a comma (,).
2023-01-25 19:58:24,416 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:24,416 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:24,416 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  The name of the company is under the header "INVOICE TO" (e.g. JUNGHA BURA SINCO, WONG TAI HE, and so on). This should be a single word followed by a blank, separated by a comma (,).
2023-01-25 19:58:24,417 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: The name of the company is under the header "INVOICE TO" (e.g. JUNGHA BURA SINCO, WONG TAI HE, and so on). This should be a single word followed by a blank, separated by a comma (,).
2023-01-25 19:58:24,417 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:24,417 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:24,417 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:24,418 - __main__ - INFO - 96 - <module>() - Final prediction for document 322: {'company': 'The name of the company is under the header "INVOICE TO" (e.g. JUNGHA BURA SINCO, WONG TAI HE, and so on). This should be a single word followed by a blank, separated by a comma (,).'}
2023-01-25 19:58:24,419 - __main__ - INFO - 92 - <module>() - Predicting document 323...
2023-01-25 19:58:25,896 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Location
Date Of Receipt:
Address
Total:
-
2023-01-25 19:58:25,896 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:25,897 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:25,897 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Location

2023-01-25 19:58:25,898 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Location
2023-01-25 19:58:25,898 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:25,898 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Address

2023-01-25 19:58:25,899 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address
2023-01-25 19:58:25,899 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:25,899 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:25,899 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
-
2023-01-25 19:58:25,900 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: -
2023-01-25 19:58:25,900 - __main__ - INFO - 96 - <module>() - Final prediction for document 323: {'company': 'Location', 'date': 'Address', 'total': '-'}
2023-01-25 19:58:25,902 - __main__ - INFO - 92 - <module>() - Predicting document 324...
2023-01-25 19:58:33,533 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Royal Tea
Date of Receipt: 02/06/2018
Address of Company: Johor Bahru
Total: 13.10

Output

Please include the output with your submission.

A:

The easiest way to work this out would be to split the document by the number of lines.
var document = new TextReader("test.txt");
var lines = document.ReadToEnd().Split('\n');
var result = lines.First(l => l.Contains("<|stop key|>"));
var date = DateTime.Parse(lines.Last().Split('
2023-01-25 19:58:33,533 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:33,534 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:33,534 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Royal Tea

2023-01-25 19:58:33,534 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Royal Tea
2023-01-25 19:58:33,535 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:33,535 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  02/06/2018

2023-01-25 19:58:33,535 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 02/06/2018
2023-01-25 19:58:33,535 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:33,536 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Johor Bahru

2023-01-25 19:58:33,536 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Johor Bahru
2023-01-25 19:58:33,536 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:33,537 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13.10

Output

Please include the output with your submission.

A:

The easiest way to work this out would be to split the document by the number of lines.
var document = new TextReader("test.txt");
var lines = document.ReadToEnd().Split('\n');
var result = lines.First(l => l.Contains("<|stop key|>"));
var date = DateTime.Parse(lines.Last().Split('
2023-01-25 19:58:33,537 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13.10 Output Please include the output with your submission. A: The easiest way to work this out would be to split the document by the number of lines. var document = new TextReader("test.txt"); var lines = document.ReadToEnd().Split('\n'); var result = lines.First(l => l.Contains("<|stop key|>")); var date = DateTime.Parse(lines.Last().Split('
2023-01-25 19:58:33,537 - __main__ - INFO - 96 - <module>() - Final prediction for document 324: {'company': 'Royal Tea', 'date': '02/06/2018', 'address': 'Johor Bahru', 'total': '13.10 Output Please include the output with your submission. A: The easiest way to work this out would be to split the document by the number of lines. var document = new TextReader("test.txt"); var lines = document.ReadToEnd().Split(\'\\n\'); var result = lines.First(l => l.Contains("<|stop key|>")); var date = DateTime.Parse(lines.Last().Split(\''}
2023-01-25 19:58:33,539 - __main__ - INFO - 92 - <module>() - Predicting document 325...
2023-01-25 19:58:40,267 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:

For further detail, check the document (e.g. for "Date of Receipt", check the "Date_of_Receipt" field).

If you would like us to follow up your response to further questions/inquiries/remarks, kindly email them to info.accounts@icareer.com.

Thank you for contacting our office and we look forward to assist you.

Regards,
ICareer Career Opportunities, Sdn Bhd

* Required

*

*
2023-01-25 19:58:40,268 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:40,268 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:40,268 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:40,269 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:40,269 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:40,269 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:40,269 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:40,269 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:40,269 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:40,270 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:40,270 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:40,270 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

For further detail, check the document (e.g. for "Date of Receipt", check the "Date_of_Receipt" field).

If you would like us to follow up your response to further questions/inquiries/remarks, kindly email them to info.accounts@icareer.com.

Thank you for contacting our office and we look forward to assist you.

Regards,
ICareer Career Opportunities, Sdn Bhd

* Required

*

*
2023-01-25 19:58:40,270 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: For further detail, check the document (e.g. for "Date of Receipt", check the "Date_of_Receipt" field). If you would like us to follow up your response to further questions/inquiries/remarks, kindly email them to info.accounts@icareer.com. Thank you for contacting our office and we look forward to assist you. Regards, ICareer Career Opportunities, Sdn Bhd * Required * *
2023-01-25 19:58:40,270 - __main__ - INFO - 96 - <module>() - Final prediction for document 325: {'total': 'For further detail, check the document (e.g. for "Date of Receipt", check the "Date_of_Receipt" field). If you would like us to follow up your response to further questions/inquiries/remarks, kindly email them to info.accounts@icareer.com. Thank you for contacting our office and we look forward to assist you. Regards, ICareer Career Opportunities, Sdn Bhd * Required * *'}
2023-01-25 19:58:40,272 - __main__ - INFO - 92 - <module>() - Predicting document 326...
2023-01-25 19:58:44,343 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:

Date of Receipt:

Address of Company:

Total:

Receipt
Type:

Value

Amount

2023-01-25 19:58:44,344 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:44,344 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:44,344 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:58:44,345 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:44,345 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:44,345 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:58:44,345 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:44,346 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:44,346 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:


2023-01-25 19:58:44,346 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:44,346 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:44,347 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

Receipt
Type:

Value

Amount

2023-01-25 19:58:44,347 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Receipt Type: Value Amount
2023-01-25 19:58:44,347 - __main__ - INFO - 96 - <module>() - Final prediction for document 326: {'total': 'Receipt Type: Value Amount'}
2023-01-25 19:58:44,349 - __main__ - INFO - 92 - <module>() - Predicting document 327...
2023-01-25 19:58:47,130 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  <Company Name>
Date of Receipt: <Date of Receipt>
Address of Company: <Address of Company>
Total: <Total>
2023-01-25 19:58:47,131 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:47,131 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:47,131 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Company Name>

2023-01-25 19:58:47,131 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Company Name>
2023-01-25 19:58:47,131 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:47,132 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Date of Receipt>

2023-01-25 19:58:47,132 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Date of Receipt>
2023-01-25 19:58:47,132 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:47,132 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Address of Company>

2023-01-25 19:58:47,132 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Address of Company>
2023-01-25 19:58:47,133 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:47,133 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  <Total>
2023-01-25 19:58:47,133 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: <Total>
2023-01-25 19:58:47,133 - __main__ - INFO - 96 - <module>() - Final prediction for document 327: {'company': '<Company Name>', 'date': '<Date of Receipt>', 'address': '<Address of Company>', 'total': '<Total>'}
2023-01-25 19:58:47,134 - __main__ - INFO - 92 - <module>() - Predicting document 328...
2023-01-25 19:58:49,315 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KINGS
Date of Receipt: 01/01/1970
Address of Company: KINGS
Total: 30.000
2023-01-25 19:58:49,315 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:49,316 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:49,316 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KINGS

2023-01-25 19:58:49,317 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KINGS
2023-01-25 19:58:49,317 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:49,317 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  01/01/1970

2023-01-25 19:58:49,317 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 01/01/1970
2023-01-25 19:58:49,318 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:49,318 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KINGS

2023-01-25 19:58:49,318 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KINGS
2023-01-25 19:58:49,319 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:49,319 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  30.000
2023-01-25 19:58:49,319 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 30.000
2023-01-25 19:58:49,319 - __main__ - INFO - 96 - <module>() - Final prediction for document 328: {'company': 'KINGS', 'date': '01/01/1970', 'address': 'KINGS', 'total': '30.000'}
2023-01-25 19:58:49,321 - __main__ - INFO - 92 - <module>() - Predicting document 329...
2023-01-25 19:58:56,269 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
0.000

Output

Output

Sample Output

See, that's how simple it is. Here are a few other useful functions you can use.

Here we are only passing a single string, but you can also pass any other type of variable to this function.
2023-01-25 19:58:56,270 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:58:56,271 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:58:56,271 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:56,271 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:56,271 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:58:56,271 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:56,272 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:56,272 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:58:56,272 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:58:56,272 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:58:56,272 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:58:56,273 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
0.000

Output

Output

Sample Output

See, that's how simple it is. Here are a few other useful functions you can use.

Here we are only passing a single string, but you can also pass any other type of variable to this function.
2023-01-25 19:58:56,273 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 0.000 Output Output Sample Output See, that's how simple it is. Here are a few other useful functions you can use. Here we are only passing a single string, but you can also pass any other type of variable to this function.
2023-01-25 19:58:56,273 - __main__ - INFO - 96 - <module>() - Final prediction for document 329: {'total': "0.000 Output Output Sample Output See, that's how simple it is. Here are a few other useful functions you can use. Here we are only passing a single string, but you can also pass any other type of variable to this function."}
2023-01-25 19:58:56,275 - __main__ - INFO - 92 - <module>() - Predicting document 330...
2023-01-25 19:59:03,651 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  company name
Date of Receipt: date of receipt
Address of Company: address
Total: total
<?xml version="1.0" encoding="UTF-8"?>
<company id="R-000582901" doc-type="invoice">
    <name>company name</name>
    <address>
        <address1>address</address1>
        <address2>address</address2>
        <address3>address</address3>
        <address4>address</address4>
        <postcode>postcode</postcode>

2023-01-25 19:59:03,652 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:03,652 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:03,652 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  company name

2023-01-25 19:59:03,652 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: company name
2023-01-25 19:59:03,652 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:03,653 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  date of receipt

2023-01-25 19:59:03,653 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: date of receipt
2023-01-25 19:59:03,653 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:03,653 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  address

2023-01-25 19:59:03,653 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: address
2023-01-25 19:59:03,653 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:03,654 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  total
<?xml version="1.0" encoding="UTF-8"?>
<company id="R-000582901" doc-type="invoice">
    <name>company name</name>
    <address>
        <address1>address</address1>
        <address2>address</address2>
        <address3>address</address3>
        <address4>address</address4>
        <postcode>postcode</postcode>

2023-01-25 19:59:03,654 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: total <?xml version="1.0" encoding="UTF-8"?> <company id="R-000582901" doc-type="invoice">   <name>company name</name>   <address>     <address1>address</address1>     <address2>address</address2>     <address3>address</address3>     <address4>address</address4>     <postcode>postcode</postcode>
2023-01-25 19:59:03,654 - __main__ - INFO - 96 - <module>() - Final prediction for document 330: {'company': 'company name', 'date': 'date of receipt', 'address': 'address', 'total': 'total <?xml version="1.0" encoding="UTF-8"?> <company id="R-000582901" doc-type="invoice">   <name>company name</name>   <address>     <address1>address</address1>     <address2>address</address2>     <address3>address</address3>     <address4>address</address4>     <postcode>postcode</postcode>'}
2023-01-25 19:59:03,655 - __main__ - INFO - 92 - <module>() - Predicting document 331...
2023-01-25 19:59:10,646 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Sanyu Stationery
Date of Receipt: 21/12/2017
Address of Company: Kulim
Total: 3.90
Sanyu Stationery Shop (Lane 33&43)
NO. 31G&33G, JALAN SETIA INDAH X ,U13/X
40170 SETIA ALAM
MOBILE /WHATSAPPS : +6012-918 7937
TEL: +603-3362 4137
GST ID NO: 001531760640
TAX INVOICE
OWNED BY :
SANY
2023-01-25 19:59:10,646 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:10,646 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:10,646 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Sanyu Stationery

2023-01-25 19:59:10,646 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Sanyu Stationery
2023-01-25 19:59:10,646 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:10,646 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  21/12/2017

2023-01-25 19:59:10,647 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 21/12/2017
2023-01-25 19:59:10,647 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:10,647 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kulim

2023-01-25 19:59:10,647 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kulim
2023-01-25 19:59:10,647 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:10,647 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  3.90
Sanyu Stationery Shop (Lane 33&43)
NO. 31G&33G, JALAN SETIA INDAH X ,U13/X
40170 SETIA ALAM
MOBILE /WHATSAPPS : +6012-918 7937
TEL: +603-3362 4137
GST ID NO: 001531760640
TAX INVOICE
OWNED BY :
SANY
2023-01-25 19:59:10,647 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 3.90 Sanyu Stationery Shop (Lane 33&43) NO. 31G&33G, JALAN SETIA INDAH X ,U13/X 40170 SETIA ALAM MOBILE /WHATSAPPS : +6012-918 7937 TEL: +603-3362 4137 GST ID NO: 001531760640 TAX INVOICE OWNED BY : SANY
2023-01-25 19:59:10,647 - __main__ - INFO - 96 - <module>() - Final prediction for document 331: {'company': 'Sanyu Stationery', 'date': '21/12/2017', 'address': 'Kulim', 'total': '3.90 Sanyu Stationery Shop (Lane 33&43) NO. 31G&33G, JALAN SETIA INDAH X ,U13/X 40170 SETIA ALAM MOBILE /WHATSAPPS : +6012-918 7937 TEL: +603-3362 4137 GST ID NO: 001531760640 TAX INVOICE OWNED BY : SANY'}
2023-01-25 19:59:10,648 - __main__ - INFO - 92 - <module>() - Predicting document 332...
2023-01-25 19:59:13,773 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  JALAN AIR PANAS
Date of Receipt: 15/01/2018
Address of Company: 1A JALAN AIR PANAS
Total: 11.13
2023-01-25 19:59:13,774 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  JALAN AIR PANAS

2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: JALAN AIR PANAS
2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  15/01/2018

2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 15/01/2018
2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1A JALAN AIR PANAS

2023-01-25 19:59:13,775 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1A JALAN AIR PANAS
2023-01-25 19:59:13,778 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:13,779 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  11.13
2023-01-25 19:59:13,779 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 11.13
2023-01-25 19:59:13,779 - __main__ - INFO - 96 - <module>() - Final prediction for document 332: {'company': 'JALAN AIR PANAS', 'date': '15/01/2018', 'address': '1A JALAN AIR PANAS', 'total': '11.13'}
2023-01-25 19:59:13,781 - __main__ - INFO - 92 - <module>() - Predicting document 333...
2023-01-25 19:59:18,939 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  001-2018/03/27 21:30:42
Date of Receipt: 2018/03/27 23:41:41
Address of Company: CENTRAL JOHANNESBURG P.O.BOX 81621, HARDING RD, SOUTHERN SUBURB, SOUTH GABON, GABON
Total: USD 2,583,800
2023-01-25 19:59:18,940 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:18,940 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:18,940 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  001-2018/03/27 21:30:42

2023-01-25 19:59:18,940 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 001-2018/03/27 21:30:42
2023-01-25 19:59:18,940 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:18,941 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2018/03/27 23:41:41

2023-01-25 19:59:18,941 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2018/03/27 23:41:41
2023-01-25 19:59:18,941 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:18,941 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CENTRAL JOHANNESBURG P.O.BOX 81621, HARDING RD, SOUTHERN SUBURB, SOUTH GABON, GABON

2023-01-25 19:59:18,941 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CENTRAL JOHANNESBURG P.O.BOX 81621, HARDING RD, SOUTHERN SUBURB, SOUTH GABON, GABON
2023-01-25 19:59:18,941 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:18,941 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  USD 2,583,800
2023-01-25 19:59:18,941 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: USD 2,583,800
2023-01-25 19:59:18,941 - __main__ - INFO - 96 - <module>() - Final prediction for document 333: {'company': '001-2018/03/27 21:30:42', 'date': '2018/03/27 23:41:41', 'address': 'CENTRAL JOHANNESBURG P.O.BOX 81621, HARDING RD, SOUTHERN SUBURB, SOUTH GABON, GABON', 'total': 'USD 2,583,800'}
2023-01-25 19:59:18,943 - __main__ - INFO - 92 - <module>() - Predicting document 334...
2023-01-25 19:59:21,076 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
2023-01-25 19:59:21,077 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:21,077 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:21,078 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:21,078 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:21,078 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:21,079 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:21,079 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:21,079 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:21,079 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:21,080 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:21,080 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:21,080 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
2023-01-25 19:59:21,080 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:21,081 - __main__ - INFO - 96 - <module>() - Final prediction for document 334: {}
2023-01-25 19:59:21,082 - __main__ - INFO - 92 - <module>() - Predicting document 335...
2023-01-25 19:59:25,885 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Perny Berhad
Receipt Date: 07/11/2017
Address of Company: Jalan Haji Mustapha, Jalan Menteri, USJ 2, USJ, Kuala Lumpur, 11800, Selangor
Total: 28.02

If you have any problems in the above query please post a comment below.
2023-01-25 19:59:25,886 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:25,886 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:25,887 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Perny Berhad
Receipt Date: 07/11/2017

2023-01-25 19:59:25,887 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Perny Berhad Receipt Date: 07/11/2017
2023-01-25 19:59:25,887 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:25,888 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:25,888 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Jalan Haji Mustapha, Jalan Menteri, USJ 2, USJ, Kuala Lumpur, 11800, Selangor

2023-01-25 19:59:25,888 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Haji Mustapha, Jalan Menteri, USJ 2, USJ, Kuala Lumpur, 11800, Selangor
2023-01-25 19:59:25,889 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:25,889 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  28.02

If you have any problems in the above query please post a comment below.
2023-01-25 19:59:25,889 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 28.02 If you have any problems in the above query please post a comment below.
2023-01-25 19:59:25,889 - __main__ - INFO - 96 - <module>() - Final prediction for document 335: {'company': 'Perny Berhad Receipt Date: 07/11/2017', 'address': 'Jalan Haji Mustapha, Jalan Menteri, USJ 2, USJ, Kuala Lumpur, 11800, Selangor', 'total': '28.02 If you have any problems in the above query please post a comment below.'}
2023-01-25 19:59:25,891 - __main__ - INFO - 92 - <module>() - Predicting document 336...
2023-01-25 19:59:32,667 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  A&C Bank Bhd
Date of Receipt: 2017
Address of Company: Kuala Lumpur
Total: 10,000,000

A:

I will answer this from my last comment. You are currently only able to access document properties, which cannot be seen as input for your regex. From what I see, you would have to go through each key and value for each document.
The solution to this would be to iterate through all input documents and put them all into a array. Each key of the input documents should be used as a key in an object to keep the original information
2023-01-25 19:59:32,668 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:32,668 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:32,669 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  A&C Bank Bhd

2023-01-25 19:59:32,669 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: A&C Bank Bhd
2023-01-25 19:59:32,669 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:32,670 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  2017

2023-01-25 19:59:32,670 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 2017
2023-01-25 19:59:32,670 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:32,671 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Kuala Lumpur

2023-01-25 19:59:32,671 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Kuala Lumpur
2023-01-25 19:59:32,671 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:32,671 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  10,000,000

A:

I will answer this from my last comment. You are currently only able to access document properties, which cannot be seen as input for your regex. From what I see, you would have to go through each key and value for each document.
The solution to this would be to iterate through all input documents and put them all into a array. Each key of the input documents should be used as a key in an object to keep the original information
2023-01-25 19:59:32,672 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 10,000,000 A: I will answer this from my last comment. You are currently only able to access document properties, which cannot be seen as input for your regex. From what I see, you would have to go through each key and value for each document. The solution to this would be to iterate through all input documents and put them all into a array. Each key of the input documents should be used as a key in an object to keep the original information
2023-01-25 19:59:32,672 - __main__ - INFO - 96 - <module>() - Final prediction for document 336: {'company': 'A&C Bank Bhd', 'date': '2017', 'address': 'Kuala Lumpur', 'total': '10,000,000 A: I will answer this from my last comment. You are currently only able to access document properties, which cannot be seen as input for your regex. From what I see, you would have to go through each key and value for each document. The solution to this would be to iterate through all input documents and put them all into a array. Each key of the input documents should be used as a key in an object to keep the original information'}
2023-01-25 19:59:32,674 - __main__ - INFO - 92 - <module>() - Predicting document 337...
2023-01-25 19:59:40,379 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt:
Address of Company:
Total:
|<|stop key|>:

Your code should display the above document.

Answer

<cw-content-block id="company_name_description" cw-module-name="cw-admin-form-content-block" cw-form-name="Company Name - Description">
Company Name:
<p>Description of company (maximum 160 characters)</p>
</cw-content-block>
<cw-content-block id="total_description" cw-module-name
2023-01-25 19:59:40,380 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:40,380 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:40,380 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:40,380 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:40,381 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:40,381 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:40,381 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:40,381 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:40,381 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 19:59:40,382 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 19:59:40,382 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:40,382 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
|<|stop key|>:

Your code should display the above document.

Answer

<cw-content-block id="company_name_description" cw-module-name="cw-admin-form-content-block" cw-form-name="Company Name - Description">
Company Name:
<p>Description of company (maximum 160 characters)</p>
</cw-content-block>
<cw-content-block id="total_description" cw-module-name
2023-01-25 19:59:40,382 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: |<|stop key|>: Your code should display the above document. Answer <cw-content-block id="company_name_description" cw-module-name="cw-admin-form-content-block" cw-form-name="Company Name - Description"> Company Name: <p>Description of company (maximum 160 characters)</p> </cw-content-block> <cw-content-block id="total_description" cw-module-name
2023-01-25 19:59:40,383 - __main__ - INFO - 96 - <module>() - Final prediction for document 337: {'total': '|<|stop key|>: Your code should display the above document. Answer <cw-content-block id="company_name_description" cw-module-name="cw-admin-form-content-block" cw-form-name="Company Name - Description"> Company Name: <p>Description of company (maximum 160 characters)</p> </cw-content-block> <cw-content-block id="total_description" cw-module-name'}
2023-01-25 19:59:40,384 - __main__ - INFO - 92 - <module>() - Predicting document 338...
2023-01-25 19:59:43,142 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  XYZ Inc.
Date of Receipt: 12-04-2016
Address of Company: S.E.R.A
Total: 653.00
2023-01-25 19:59:43,143 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:43,143 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:43,144 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  XYZ Inc.

2023-01-25 19:59:43,144 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: XYZ Inc.
2023-01-25 19:59:43,144 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:43,144 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12-04-2016

2023-01-25 19:59:43,144 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12-04-2016
2023-01-25 19:59:43,145 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:43,145 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  S.E.R.A

2023-01-25 19:59:43,145 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: S.E.R.A
2023-01-25 19:59:43,145 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:43,146 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  653.00
2023-01-25 19:59:43,146 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 653.00
2023-01-25 19:59:43,146 - __main__ - INFO - 96 - <module>() - Final prediction for document 338: {'company': 'XYZ Inc.', 'date': '12-04-2016', 'address': 'S.E.R.A', 'total': '653.00'}
2023-01-25 19:59:43,147 - __main__ - INFO - 92 - <module>() - Predicting document 339...
2023-01-25 19:59:49,989 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  CompanyName
Date of Receipt: DateOfReceipt
Address of Company: AddressOfCompany
Total: Total
*
This sample shows how to extract the company name, date of receipt, address of the company and the total amount paid. Use the sample in a Word Document, Excel Document or any similar format. You can then use the extracted data to find other companies that paid less for the same item.
Extract Key Values from your doc.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If
2023-01-25 19:59:49,989 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:49,989 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:49,990 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  CompanyName

2023-01-25 19:59:49,990 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: CompanyName
2023-01-25 19:59:49,990 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:49,990 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  DateOfReceipt

2023-01-25 19:59:49,990 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: DateOfReceipt
2023-01-25 19:59:49,990 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:49,991 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  AddressOfCompany

2023-01-25 19:59:49,991 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: AddressOfCompany
2023-01-25 19:59:49,991 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:49,991 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total
*
This sample shows how to extract the company name, date of receipt, address of the company and the total amount paid. Use the sample in a Word Document, Excel Document or any similar format. You can then use the extracted data to find other companies that paid less for the same item.
Extract Key Values from your doc.

Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If
2023-01-25 19:59:49,991 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total * This sample shows how to extract the company name, date of receipt, address of the company and the total amount paid. Use the sample in a Word Document, Excel Document or any similar format. You can then use the extracted data to find other companies that paid less for the same item. Extract Key Values from your doc. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If
2023-01-25 19:59:49,991 - __main__ - INFO - 96 - <module>() - Final prediction for document 339: {'company': 'CompanyName', 'date': 'DateOfReceipt', 'address': 'AddressOfCompany', 'total': 'Total * This sample shows how to extract the company name, date of receipt, address of the company and the total amount paid. Use the sample in a Word Document, Excel Document or any similar format. You can then use the extracted data to find other companies that paid less for the same item. Extract Key Values from your doc. Extract "Company Name", "Date of Receipt", "Address of Company", "Total", "<|stop key|>" from the document above. If'}
2023-01-25 19:59:49,992 - __main__ - INFO - 92 - <module>() - Predicting document 340...
2023-01-25 19:59:56,498 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name in database
Date of Receipt: Month/day/year of invoice date
Address of Company: Address of company
Total: (amount of GST(I) plus tax)
|stop key|: Null

You can also save it as an RDF triples [key:value key:value] using the format [["Company Name", "Name", null], ["Date of Receipt", "Month/day/year", "Address of Company"], [[amount of GST(I) plus tax], "Total"]] or [key:value key:value value:value] to save as an
2023-01-25 19:59:56,499 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 19:59:56,499 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 19:59:56,500 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name in database

2023-01-25 19:59:56,500 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name in database
2023-01-25 19:59:56,501 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 19:59:56,501 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Month/day/year of invoice date

2023-01-25 19:59:56,501 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Month/day/year of invoice date
2023-01-25 19:59:56,502 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 19:59:56,502 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of company

2023-01-25 19:59:56,502 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of company
2023-01-25 19:59:56,502 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 19:59:56,503 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  (amount of GST(I) plus tax)
|stop key|: Null

You can also save it as an RDF triples [key:value key:value] using the format [["Company Name", "Name", null], ["Date of Receipt", "Month/day/year", "Address of Company"], [[amount of GST(I) plus tax], "Total"]] or [key:value key:value value:value] to save as an
2023-01-25 19:59:56,503 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (amount of GST(I) plus tax) |stop key|: Null You can also save it as an RDF triples [key:value key:value] using the format [["Company Name", "Name", null], ["Date of Receipt", "Month/day/year", "Address of Company"], [[amount of GST(I) plus tax], "Total"]] or [key:value key:value value:value] to save as an
2023-01-25 19:59:56,503 - __main__ - INFO - 96 - <module>() - Final prediction for document 340: {'company': 'Company Name in database', 'date': 'Month/day/year of invoice date', 'address': 'Address of company', 'total': '(amount of GST(I) plus tax) |stop key|: Null You can also save it as an RDF triples [key:value key:value] using the format [["Company Name", "Name", null], ["Date of Receipt", "Month/day/year", "Address of Company"], [[amount of GST(I) plus tax], "Total"]] or [key:value key:value value:value] to save as an'}
2023-01-25 19:59:56,505 - __main__ - INFO - 92 - <module>() - Predicting document 341...
2023-01-25 20:00:04,433 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  TAIWAN HORIZON ELECTRONIC CO., LTD.
Date of Receipt: 14-12-2016
Address of Company: 7F, No. 6, Lane 3, Daitan District, Xinyi District, Taiwan, Republic of China
Total: 1,500,000
The above is the information you need to complete the "Total Discount" section for this order. For example, if the cost of all items in your invoice is 1,000, you would simply use 1,500 as the "Total" entry.
If you wish to enter a percentage, you
2023-01-25 20:00:04,435 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:04,435 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:04,436 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TAIWAN HORIZON ELECTRONIC CO., LTD.

2023-01-25 20:00:04,436 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TAIWAN HORIZON ELECTRONIC CO., LTD.
2023-01-25 20:00:04,436 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:04,436 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14-12-2016

2023-01-25 20:00:04,437 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14-12-2016
2023-01-25 20:00:04,437 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:04,437 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  7F, No. 6, Lane 3, Daitan District, Xinyi District, Taiwan, Republic of China

2023-01-25 20:00:04,438 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 7F, No. 6, Lane 3, Daitan District, Xinyi District, Taiwan, Republic of China
2023-01-25 20:00:04,438 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:04,438 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  1,500,000
The above is the information you need to complete the "Total Discount" section for this order. For example, if the cost of all items in your invoice is 1,000, you would simply use 1,500 as the "Total" entry.
If you wish to enter a percentage, you
2023-01-25 20:00:04,438 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 1,500,000 The above is the information you need to complete the "Total Discount" section for this order. For example, if the cost of all items in your invoice is 1,000, you would simply use 1,500 as the "Total" entry. If you wish to enter a percentage, you
2023-01-25 20:00:04,439 - __main__ - INFO - 96 - <module>() - Final prediction for document 341: {'company': 'TAIWAN HORIZON ELECTRONIC CO., LTD.', 'date': '14-12-2016', 'address': '7F, No. 6, Lane 3, Daitan District, Xinyi District, Taiwan, Republic of China', 'total': '1,500,000 The above is the information you need to complete the "Total Discount" section for this order. For example, if the cost of all items in your invoice is 1,000, you would simply use 1,500 as the "Total" entry. If you wish to enter a percentage, you'}
2023-01-25 20:00:04,441 - __main__ - INFO - 92 - <module>() - Predicting document 342...
2023-01-25 20:00:11,540 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  KHANG YONG ENTERPRISE

Date of Receipt: 06/01/2018

Address of Company: 9, Jalan Subang Jasa 3, 40150 Shah Alam, Selangor

Total: 65.70

2023-01-25 20:00:11,541 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:11,541 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:11,541 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  KHANG YONG ENTERPRISE


2023-01-25 20:00:11,541 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: KHANG YONG ENTERPRISE
2023-01-25 20:00:11,541 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:11,542 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  06/01/2018


2023-01-25 20:00:11,542 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 06/01/2018
2023-01-25 20:00:11,542 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:11,542 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  9, Jalan Subang Jasa 3, 40150 Shah Alam, Selangor


2023-01-25 20:00:11,542 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 9, Jalan Subang Jasa 3, 40150 Shah Alam, Selangor
2023-01-25 20:00:11,542 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:11,542 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  65.70

2023-01-25 20:00:11,542 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 65.70
2023-01-25 20:00:11,542 - __main__ - INFO - 96 - <module>() - Final prediction for document 342: {'company': 'KHANG YONG ENTERPRISE', 'date': '06/01/2018', 'address': '9, Jalan Subang Jasa 3, 40150 Shah Alam, Selangor', 'total': '65.70'}
2023-01-25 20:00:11,543 - __main__ - INFO - 92 - <module>() - Predicting document 343...
2023-01-25 20:00:14,210 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  Company Name

Date of Receipt:
Address of Company: Address of Company

Total: Total

2023-01-25 20:00:14,211 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:14,211 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:14,211 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Company Name


2023-01-25 20:00:14,212 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Company Name
2023-01-25 20:00:14,212 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:14,212 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 20:00:14,212 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 20:00:14,213 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:14,213 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Address of Company


2023-01-25 20:00:14,213 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Address of Company
2023-01-25 20:00:14,213 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:14,214 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  Total

2023-01-25 20:00:14,214 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Total
2023-01-25 20:00:14,214 - __main__ - INFO - 96 - <module>() - Final prediction for document 343: {'company': 'Company Name', 'address': 'Address of Company', 'total': 'Total'}
2023-01-25 20:00:14,216 - __main__ - INFO - 92 - <module>() - Predicting document 344...
2023-01-25 20:00:21,592 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  SUPER 7 CASH & CARRY SDN BHD

Date of Receipt: 27-01-2018

Address of Company:
Jalan Besar,
775026

Total: 12000

Key: Value
Company Name: SUPER 7 CASH & CARRY SDN BHD

Date of Receipt: 27-01-2018

Address of Company:
Jalan Besar,
775026

Total: 12000

Key: Value
Company Name: SUPER 7 CASH & CARRY SDN BHD

Date
2023-01-25 20:00:21,593 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:21,593 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:21,594 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  SUPER 7 CASH & CARRY SDN BHD


2023-01-25 20:00:21,594 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: SUPER 7 CASH & CARRY SDN BHD
2023-01-25 20:00:21,594 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:21,594 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  27-01-2018


2023-01-25 20:00:21,594 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 27-01-2018
2023-01-25 20:00:21,595 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:21,595 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
Jalan Besar,
775026


2023-01-25 20:00:21,595 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: Jalan Besar, 775026
2023-01-25 20:00:21,595 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:21,596 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  12000

Key: Value
Company Name: SUPER 7 CASH & CARRY SDN BHD

Date of Receipt: 27-01-2018

Address of Company:
Jalan Besar,
775026


2023-01-25 20:00:21,596 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 12000 Key: Value Company Name: SUPER 7 CASH & CARRY SDN BHD Date of Receipt: 27-01-2018 Address of Company: Jalan Besar, 775026
2023-01-25 20:00:21,596 - __main__ - INFO - 96 - <module>() - Final prediction for document 344: {'company': 'SUPER 7 CASH & CARRY SDN BHD', 'date': '27-01-2018', 'address': 'Jalan Besar, 775026', 'total': '12000 Key: Value Company Name: SUPER 7 CASH & CARRY SDN BHD Date of Receipt: 27-01-2018 Address of Company: Jalan Besar, 775026'}
2023-01-25 20:00:21,597 - __main__ - INFO - 92 - <module>() - Predicting document 345...
2023-01-25 20:00:24,145 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:  ROYALTEA
Date of Receipt: 09/05/2018 12:23 PM
Address of Company: TAMAN SUTERA UTAMA
Total: 13.00
2023-01-25 20:00:24,146 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:24,146 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:24,146 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  ROYALTEA

2023-01-25 20:00:24,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: ROYALTEA
2023-01-25 20:00:24,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:24,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  09/05/2018 12:23 PM

2023-01-25 20:00:24,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 09/05/2018 12:23 PM
2023-01-25 20:00:24,147 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:24,147 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  TAMAN SUTERA UTAMA

2023-01-25 20:00:24,147 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: TAMAN SUTERA UTAMA
2023-01-25 20:00:24,148 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:24,148 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  13.00
2023-01-25 20:00:24,148 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 13.00
2023-01-25 20:00:24,148 - __main__ - INFO - 96 - <module>() - Final prediction for document 345: {'company': 'ROYALTEA', 'date': '09/05/2018 12:23 PM', 'address': 'TAMAN SUTERA UTAMA', 'total': '13.00'}
2023-01-25 20:00:24,149 - __main__ - INFO - 92 - <module>() - Predicting document 346...
2023-01-25 20:00:29,792 - pipeline - INFO - 262 - get_model_output() - Raw prediction for document:
Date of Receipt: 22 MAR 18
Address of Company: 14 KM JAKARTA - PUNEKALAU LABAWAN
Total:
(A) GST @6% INCLUDED IN TOTAL
29.35
Key: Value
Company Name:
Date of Receipt: 22 MAR 18
Address of Company: 14 KM JAKARTA - PUNEKALAU LABAWAN
Total:
(B) GST @0%
0.00
Key: Value
Company Name:
Date of Receipt: 22 MAR 18
Address of
2023-01-25 20:00:29,793 - pipeline - INFO - 125 - get_parsed_output() - No subdocs necessary
2023-01-25 20:00:29,794 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Company Name:
2023-01-25 20:00:29,794 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:

2023-01-25 20:00:29,795 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value:
2023-01-25 20:00:29,795 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Date of Receipt:
2023-01-25 20:00:29,795 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  22 MAR 18

2023-01-25 20:00:29,796 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 22 MAR 18
2023-01-25 20:00:29,796 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Address of Company:
2023-01-25 20:00:29,796 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:  14 KM JAKARTA - PUNEKALAU LABAWAN

2023-01-25 20:00:29,797 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: 14 KM JAKARTA - PUNEKALAU LABAWAN
2023-01-25 20:00:29,797 - uni_kie.parsers.parser - INFO - 225 - parse_model_output() - Key: Total:
2023-01-25 20:00:29,797 - uni_kie.parsers.parser - INFO - 249 - parse_model_output() - Raw value:
(A) GST @6% INCLUDED IN TOTAL
29.35
Key: Value
Company Name:
Date of Receipt: 22 MAR 18
Address of Company: 14 KM JAKARTA - PUNEKALAU LABAWAN

2023-01-25 20:00:29,797 - uni_kie.parsers.parser - INFO - 265 - parse_model_output() - Stripped value: (A) GST @6% INCLUDED IN TOTAL 29.35 Key: Value Company Name: Date of Receipt: 22 MAR 18 Address of Company: 14 KM JAKARTA - PUNEKALAU LABAWAN
2023-01-25 20:00:29,798 - __main__ - INFO - 96 - <module>() - Final prediction for document 346: {'date': '22 MAR 18', 'address': '14 KM JAKARTA - PUNEKALAU LABAWAN', 'total': '(A) GST @6% INCLUDED IN TOTAL 29.35 Key: Value Company Name: Date of Receipt: 22 MAR 18 Address of Company: 14 KM JAKARTA - PUNEKALAU LABAWAN'}
2023-01-25 20:00:29,907 - __main__ - INFO - 109 - <module>() - ================== DONE ==================
